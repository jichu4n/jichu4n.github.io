<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Season of Code</title><link href="https://seasonofcode.com/" rel="alternate"></link><link href="https://seasonofcode.com/feeds/all-en.atom.xml" rel="self"></link><id>https://seasonofcode.com/</id><updated>2017-02-01T21:15:00-08:00</updated><entry><title>How X Window Managers Work, And How To Write One (Part III)</title><link href="https://seasonofcode.com/posts/how-x-window-managers-work-and-how-to-write-one-part-iii.html" rel="alternate"></link><updated>2017-02-01T21:15:00-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2017-02-01:posts/how-x-window-managers-work-and-how-to-write-one-part-iii.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;&lt;!--googleoff: index--&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="sidebarblock"&gt;
&lt;div class="content"&gt;
&lt;div class="title"&gt;Series Contents&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-i.html"&gt;Part I: Basic Concepts&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-ii.html"&gt;Part II: Introduction, Setup &amp;amp; Teardown, Initialization, Event Loop&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-iii.html"&gt;&lt;strong&gt;Part III: Interaction with Application Windows&lt;/strong&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;!--googleon: index--&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In &lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-ii.html"&gt;Part
II of this series&lt;/a&gt;, we discussed X libraries and implementation choices, and
examined the basic structure of a window manager. In Part III, we will start
interacting with client windows and the user through events. We will review the
fundamentals of window manager implementation, using the implementation in our
example non-compositing reparenting window manager,
&lt;a href="https://github.com/jichu4n/basic_wm"&gt;basic_wm&lt;/a&gt;, for reference.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_4_interaction_with_application_windows"&gt;Step 4: Interaction with Application Windows&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Following the steps in
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-ii.html"&gt;Part II
of this series&lt;/a&gt;, we now have a basic skeleton for our window manager. Our next
step is to start talking to clients and the user via events.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The interaction between clients, X, and the window manager is fairly complex.
To facilitate our discussion, I&amp;#8217;ve created a diagram that illustrates the flow of
events throughout the lifetime of a client window, and how a window manager
might respond to each of them. We&amp;#8217;ll be referring to this cheat sheet for window manager
event handling throughout this series. You can click through for the full-sized diagram.
&lt;div align="center"&gt;&lt;a
href="https://docs.google.com/drawings/d/1Bk6s5od7gdeweYtzFRrUvvcm8aHaiAr1Dpaq66WyFhg/pub?w=1843&amp;h=1673"
title="Click for the full-sized diagram"&gt;&lt;img
src="https://docs.google.com/drawings/d/1Bk6s5od7gdeweYtzFRrUvvcm8aHaiAr1Dpaq66WyFhg/pub?w=1229&amp;h=1116"
style="max-width: 1229px; width: 100%"&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In general, a window manager must handle two kinds of actions: those initiated by client applications (such as creating new windows), and those initiated by users (such as moving or minimizing windows).
In this diagram, actions initiated by client applications are shown in the yellow box on the left hand side, and actions initiated by users are shown in blue on the right hand side.
A window manager communicates with client applications via events, which are represented as parallelograms in red.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You may have noticed that some of the events in this diagram have the suffix &lt;em&gt;Request&lt;/em&gt;, while others have the suffix &lt;em&gt;Notify&lt;/em&gt;. This distinction is crucial to our discussion.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Recalling
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-i.html#substructure-redirection"&gt;our discussion in Part I&lt;/a&gt;
on substructure redirection,
when a client application wants to do something with a window (such as moving, resizing, showing, or hiding), its request is redirected to the window manager, which can grant, modify, or deny the request.
Such requests are delivered to a window manager as events with the &lt;em&gt;Request&lt;/em&gt; suffix.
It is important to understand that when a window manager receives such an event, the action it represents &lt;em&gt;has not actually occurred&lt;/em&gt;, and it is the responsibility of the window manager to decide what to do with it.
If the window manager does nothing, the request is implicitly denied.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;On the other hand, events with the &lt;em&gt;Notify&lt;/em&gt; suffix represent actions that have already been executed by the X server.
The window manager can respond to such events, but of course cannot change the fact that they have already happened.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;With that in mind, let&amp;#8217;s dive into the implementation by looking at how our example window manager will handle the life cycle of a client window from creation to destruction.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_creating_a_window"&gt;Creating a Window&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When an X client application creates a top-level window (&lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XCreateWindow.3.html"&gt;&lt;code&gt;XCreateWindow()&lt;/code&gt;&lt;/a&gt;), our window manager will receive a &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XCreateWindowEvent.3.html"&gt;&lt;code&gt;CreateNotify&lt;/code&gt;&lt;/a&gt; event. However, a newly created window is always invisible, so there&amp;#8217;s nothing for our window manager to do.
In
&lt;a href="https://github.com/jichu4n/basic_wm/blob/master/window_manager.cpp"&gt;&lt;code&gt;window_manager.cpp&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="c1"&gt;// 2. Main event loop.&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 1. Get next event.&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="c1"&gt;// 2. Dispatch event.&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;CreateNotify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;OnCreateNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xcreatewindow&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OnCreateNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;XCreateWindowEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="configuring-a-newly-created-window"&gt;Configuring a Newly Created Window&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;At this stage, the application can configure the window to set its initial size, position, or other attributes.
To do so, the application would invoke &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XConfigureWindow.3.html"&gt;&lt;code&gt;XConfigureWindow()&lt;/code&gt;&lt;/a&gt;,
which would send a &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XConfigureRequestEvent.3.html"&gt;&lt;code&gt;ConfigureRequest&lt;/code&gt;&lt;/a&gt; event to the window manager.
However, since the window is still invisible, the window manager doesn&amp;#8217;t need to care and can grant such requests without modification by invoking &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XConfigureWindow.3.html"&gt;&lt;code&gt;XConfigureWindow()&lt;/code&gt;&lt;/a&gt; itself with the same parameters.&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;ConfigureRequest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;OnConfigureRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xconfigurerequest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OnConfigureRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;XConfigureRequestEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;XWindowChanges&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Copy fields from e to changes.&lt;/span&gt;
  &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;border_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;border_width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sibling&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;above&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stack_mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Grant request by calling XConfigureWindow().&lt;/span&gt;
  &lt;span class="n"&gt;XConfigureWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Resize &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; to &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="mapping-a-window"&gt;Mapping a Window&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To make the window finally visible on screen, the client application will call &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XMapWindow.3.html"&gt;&lt;code&gt;XMapWindow()&lt;/code&gt;&lt;/a&gt; to &lt;em&gt;map&lt;/em&gt; it.
This sends a &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XMapRequestEvent.3.html"&gt;&lt;code&gt;MapRequest&lt;/code&gt;&lt;/a&gt; event to the window manager.
As noted earlier, at this point, the window is still not yet visible, as it&amp;#8217;s up to the window manager to actually make it so. This is probably the most important event in our discussion, as this is where a window manager would usually start really managing a window.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A reparenting window manager would typically respond to a &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XMapRequestEvent.3.html"&gt;&lt;code&gt;MapRequest&lt;/code&gt;&lt;/a&gt; for a client application window &lt;em&gt;w&lt;/em&gt; with the following actions:&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
Create a frame window &lt;em&gt;f&lt;/em&gt;, perhaps with borders and window decoration (e.g. title, minimize / maximize / close buttons).
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Register for substructure redirect on &lt;em&gt;f&lt;/em&gt; with &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XSelectInput.3.html"&gt;&lt;code&gt;XSelectInput()&lt;/code&gt;&lt;/a&gt;.
Recall that substructure redirect only applies to direct child windows, so after reparenting, the substructure redirect previously registered on the root window would no longer apply to &lt;em&gt;w&lt;/em&gt;, hence this step.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Make &lt;em&gt;w&lt;/em&gt; a child of &lt;em&gt;f&lt;/em&gt; with &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XReparentWindow.3.html"&gt;&lt;code&gt;XReparentWindow()&lt;/code&gt;&lt;/a&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Render &lt;em&gt;f&lt;/em&gt; and &lt;em&gt;w&lt;/em&gt; with &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XMapWindow.3.html"&gt;&lt;code&gt;XMapWindow()&lt;/code&gt;&lt;/a&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Register for mouse or keyboard shortcuts on &lt;em&gt;w&lt;/em&gt; and/or &lt;em&gt;f&lt;/em&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The example implementation in &lt;a href="https://github.com/jichu4n/basic_wm"&gt;basic_wm&lt;/a&gt; will create a very simple frame window that has the same size as the client window, but with a 3px red border:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;MapRequest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;OnMapRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xmaprequest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OnMapRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;XMapRequestEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// 1. Frame or re-frame window.&lt;/span&gt;
  &lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// 2. Actually map window.&lt;/span&gt;
  &lt;span class="n"&gt;XMapWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Visual properties of the frame to create.&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;BORDER_WIDTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;BORDER_COLOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xff0000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;BG_COLOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x0000ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// 1. Retrieve attributes of window to frame.&lt;/span&gt;
  &lt;span class="n"&gt;XWindowAttributes&lt;/span&gt; &lt;span class="n"&gt;x_window_attrs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XGetWindowAttributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x_window_attrs&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="c1"&gt;// 2. TODO - see Framing Existing Top-Level Windows section below.&lt;/span&gt;

  &lt;span class="c1"&gt;// 3. Create frame.&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XCreateSimpleWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;root_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;x_window_attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;x_window_attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;x_window_attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;x_window_attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;BORDER_WIDTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;BORDER_COLOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;BG_COLOR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// 3. Select events on frame.&lt;/span&gt;
  &lt;span class="n"&gt;XSelectInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;SubstructureRedirectMask&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;SubstructureNotifyMask&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// 4. Add client to save set, so that it will be restored and kept alive if we&lt;/span&gt;
  &lt;span class="c1"&gt;// crash.&lt;/span&gt;
  &lt;span class="n"&gt;XAddToSaveSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// 5. Reparent client window.&lt;/span&gt;
  &lt;span class="n"&gt;XReparentWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Offset of client window within frame.&lt;/span&gt;
  &lt;span class="c1"&gt;// 6. Map frame.&lt;/span&gt;
  &lt;span class="n"&gt;XMapWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// 7. Save frame handle.&lt;/span&gt;
  &lt;span class="n"&gt;clients_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// 8. Grab events for window management actions on client window.&lt;/span&gt;
  &lt;span class="c1"&gt;//   a. Move windows with alt + left button.&lt;/span&gt;
  &lt;span class="n"&gt;XGrabButton&lt;/span&gt;&lt;span class="p"&gt;(...);&lt;/span&gt;
  &lt;span class="c1"&gt;//   b. Resize windows with alt + right button.&lt;/span&gt;
  &lt;span class="n"&gt;XGrabButton&lt;/span&gt;&lt;span class="p"&gt;(...);&lt;/span&gt;
  &lt;span class="c1"&gt;//   c. Kill windows with alt + f4.&lt;/span&gt;
  &lt;span class="n"&gt;XGrabKey&lt;/span&gt;&lt;span class="p"&gt;(...);&lt;/span&gt;
  &lt;span class="c1"&gt;//   d. Switch windows with alt + tab.&lt;/span&gt;
  &lt;span class="n"&gt;XGrabKey&lt;/span&gt;&lt;span class="p"&gt;(...);&lt;/span&gt;

  &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Framed window &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; [&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The outline of the code should be fairly clear following our discussion.
A few additional points to note:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Regarding the &lt;em&gt;save-set&lt;/em&gt; and &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XAddToSaveSet.3.html"&gt;&lt;code&gt;XAddToSaveSet()&lt;/code&gt;&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="quoteblock"&gt;
&lt;div class="content"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The save-set is a list of windows, usually maintained by the window manager, but including only windows created by other clients. If the window manager dies, all windows listed in the save-set will be reparented back to their closest living ancestor if they were reparented in the first place and mapped if the window manager has unmapped them so that it could map an icon.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The save-set is necessary because the window manager might not exit normally. The user might kill it with CTRL-C if it is running in the foreground, or more likely, the user might get the process number and kill it. Actually, the actions of the save-set are performed even if the window manager exits normally, so less code is needed since the save-set does the cleaning up.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Window managers almost always place in the save-set all the windows they reparent or iconify, using &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XAddToSaveSet.3.html"&gt;&lt;code&gt;XAddToSaveSet()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Windows are automatically removed from the save-set when they are destroyed.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="attribution"&gt;
&amp;#8212; Xlib Programming Manual §16.4
&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
When our window manager creates a frame window (step 2 in the example code), it will also trigger a &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XCreateWindowEvent.3.html"&gt;&lt;code&gt;CreateNotify&lt;/code&gt;&lt;/a&gt; event for the frame window.
It will ignore it just like it ignores other &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XCreateWindowEvent.3.html"&gt;&lt;code&gt;CreateNotify&lt;/code&gt;&lt;/a&gt; events as discussed earlier.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
When our window manager calls &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XReparentWindow.3.html"&gt;&lt;code&gt;XReparentWindow()&lt;/code&gt;&lt;/a&gt; in step 5 in the example code,
it will trigger a &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XReparentEvent.3.html"&gt;&lt;code&gt;ReparentNotify&lt;/code&gt;&lt;/a&gt; event, which it will ignore:
&lt;/p&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;ReparentNotify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;OnReparentNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xreparent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OnReparentNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;XReparentEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
When our window manager calls &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XMapWindow.3.html"&gt;&lt;code&gt;XMapWindow()&lt;/code&gt;&lt;/a&gt; to map the frame window (step 6 in the example code),
the X server knows that the action originates from the current window manager, and will execute it directly instead of redirecting it back as a &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XMapRequestEvent.3.html"&gt;&lt;code&gt;MapRequest&lt;/code&gt;&lt;/a&gt; event.
Our window manager will later receive a &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XMapEvent.3.html"&gt;&lt;code&gt;MapNotify&lt;/code&gt;&lt;/a&gt; event, which it can ignore:
&lt;/p&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;MapNotify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;OnMapNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xmap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OnMapNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;XMapEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_configuring_a_mapped_window"&gt;Configuring a Mapped Window&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A client application can configure a window that is currently visible, again with the &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XConfigureWindow.3.html"&gt;&lt;code&gt;XConfigureWindow()&lt;/code&gt;&lt;/a&gt; function.
For example, an application may want to resize a window to better accomodate its contents.
When a reparenting window manager receives the resulting &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XConfigureRequestEvent.3.html"&gt;&lt;code&gt;ConfigureRequest&lt;/code&gt;&lt;/a&gt; and decides to grant the request, it additionally needs to resize / reposition the corresponding frame window and any window decorations.&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OnConfigureRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;XConfigureRequestEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;XWindowChanges&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Copy fields from e to changes.&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clients_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clients_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;XConfigureWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Resize [&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;] to &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Grant request by calling XConfigureWindow().&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When our window manager re-configures the frame window with the &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XConfigureWindow.3.html"&gt;&lt;code&gt;XConfigureWindow()&lt;/code&gt;&lt;/a&gt; call above,
the X server knows that the action originates from the current window manager, and will execute it directly instead of redirecting it back as a &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XConfigureRequestEvent.3.html"&gt;&lt;code&gt;ConfigureRequest&lt;/code&gt;&lt;/a&gt; event.
Our window manager will then receive a &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XConfigureEvent.3.html"&gt;&lt;code&gt;ConfigureNotify&lt;/code&gt;&lt;/a&gt; event, which it will ignore:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;ConfigureNotify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;OnConfigureNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xconfigure&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OnConfigureNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;XConfigureEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_unmapping_a_window"&gt;Unmapping a Window&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When a client application &lt;em&gt;unmaps&lt;/em&gt; (i.e. hides) a window with &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XUnmapWindow.3.html"&gt;&lt;code&gt;XUnmapWindow()&lt;/code&gt;&lt;/a&gt;, for example in response to the user exiting or minimizing the application, the window manager will receive a &lt;code&gt;UnmapNotify&lt;/code&gt; event.
Unlike the &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XMapRequestEvent.3.html"&gt;&lt;code&gt;MapRequest&lt;/code&gt;&lt;/a&gt; event, the &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XUnmapEvent.3.html"&gt;&lt;code&gt;UnmapNotify&lt;/code&gt;&lt;/a&gt; event is delivered to the window manager after the fact, and the window manager can only respond to it, not intercept it.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A reparenting window manager will typically want to reverse the actions it performed in response to &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XMapRequestEvent.3.html"&gt;&lt;code&gt;MapRequest&lt;/code&gt;&lt;/a&gt;.
In other words, it would reparent the client window back to the root window, and destroy the corresponding frame window.&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;UnmapNotify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;OnUnmapNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xunmap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OnUnmapNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;XUnmapEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// If the window is a client window we manage, unframe it upon UnmapNotify. We&lt;/span&gt;
  &lt;span class="c1"&gt;// need the check because we will receive an UnmapNotify event for a frame&lt;/span&gt;
  &lt;span class="c1"&gt;// window we just destroyed ourselves.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;clients_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Ignore UnmapNotify for non-client window &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Unframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Unframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// We reverse the steps taken in Frame().&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clients_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="c1"&gt;// 1. Unmap frame.&lt;/span&gt;
  &lt;span class="n"&gt;XUnmapWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// 2. Reparent client window back to root window.&lt;/span&gt;
  &lt;span class="n"&gt;XReparentWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;root_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Offset of client window within root.&lt;/span&gt;
  &lt;span class="c1"&gt;// 3. Remove client window from save set, as it is now unrelated to us.&lt;/span&gt;
  &lt;span class="n"&gt;XRemoveFromSaveSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// 4. Destroy frame.&lt;/span&gt;
  &lt;span class="n"&gt;XDestroyWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// 5. Drop reference to frame handle.&lt;/span&gt;
  &lt;span class="n"&gt;clients_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Unframed window &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; [&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A few additional points to note:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
When our window manager unmaps the frame window with &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XUnmapWindow.3.html"&gt;&lt;code&gt;XUnmapWindow()&lt;/code&gt;&lt;/a&gt; in step 1 in the example code above, it will again receive a corresponding &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XUnmapEvent.3.html"&gt;&lt;code&gt;UnmapNotify&lt;/code&gt;&lt;/a&gt; event.
This is the reason why the &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XUnmapEvent.3.html"&gt;&lt;code&gt;UnmapNotify&lt;/code&gt;&lt;/a&gt; event handler needs to check that the unmapped window is an actual client window.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
When our window manager makes the client window a direct child of the root window with &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XReparentWindow.3.html"&gt;&lt;code&gt;XReparentWindow()&lt;/code&gt;&lt;/a&gt; in step 2 above, it will receive a &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XReparentEvent.3.html"&gt;&lt;code&gt;ReparentNotify&lt;/code&gt;&lt;/a&gt; event.
As discussed in the &lt;a href="#mapping-a-window"&gt;Mapping a Window&lt;/a&gt; section above, this &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XReparentEvent.3.html"&gt;&lt;code&gt;ReparentNotify&lt;/code&gt;&lt;/a&gt; event will be ignored.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
When our window manager destroys the frame window with &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XDestroyWindow.3.html"&gt;&lt;code&gt;XDestroyWindow()&lt;/code&gt;&lt;/a&gt; in step 4, it will trigger a &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XDestroyWindowEvent.3.html"&gt;&lt;code&gt;DestroyNotify&lt;/code&gt;&lt;/a&gt; event.
This event will also be ignored, as shown in the next section.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;At this point, the client window has become invisible, but not yet destroyed.
It can be displayed again with a call to &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XMapWindow.3.html"&gt;&lt;code&gt;XMapWindow()&lt;/code&gt;&lt;/a&gt;, which would take us back to the &lt;a href="#mapping-a-window"&gt;Mapping a Window&lt;/a&gt; step.
It could also be reconfigured in this state, which would take us back to the &lt;a href="#configuring-a-newly-created-window"&gt;Configuring a Newly Created Window&lt;/a&gt; step.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_destroying_a_window"&gt;Destroying a Window&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When a client application exits or no longer needs a window, it will call &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XDestroyWindow.3.html"&gt;&lt;code&gt;XDestroyWindow()&lt;/code&gt;&lt;/a&gt; to dispose of the window.
This triggers a &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XDestroyWindowEvent.3.html"&gt;&lt;code&gt;DestroyNotify&lt;/code&gt;&lt;/a&gt; event.
In our case, there&amp;#8217;s nothing we need to do in response.&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;DestroyNotify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;OnDestroyNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xdestroywindow&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OnDestroyNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;XDestroyWindowEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_framing_existing_top_level_windows"&gt;Framing Existing Top-Level Windows&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now that we&amp;#8217;ve walked through the life cycle of a client window, from creation to destruction, let&amp;#8217;s turn our attention to the problem of existing top-level windows.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You may recall from &lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-i.html"&gt;Part I&lt;/a&gt; that X applications in general run just fine without a window manager.
Depending on how an X session is started (e.g. &lt;code&gt;xinitrc&lt;/code&gt;), by the time a window manager starts, any number of windows may have already been created by other applications.
Additionally, the user can kill a running window manager and replace it with a different window manager, without affecting windows from other applications.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Therefore, when our window manager starts up, it needs to handle any existing top-level windows that are already mapped.
As a reparenting window manager, it will invoke the same &lt;code&gt;Frame()&lt;/code&gt; function on such windows as if these windows are being mapped for the first time:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// 1. Initialization.&lt;/span&gt;
  &lt;span class="c1"&gt;//   a. Select events on root window. Use a special error handler so we can&lt;/span&gt;
  &lt;span class="c1"&gt;//   exit gracefully if another window manager is already running.&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="c1"&gt;//   b. Set error handler.&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="c1"&gt;//   c. Grab X server to prevent windows from changing under us while we&lt;/span&gt;
  &lt;span class="c1"&gt;//   frame them.&lt;/span&gt;
  &lt;span class="n"&gt;XGrabServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//   d. Frame existing top-level windows.&lt;/span&gt;
  &lt;span class="c1"&gt;//     i. Query existing top-level windows.&lt;/span&gt;
  &lt;span class="n"&gt;Window&lt;/span&gt; &lt;span class="n"&gt;returned_root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;returned_parent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;top_level_windows&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num_top_level_windows&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XQueryTree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;root_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;returned_root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;returned_parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;top_level_windows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num_top_level_windows&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;CHECK_EQ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;returned_root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//     ii. Frame each top-level window.&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;num_top_level_windows&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_level_windows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="cm"&gt;/* was_created_before_window_manager */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;//     iii. Free top-level window array.&lt;/span&gt;
  &lt;span class="n"&gt;XFree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_level_windows&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//   e. Ungrab X server.&lt;/span&gt;
  &lt;span class="n"&gt;XUngrabServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// 2. Main event loop.&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OnMapRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;XMapRequestEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// 1. Frame or re-frame window.&lt;/span&gt;
  &lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="cm"&gt;/* was_created_before_window_manager */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;was_created_before_window_manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="c1"&gt;// 1. Retrieve attributes of window to frame.&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="c1"&gt;// 2. If window was created before window manager started, we should frame&lt;/span&gt;
  &lt;span class="c1"&gt;// it only if it is visible and doesn&amp;#39;t set override_redirect.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;was_created_before_window_manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_window_attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;override_redirect&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="n"&gt;x_window_attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map_state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;IsViewable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// 3. Create frame.&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OnUnmapNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;XUnmapEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="c1"&gt;// Ignore event if it is triggered by reparenting a window that was mapped&lt;/span&gt;
  &lt;span class="c1"&gt;// before the window manager started.&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
  &lt;span class="c1"&gt;// Since we receive UnmapNotify events from the SubstructureNotify mask, the&lt;/span&gt;
  &lt;span class="c1"&gt;// event attribute specifies the parent window of the window that was&lt;/span&gt;
  &lt;span class="c1"&gt;// unmapped. This means that an UnmapNotify event from a normal client window&lt;/span&gt;
  &lt;span class="c1"&gt;// should have this attribute set to a frame window we maintain. Only an&lt;/span&gt;
  &lt;span class="c1"&gt;// UnmapNotify event triggered by reparenting a pre-existing window will have&lt;/span&gt;
  &lt;span class="c1"&gt;// this attribute set to the root window.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;root_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Ignore UnmapNotify for reparented pre-existing window &amp;quot;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Unframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Some additional things to note:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
You may notice that the process of framing existing top-level windows is guarded by
&lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XGrabServer.3.html"&gt;&lt;code&gt;XGrabServer()&lt;/code&gt;&lt;/a&gt; and &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XUngrabServer.3.html"&gt;&lt;code&gt;XUngrabServer()&lt;/code&gt;&lt;/a&gt;.
From the &lt;em&gt;Xlib Programming Manual&lt;/em&gt;:
&lt;/p&gt;
&lt;div class="quoteblock"&gt;
&lt;div class="content"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;These functions can be used to control processing of output on other connections by the window system server. While the server is grabbed, no processing of requests or close downs on any other connection will occur.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="attribution"&gt;
&amp;#8212; Xlib Programming Manual §9.5
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;By &lt;em&gt;grabbing&lt;/em&gt; the X server, our window manager ensures that, between the time when it fetches the list of existing top-level windows and when it finishes framing them, no other application can interfere and mess up our state:
no new windows can be created, and no existing windows can be modified or destroyed.&lt;/p&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XGetWindowAttributes.3.html"&gt;&lt;code&gt;override_redirect&lt;/code&gt;&lt;/a&gt; attribute, if set to true, indicates that a window should not be managed by window managers.
From the &lt;em&gt;Xlib Programming Manual&lt;/em&gt;:
&lt;/p&gt;
&lt;div class="quoteblock"&gt;
&lt;div class="content"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To control window placement or to add decoration, a window manager often needs to intercept (redirect) any map or configure request.
Pop-up windows, however, often need to be mapped without a window manager getting in the way. [&amp;#8230;]&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The override-redirect flag specifies whether map and configure requests on this window should override a &lt;code&gt;SubstructureRedirectMask&lt;/code&gt; on the parent.
You can set the override-redirect flag to True or False (default).
Window managers use this information to avoid tampering with pop-up windows [&amp;#8230;].&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="attribution"&gt;
&amp;#8212; Xlib Programming Manual §3.2.8
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The reason our window manager doesn&amp;#8217;t need to check for this attribute except at start up is that the X server knows not to redirect events from such windows:&lt;/p&gt;&lt;/div&gt;
&lt;div class="quoteblock"&gt;
&lt;div class="content"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The window manager [&amp;#8230;] will normally ignore windows that are mapped with their &lt;code&gt;override_redirect&lt;/code&gt; attribute set, since no *Request events will be generated for them.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="attribution"&gt;
&amp;#8212; Xlib Programming Manual §16.3
&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XGetWindowAttributes.3.html"&gt;&lt;code&gt;map_state&lt;/code&gt;&lt;/a&gt; attribute indicates whether a window is currently visible (mapped).
When &lt;code&gt;Frame()&lt;/code&gt; is invoked for pre-existing windows during start up, we want to ignore windows that are currently unmapped.
However, when &lt;code&gt;Frame()&lt;/code&gt; is invoked during the event loop as part of the &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XMapRequestEvent.3.html"&gt;&lt;code&gt;MapRequest&lt;/code&gt;&lt;/a&gt; handler, we know that the client window to be framed is necessarily still unmapped,
as our window manager wouldn&amp;#8217;t have granted the request yet.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
You might be wondering why an additional check for &lt;code&gt;e.event == root_&lt;/code&gt; is needed in the &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XUnmapEvent.3.html"&gt;&lt;code&gt;UnmapNotify&lt;/code&gt;&lt;/a&gt; handler.
It turns out that reparenting an already mapped window (&lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man3/XReparentWindow.3.html"&gt;&lt;code&gt;XReparentWindow()&lt;/code&gt;&lt;/a&gt;)
will trigger a pair of &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XUnmapEvent.3.html"&gt;&lt;code&gt;UnmapNotify&lt;/code&gt;&lt;/a&gt; and &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XMapEvent.3.html"&gt;&lt;code&gt;MapNotify&lt;/code&gt;&lt;/a&gt; events in addition to &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XReparentEvent.3.html"&gt;&lt;code&gt;ReparentNotify&lt;/code&gt;&lt;/a&gt;.
Therefore, when we enter into the event loop, we will receive an &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XUnmapEvent.3.html"&gt;&lt;code&gt;UnmapNotify&lt;/code&gt;&lt;/a&gt; event for every pre-existing top-level window we reparented.
We can distinguish these events by their &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XUnmapEvent.3.html"&gt;&lt;code&gt;event&lt;/code&gt;&lt;/a&gt; attribute, which in this case represents the parent of the client window.
Normally, when a client window we already framed is unmapped, the &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XUnmapEvent.3.html"&gt;&lt;code&gt;event&lt;/code&gt;&lt;/a&gt; attribute would be its frame window.
But when a pre-existing window is reparented at start up, the &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XUnmapEvent.3.html"&gt;&lt;code&gt;event&lt;/code&gt;&lt;/a&gt; attribute in the resulting &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man3/XUnmapEvent.3.html"&gt;&lt;code&gt;UnmapNotify&lt;/code&gt;&lt;/a&gt; event will be its original parent - i.e., the root window.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_what_8217_s_next"&gt;What&amp;#8217;s Next&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;At this point, we have a basic but functional reparenting window manager that will correctly handle the life cycle of windows.
If you strip out window decorations, shortcuts and fancy UI, the core structure of every X window manager will quite closely resemble what we have here.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In our next installment, we will improve the user-facing functionality of our window manager by adding ways to move, resize and close windows.
In the meantime, you’re more than welcome to check out the code for &lt;a href="https://github.com/jichu4n/basic_wm"&gt;basic_wm&lt;/a&gt; on GitHub.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sidebarblock"&gt;
&lt;div class="content"&gt;
&lt;div class="title"&gt;Series Contents&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-i.html"&gt;Part I: Basic Concepts&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-ii.html"&gt;Part II: Introduction, Setup &amp;amp; Teardown, Initialization, Event Loop&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-iii.html"&gt;&lt;strong&gt;Part III: Interaction with Application Windows&lt;/strong&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Featured"></category><category term="Window Manager"></category></entry><entry><title>Flashing a Sprint Nexus S 4G to Verizon</title><link href="https://seasonofcode.com/posts/flashing-a-sprint-nexus-s-4g-to-verizon.html" rel="alternate"></link><updated>2015-11-11T18:51:00-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2015-11-11:posts/flashing-a-sprint-nexus-s-4g-to-verizon.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I originally wrote the following post in July 2012 to document how to fully
flash a Nexus S 4G from Sprint to Verizon Wireless, but never got to publishing
it. I have long since switched away from Verizon Wireless and no longer own any
of the phones mentioned, and decided to publish it for what it&amp;#8217;s worth.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you&amp;#8217;re interested in the high-level view of how CDMA phones are programmed,
check out my previous article
&lt;a href="/posts/carrier-programming-on-cdma-android-phones.html"&gt;Carrier Programming
on CDMA Android Phones&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_introduction"&gt;Introduction&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is a guide for flashing a Sprint Samsung Nexus S 4G to a standard Verizon
monthly plan, and voice, texting and 3G data will all be fully functional. This
method will likely also work on many other phones, especially Samsung ones, and
should theoretically work just file on any ROM as well.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Note that this procedure entails ESN cloning, which may be illegal in your
region. Please make sure you have an understanding of all applicable laws before
proceeding. The author of this guide cannot be held responsible for any legal
infractions that may ensue. Finally, you are solely responsible for any
consequences of your actions as a result of following this guide. While I
believe it to be quite safe, I cannot guarantee you that this process will not
brick your devices or start a zombie apocalypse.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_requirements_and_setup"&gt;Requirements and Setup&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We will need the following before starting:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
A currently active Verizon Wireless Android phone and plan. Please beware that
  not all phones will work; many phones do not allow us to extract all the
  information we need for this process. For instance, my Motorola Droid 3 did not
  work, and I had to purchase and activate an HTC Incredible for this. This phone
  will be our donor phone.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A rooted Samsung Nexus 4G.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A computer running a recent version of Windows, with at least 2 USB ports.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
2 MicroUSB cables.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In addition, we need the following software:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
USB diagnostic drivers for your donor phone. These vary by manufacturer and
  their configuration may be quite complex; search online for how to set up
  yours.  For HTC phones, download and install HTC Sync from HTC’s website
  (archived &lt;a href="http://www.mediafire.com/?65l9idwgbzq5avb"&gt;here&lt;/a&gt;).
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
USB diagnostic drivers for the Nexus S 4G. The easiest way is to download and
  install PdaNet (archived
  &lt;a href="http://www.mediafire.com/?jjdv8g7ie82kxdx"&gt;here&lt;/a&gt;). We don’t actually need
  the functionality of PdaNet, but it happens to bundle the drivers we need.
  Select Samsung when prompted for the manufacturer of our phone.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
QPST and QXDM (archived &lt;a href="http://www.mediafire.com/?ojco4qzf4r688k6"&gt;here&lt;/a&gt;).
  These are internal Qualcomm tools; we will use them to clone the MEID of the
  donor phone.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
DFS (archived &lt;a href="http://www.mediafire.com/?wp7hc8ny854pqrz"&gt;here&lt;/a&gt;). This is
  a third-party tool for working with CDMA phones. The demo version will
  suffice.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_1_preparation"&gt;Step 1: Preparation&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, make sure the donor phone is fully activated and that calls, text and
data are all fully functional.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now, find the HEX MEID of the donor phone. On the HTC Incredible, this can be
found under &lt;em&gt;Settings &amp;#8594; About Phone &amp;#8594; Phone Identity&lt;/em&gt;. On most Android phones,
this is under &lt;em&gt;Settings &amp;#8594; About Phone &amp;#8594; Status&lt;/em&gt;. It is also usually printed on a
label underneath the phone battery. This should be 14 digits and usually begins
with &lt;code&gt;A00000&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now put the donor phone in airplane mode.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We will next connect both phones to the computer in diagnostic mode.&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
On the Nexus S 4G, dial &lt;code&gt;*#*#8778#*#*&lt;/code&gt;, then select &lt;em&gt;MODEM&lt;/em&gt; under &lt;em&gt;USB&lt;/em&gt;.
  Connect the Nexus S 4G to the computer. If drivers were installed correctly,
  you should now see a &lt;em&gt;SAMSUNG Mobile Modem Diagnostic Serial Port (WDM)&lt;/em&gt; under
  &lt;em&gt;Ports (COM &amp;amp; LPT)&lt;/em&gt; in Windows’s Device Manager. Note down the port number of
  the Nexus S 4G; we will assume COM4 for convenience.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
On the HTC Incredible, dial &lt;code&gt;##3424#&lt;/code&gt;, hit &lt;em&gt;Call&lt;/em&gt;,
  connect it to the computer, then follow the instructions in
  &lt;a href="http://forum.xda-developers.com/showthread.php?t=1619314"&gt;this thread&lt;/a&gt;
  with Device Manager. If everything goes well you should now see a &lt;em&gt;HTC
  Diagnostic Interface&lt;/em&gt; under &lt;em&gt;Ports (COM &amp;amp; LPT)&lt;/em&gt; in Device Manager. Note down
  the port number of the HTC Incredible; we will assume COM11 for convenience.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;After confirming that both phones show up under &lt;em&gt;Ports (COM &amp;amp; LPT)&lt;/em&gt;, run QPST
Configuration and hit &lt;em&gt;Add New Port&amp;#8230;&lt;/em&gt;. You should see both phones on the left.
Select one and hit OK. Then repeat for the other phone.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_2_cloning"&gt;Step 2: Cloning&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We will now clone the MEID of the donor phone onto the target phone. Open QXDM
Professional. Select &lt;em&gt;Options &amp;#8594; Communications&amp;#8230;&lt;/em&gt;. For &lt;em&gt;Target Port&lt;/em&gt;, select the
port corresponding to the Nexus S 4G, say COM4, and hit &lt;em&gt;OK&lt;/em&gt;. Then in the text box
labeled &lt;em&gt;Command&lt;/em&gt;, type the following:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;Password 01F2030F5F678FF9&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Hit &lt;em&gt;Enter&lt;/em&gt;. You should see &lt;code&gt;Password Result = Correct&lt;/code&gt; at the bottom of the
&lt;em&gt;Command Output&lt;/em&gt; window.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now in the &lt;em&gt;Command&lt;/em&gt; text box, type the following, replacing &lt;code&gt;&amp;lt;MEID&amp;gt;&lt;/code&gt; by the hex
MEID of the &lt;strong&gt;donor&lt;/strong&gt; phone:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;RequestNVItemWrite meid 0x&amp;lt;MEID&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Hit &lt;em&gt;Enter&lt;/em&gt;. You should see it repeat back the MEID to you. Type
&lt;code&gt;RequestNVItemRead meid&lt;/code&gt; followed by &lt;em&gt;Enter&lt;/em&gt; to make sure the write happened.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Close QXDM Professional and reboot the Nexus S 4G. Rebooting the target phone
after writing a new MEID is essential! If prompted, do NOT go through the
activation process on the Nexus S 4G. Just select &lt;em&gt;Skip&lt;/em&gt; when possible.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_3_reset_spc"&gt;Step 3: Reset SPC&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In order to program the Nexus S 4G, we need to obtain or reset the SPC code
(also known as the MSL) of the phones. If you already know the SPC code for your
phones and would rather not reset the SPC code, you can skip this step.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Open QXDM Professional again. Go through &lt;em&gt;Options &amp;#8594;
Communications&lt;/em&gt; and make sure the &lt;em&gt;Target Port&lt;/em&gt; is still COM4. Hit &lt;em&gt;OK&lt;/em&gt;. In the
command text box, type the following two lines, each followed by an &lt;em&gt;Enter&lt;/em&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;Password 01F2030F5F678FF9
RequestNVItemWrite sec_code 000000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If this is successful, the SPC on the Nexus S 4G will have been reset to
&lt;code&gt;000000&lt;/code&gt;. Repeat for the donor phone (in our example, on COM11).&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Close QXDM Professional after done. All QPST / QXDM programs must be closed
before proceeding, or DFS will complain.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_4_programming_cdma_chipset"&gt;Step 4: Programming CDMA Chipset&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Launch DFS. Click &lt;em&gt;Ports&lt;/em&gt; on the top left. In the dialog box, double-click on
each port representing our phones, in our case, COM4 and COM11, and close the
dialog box. Now make sure the &lt;em&gt;SPC&lt;/em&gt; text box above reads &lt;code&gt;000000&lt;/code&gt; (or if you chose
not to reset the SPC, whatever your SPC is). Type &lt;code&gt;01F2030F5F678FF9&lt;/code&gt; into the
&lt;em&gt;Pwd&lt;/em&gt; text box.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_step_4_a_basic_cdma_settings"&gt;Step 4.a: Basic CDMA settings&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s now copy basic CDMA settings from the donor phone to the
target phone. In the drop-down menu next to &lt;em&gt;Ports&lt;/em&gt;, select the donor phone
(COM11). Switch to the &lt;em&gt;Programming&lt;/em&gt; tab and the &lt;em&gt;NAM&lt;/em&gt; tab under it. Click the
&lt;em&gt;SPC&lt;/em&gt; and &lt;em&gt;Pwd&lt;/em&gt; buttons to send the SPC and NV password to the phone to unlock
it. Then hit &lt;em&gt;Read&lt;/em&gt; beneath &lt;em&gt;Network identification&lt;/em&gt;. The text fields below
should be populated by information from the donor phone. Now select COM4 in the
drop-down menu next to &lt;em&gt;Ports&lt;/em&gt;, click &lt;em&gt;SPC&lt;/em&gt; and &lt;em&gt;Pwd&lt;/em&gt;, then click &lt;em&gt;Write&lt;/em&gt;
beneath &lt;em&gt;Network identification&lt;/em&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_step_4_b_prl"&gt;Step 4.b: PRL&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now, let&amp;#8217;s copy over the PRL (or &lt;em&gt;Preferred Roaming List&lt;/em&gt; - essentially a
database of tower locations). Again, select COM11 under &lt;em&gt;Ports&lt;/em&gt; and click &lt;em&gt;Read&lt;/em&gt;
under &lt;em&gt;PRL&lt;/em&gt; towards the right. Then select COM4 under &lt;em&gt;Ports&lt;/em&gt; and click &lt;em&gt;Write&lt;/em&gt;
under &lt;em&gt;PRL&lt;/em&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_step_4_c_2g_data_settings"&gt;Step 4.c: 2G Data settings&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now go to the next tab, &lt;em&gt;Data&lt;/em&gt;. Select COM11 and hit &lt;em&gt;Read&lt;/em&gt;. Switch to COM4 and
hit &lt;em&gt;Write&lt;/em&gt;.  If you observe errors in the log window in the bottom, and / or no
information shows up in the &lt;em&gt;Pwd&lt;/em&gt; boxes under &lt;em&gt;PPP&lt;/em&gt; and &lt;em&gt;HDR AN Long&lt;/em&gt;, your
donor phone doesn&amp;#8217;t support the extraction of some data passwords, and you
will have to try a different donor phone.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_step_4_c_3g_data_settings"&gt;Step 4.c: 3G Data settings&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We do the same with &lt;em&gt;Mobile IP&lt;/em&gt;. Select COM11 and hit &lt;em&gt;Read&lt;/em&gt;. Switch to COM4 and
hit &lt;em&gt;Write&lt;/em&gt;. Then hit &lt;em&gt;Write current profile settings&lt;/em&gt;. Again, if you encounter
errors, or no information shows up under &lt;em&gt;AAA Shared secret&lt;/em&gt; and &lt;em&gt;HA Shared
Secret&lt;/em&gt;, you will have to try a different donor phone.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally, we need to copy over a file containing a secret key used to establish a
3G connection. Go to the &lt;em&gt;EFS&lt;/em&gt; tab towards the top.  Select COM11 and hit &lt;em&gt;Read
EFS&lt;/em&gt;.  Click the "&lt;em&gt;+&lt;/em&gt;" sign of the root folder on the left and then the "&lt;em&gt;+&lt;/em&gt;"
sign next to the &lt;code&gt;DMU&lt;/code&gt; folder and you should see a file called &lt;code&gt;10.key&lt;/code&gt;.
Right-click on this file and hit &lt;em&gt;Save&amp;#8230;&lt;/em&gt;.  Save this file somewhere on your
hard drive. Now switch to COM4 and hit &lt;em&gt;Read EFS&lt;/em&gt; again.  Select the root folder
on the left, type &lt;code&gt;/DMU&lt;/code&gt; under &lt;em&gt;Path (57 max)&lt;/em&gt; on the right and hit &lt;em&gt;Add Item&lt;/em&gt;
to create a folder named &lt;code&gt;DMU&lt;/code&gt; on the Nexus S 4G. Then select &lt;code&gt;DMU&lt;/code&gt; on the left,
click on the check box named &lt;em&gt;I want to add file from PC&lt;/em&gt;, and select the
&lt;code&gt;10.key&lt;/code&gt; file we just saved. Then hit &lt;em&gt;Add Item&lt;/em&gt; to upload the &lt;code&gt;10.key&lt;/code&gt; file to
&lt;code&gt;/DMU/10.key&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The programming is now done. Close DFS, select &lt;em&gt;OK&lt;/em&gt; and &lt;em&gt;OK&lt;/em&gt; again when prompted
whether to send a &lt;em&gt;mode reset&lt;/em&gt; to the phone. The Nexus S 4G will now reboot.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_5_programming_android"&gt;Step 5: Programming Android&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We will now modify some Android system files to Verizon settings. This step will
need to be repeated whenever you flash a new ROM on the Nexus S 4G in the
future.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_1_click_programming_app"&gt;1-click programming app&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I have built a 1-click Android application that automates this step; you can
find it &lt;a href="http://www.mediafire.com/?m796blddz3g8ifd"&gt;here&lt;/a&gt;. It requires root
as it will need to modify system files. Install the application and click the
button in the middle. When the process finishes, you will be prompted to reboot.
Simply reboot your phone and you’re all set; you may uninstall the app, or you
could keep it around for when you update to a new ROM.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If the 1-click app does not work for you, or if you want more control over what
it does, follow the steps below. You do not need to do any of the following if
you already used the app above.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_step_5_a_fix_voice_calling"&gt;Step 5.a: Fix voice calling&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is required to enable calls on Verizon.
On the Nexus S 4G, connect to WiFi and install ES File Explorer from the Play
Store. Then go to &lt;em&gt;Menu &amp;#8594; Settings&lt;/em&gt; and check &lt;em&gt;Up to Root&lt;/em&gt;, &lt;em&gt;Root Explorer&lt;/em&gt;, and
&lt;em&gt;Mount File System&lt;/em&gt;. Allow it to use superuser privileges if asked. Then
navigate to &lt;code&gt;/system&lt;/code&gt; and open &lt;code&gt;build.prop&lt;/code&gt; with &lt;em&gt;ES Note Editor&lt;/em&gt;. Find the
following two lines:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;ro.cdma.home.operator.numeric=310120
ro.cdma.home.operator.alpha=Sprint&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Change them to read:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;ro.cdma.home.operator.numeric=310004
ro.cdma.home.operator.alpha=Verizon&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Then add a line below (or anywhere in the file) that says:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;ro.cdma.homesystem=64,65,76,77,78,79,80,81,82,83&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Hit &lt;em&gt;Menu &amp;#8594; Save&lt;/em&gt; and then &lt;em&gt;Back&lt;/em&gt; to exit.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_step_5_b_fix_roaming"&gt;Step 5.b: Fix roaming&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This step tells Android to treat the Verizon network as the home network. It
sets the roaming status to "Not roaming", removes the triangular roaming
indicator in the status bar and changes the displayed name of the current
network to "Verizon Wireless".&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now navigate to &lt;code&gt;/system/framework&lt;/code&gt; and copy &lt;code&gt;framework-res.apk&lt;/code&gt; onto your
computer - you can use adb or email it to yourself or whatever (you have to copy
it to the internal SD card before you can email it though). Once on the
computer, rename it &lt;code&gt;framework-res.zip&lt;/code&gt; (yes, an APK is just a zip archive) and
use your favorite program to replace the file &lt;code&gt;res/xml/eri.xml&lt;/code&gt; inside it with
the one at &lt;a href="http://www.mediafire.com/?jdsigtxi4gvp6ks"&gt;this link&lt;/a&gt;. Now rename
it back to &lt;code&gt;framework-res.apk&lt;/code&gt;, copy it back
onto the Nexus S 4G (using adb or whatever) and use ES File Explorer to
overwrite the existing &lt;code&gt;/system/framework/framework-res.apk&lt;/code&gt; with it.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_step_5_c_add_verizon_apns"&gt;Step 5.c: Add Verizon APNs&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This last step sets up Verizon APNs that enable web and MMS. Use ES File
Explorer or any other tool to replace &lt;code&gt;/system/etc/apns-conf.xml&lt;/code&gt; with the one
at &lt;a href="http://www.mediafire.com/?g0vd7nfs47ksujz"&gt;this link&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_6_reboot_amp_profit"&gt;Step 6: Reboot &amp;amp; PROFIT&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The Nexus S 4G should now be a fully functional Verizon Wireless phone. If you
are curious about what each of the steps means, you&amp;#8217;re welcome to check out my
previous article
&lt;a href="/posts/carrier-programming-on-cdma-android-phones.html"&gt;Carrier Programming
on CDMA Android Phones&lt;/a&gt; for a high-level view of how CDMA phones are programmed.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;While your mileage may vary, I hope the above information have been of help.
Since I no longer use Verizon Wireless and no longer own any of the phones
mentioned above, please take all this information with a grain of salt.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Good luck, and happy hacking!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Featured"></category><category term="Android"></category></entry><entry><title>Setting Up DKIM And SRS In Postfix</title><link href="https://seasonofcode.com/posts/setting-up-dkim-and-srs-in-postfix.html" rel="alternate"></link><updated>2014-12-09T17:25:00-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2014-12-09:posts/setting-up-dkim-and-srs-in-postfix.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;In my previous post
&lt;a href="/posts/custom-domain-e-mails-with-postfix-and-gmail-the-missing-tutorial.html"&gt;&lt;em&gt;Custom
Domain E-mails With Postfix And Gmail: The Missing Tutorial&lt;/em&gt;&lt;/a&gt;, we set up a
Postfix mail server on a custom domain that integrates seamlessly with Gmail.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;However, the tutorial skipped two important security standards that will help
prevent e-mails routed through our server from being marked as spam:
&lt;a href="http://en.wikipedia.org/wiki/DomainKeys_Identified_Mail"&gt;DKIM&lt;/a&gt; and
&lt;a href="http://en.wikipedia.org/wiki/Sender_Rewriting_Scheme"&gt;SRS&lt;/a&gt;. This article will
show you how to add support for DKIM and SRS to a Postfix server.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Similar to the
&lt;a href="/posts/custom-domain-e-mails-with-postfix-and-gmail-the-missing-tutorial.html"&gt;previous
tutorial&lt;/a&gt;, we will assume a Ubuntu server in our examples.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_1_dkim"&gt;Step 1: DKIM&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/DomainKeys_Identified_Mail"&gt;DKIM&lt;/a&gt;, short for
&lt;em&gt;DomainKeys Identified Mail&lt;/em&gt;, is a mechanism for&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
A sender e-mail program to sign an outgoing e-mail message, and
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A recipient e-mail program to verify said signature.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;More concretely, let&amp;#8217;s say Gmail receives an e-mail message from
&lt;code&gt;myserver.example.com&lt;/code&gt;. DKIM allows Gmail to verify that the e-mail was indeed
sent by the designated e-mail server program on &lt;code&gt;myserver.example.com&lt;/code&gt;, and not
by, say, a virus running on &lt;code&gt;myserver.example.com&lt;/code&gt; or a malicious user who
happens to have access to &lt;code&gt;myserver.example.com&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We will use &lt;a href="http://www.opendkim.org/"&gt;OpenDKIM&lt;/a&gt; for this tutorial. To install
OpenDKIM on Ubuntu:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install opendkim opendkim-tools
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_code_etc_opendkim_conf_code"&gt;&lt;code&gt;/etc/opendkim.conf&lt;/code&gt;&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Edit &lt;code&gt;/etc/opendkim.conf&lt;/code&gt; to match the following:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# OpenDKIM config.&lt;/span&gt;

&lt;span class="c"&gt;# Log to syslog&lt;/span&gt;
Syslog                  yes
SyslogSuccess           yes
LogWhy                  yes
&lt;span class="c"&gt;# Required to use local socket with MTAs that access the socket as a non-&lt;/span&gt;
&lt;span class="c"&gt;# privileged user (e.g. Postfix)&lt;/span&gt;
UMask                   002

Mode                    sv
PidFile                 /var/run/opendkim/opendkim.pid
UserID                  opendkim:opendkim
Socket                  inet:12301@localhost

Canonicalization        relaxed/simple
SignatureAlgorithm      rsa-sha256

&lt;span class="c"&gt;# Sign for example.com with key in /etc/opendkim.d/mail.private using&lt;/span&gt;
&lt;span class="c"&gt;# selector &amp;#39;mail&amp;#39; (e.g. mail._domainkey.example.com)&lt;/span&gt;
Domain                  example.com
KeyFile                 /etc/opendkim.d/mail.private
Selector                mail

ExternalIgnoreList      refile:/etc/opendkim.d/TrustedHosts
InternalHosts           refile:/etc/opendkim.d/TrustedHosts
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can check out a detailed explanation for the meaning of each option with &lt;code&gt;man
opendkim.conf&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_code_etc_opendkim_d_trustedhosts_code"&gt;&lt;code&gt;/etc/opendkim.d/TrustedHosts&lt;/code&gt;&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Create the directory &lt;code&gt;/etc/opendkim.d&lt;/code&gt; and put the following in
&lt;code&gt;/etc/opendkim.d/TrustedHosts&lt;/code&gt;. This instructs the OpenDKIM server to sign
e-mails delivered by any server matching these expressions (such as
&lt;code&gt;myserver_2.example.com&lt;/code&gt;).&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;127.0.0.1
::1
localhost
192.168.0.1/24

*.example.com
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_dkim_keys"&gt;DKIM keys&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now, let&amp;#8217;s generate our DKIM signing keys:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/opendkim.d
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo opendkim-genkey -s mail -d example.com
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This will produce two files in &lt;code&gt;/etc/opendkim.d&lt;/code&gt;: our private key,
&lt;code&gt;mail.private&lt;/code&gt;, and our public key, &lt;code&gt;mail.txt&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We should make sure only OpenDKIM can read the private key, so that a malicious
program or user on the same server won&amp;#8217;t be able to forge our signature:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;chmod &lt;span class="m"&gt;600&lt;/span&gt; mail.private
&lt;span class="nv"&gt;$ &lt;/span&gt;chown opendkim:opendkim mail.private
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_dkim_public_key_dns_record"&gt;DKIM public key DNS record&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The next step is to publish our public key through DNS, so that any recipient
e-mail program can verify our signature. If we look at our public key &lt;code&gt;mail.txt&lt;/code&gt;
generated in the previous step, it should look like something like this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;mail._domainkey IN      TXT     ( "v=DKIM1; k=rsa; "
          "p=&amp;lt;alphabetical soup&amp;gt;" )  ; ----- DKIM key mail for example.com&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Create the following &lt;strong&gt;TXT&lt;/strong&gt; DNS record for &lt;code&gt;example.com&lt;/code&gt; (how to update DNS
records will depend on the DNS hosting provider):&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Name: &lt;code&gt;mail._domainkey.example.com&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Value: &lt;code&gt;v=DKIM1; k=rsa; p=&amp;lt;alphabetical soup&amp;gt;&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;where &lt;code&gt;&amp;lt;alphabetical soup&amp;gt;&lt;/code&gt; is the public key found in &lt;code&gt;mail.txt&lt;/code&gt; after &lt;code&gt;p=&lt;/code&gt;.
Note that DNS records will take a while (depending on our provider, up to a day)
to propagate.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_opendkim_server"&gt;OpenDKIM server&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We can now start the OpenDKIM server with&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo /etc/init.d/opendkim start
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_postfix"&gt;Postfix&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The last step is to tell Postfix to use OpenDKIM to sign outgoing e-mail
messages. Add the following to &lt;code&gt;/etc/postfix/main.cf&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Milter settings.&lt;/span&gt;
&lt;span class="nv"&gt;milter_protocol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 2
&lt;span class="nv"&gt;milter_default_action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; accept
&lt;span class="c"&gt;# OpenDKIM runs on port 12301.&lt;/span&gt;
&lt;span class="nv"&gt;smtpd_milters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; inet:localhost:12301
&lt;span class="nv"&gt;non_smtpd_milters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; inet:localhost:12301
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you already have other milters configured (such as
&lt;a href="http://spamassassin.apache.org/"&gt;SpamAssassin&lt;/a&gt;), simply add
&lt;code&gt;inet:localhost:12301&lt;/code&gt; to your existing &lt;code&gt;smtpd_milters&lt;/code&gt; and &lt;code&gt;non_smtpd_milters&lt;/code&gt;
lines, prefixed by a comma.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s now restart Postfix with the new configuration:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo postfix reload
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&amp;#8230;and we&amp;#8217;re done!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_2_srs"&gt;Step 2: SRS&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Sender_Rewriting_Scheme"&gt;SRS&lt;/a&gt;, short for &lt;em&gt;Sender
Rewriting Scheme&lt;/em&gt;, is a standard for including forwarding / relay information in
a forwarded / relayed e-mail message.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For example, suppose &lt;code&gt;alice@hotmail.com&lt;/code&gt; sends an e-mail to &lt;code&gt;john@example.com&lt;/code&gt;,
and our Postfix server on &lt;code&gt;myserver.example.com&lt;/code&gt; forwards this e-mail to
&lt;code&gt;john123@gmail.com&lt;/code&gt;. SRS allows our Postfix server on &lt;code&gt;myserver.example.com&lt;/code&gt; to
attach a virtual sticky note on the e-mail message explaining this situation to
Gmail. Otherwise, Gmail might become suspicious of why &lt;code&gt;myserver.example.com&lt;/code&gt; is
producing messages that purport to come from &lt;code&gt;hotmail.com&lt;/code&gt;, which spammers and
phishers are wont to do.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We will use &lt;a href="https://github.com/roehling/postsrsd"&gt;PostSRSd&lt;/a&gt; to implement SRS in
our Postfix server. It works out of the box with Postfix and is a breeze to set
up, but unfortunately is not included in the official Ubuntu / Debian package
repositories.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_opensrsd"&gt;OpenSRSd&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s build and install OpenSRSd from source:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Dependencies.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install unzip cmake

&lt;span class="c"&gt;# Download and extract source code from GitHub.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
&lt;span class="nv"&gt;$ &lt;/span&gt;curl -L -o postsrsd.zip &lt;span class="se"&gt;\&lt;/span&gt;
    https://github.com/roehling/postsrsd/archive/master.zip
&lt;span class="nv"&gt;$ &lt;/span&gt;unzip postsrsd.zip

&lt;span class="c"&gt;# Build and install.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;postsrsd-master
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir build
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;build
&lt;span class="nv"&gt;$ &lt;/span&gt;cmake -DCMAKE_INSTALL_PREFIX&lt;span class="o"&gt;=&lt;/span&gt;/usr ../
&lt;span class="nv"&gt;$ &lt;/span&gt;make
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo make install
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The default config provided by PostSRSd (&lt;code&gt;/etc/default/postsrsd&lt;/code&gt;) will pretty
much work out of the box for our case.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The install script will also conveniently install an Upstart script for
PostSRSd. Let&amp;#8217;s start it now:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo service postsrsd start
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_postfix_2"&gt;Postfix&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally, we configure Postfix to use PostSRSd. Add the following to
&lt;code&gt;/etc/postfix/main.cf&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# PostSRSd settings.&lt;/span&gt;
&lt;span class="nv"&gt;sender_canonical_maps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; tcp:localhost:10001
&lt;span class="nv"&gt;sender_canonical_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; envelope_sender
&lt;span class="nv"&gt;recipient_canonical_maps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; tcp:localhost:10002
&lt;span class="nv"&gt;recipient_canonical_classes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; envelope_recipient,header_recipient
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And restart Postfix with the new configuration:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo postfix reload
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;That&amp;#8217;s it!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Misc"></category></entry><entry><title>Custom Domain E-mails With Postfix and Gmail: The Missing Tutorial</title><link href="https://seasonofcode.com/posts/custom-domain-e-mails-with-postfix-and-gmail-the-missing-tutorial.html" rel="alternate"></link><updated>2014-11-06T16:50:00-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2014-11-06:posts/custom-domain-e-mails-with-postfix-and-gmail-the-missing-tutorial.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Custom domain e-mail addresses, like &lt;code&gt;john@johnscompany.com&lt;/code&gt;, are cool and
professional-looking. Would &lt;em&gt;you&lt;/em&gt; want to e-mail potential clients as
&lt;code&gt;john123@gmail.com&lt;/code&gt;?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;On the other hand, Gmail has great reliability, speed, spam filtration, and app
support. Wouldn&amp;#8217;t it be great if we could send and receive e-mail as
&lt;code&gt;john@johnscompany.com&lt;/code&gt;, but right from the comfort of our Gmail account?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Today, if we want to &lt;strong&gt;use Gmail to send and receive e-mails on a custom domain&lt;/strong&gt;,
we have a couple of options:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;&lt;a href="http://www.google.com/work/apps/business/"&gt;Google Apps for Work&lt;/a&gt;&lt;/strong&gt; is Google&amp;#8217;s
  own offering. It&amp;#8217;s simple to set up and manage, but it&amp;#8217;s pretty pricey at
  $5/mo per user, especially if we don&amp;#8217;t need the bundled collaborative
  features like Google Docs and Calendar.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Third-party services&lt;/strong&gt; could get the job done at a
  lower price point; for example, &lt;a href="https://pobox.com/"&gt;Pobox&lt;/a&gt; offers plans
  starting at $20/yr. The downside is that we will have to trust another
  organization with our e-mail.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Set up our own e-mail forwarding server&lt;/strong&gt;. It&amp;#8217;s fairly easy (if we
  follow this guide :) and if we already have shared / dedicated hosting or a
  VPS, this is basically free and gives us total control over our e-mail.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you want to host &lt;strong&gt;custom domain e-mails in Gmail without paying for Google
Apps&lt;/strong&gt; or a third-party service, this tutorial is for you. It will show you how
to quickly set up you own e-mail forwarding / relay server, and how to integrate
it seamlessly with Gmail.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_prerequisites"&gt;Prerequisites&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For this tutorial, we&amp;#8217;ll assume we have access to:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;VPS or shared / dedicated hosting&lt;/strong&gt;, with a dedicated IP address and capable
  of listening on ports 25 and 587. We will use a Ubuntu server for
  the examples.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;DNS records for our domain&lt;/strong&gt;. How DNS records are manipulated depends on the
  DNS hosting provider (or DNS server configuration).
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We&amp;#8217;ll assume&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
We have a domain &lt;code&gt;example.com&lt;/code&gt;;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
We have a server &lt;code&gt;myserver.example.com&lt;/code&gt;;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
We want to use the Gmail account &lt;code&gt;john123@gmail.com&lt;/code&gt; to manage
  &lt;code&gt;john@example.com&lt;/code&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_1_dns_setup"&gt;Step 1: DNS Setup&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The first step in setting up our e-mail forwarding server is to add MX, PTR and
&lt;a href="http://en.wikipedia.org/wiki/Sender_Policy_Framework"&gt;SPF&lt;/a&gt; DNS records for our
server. This is really important as many e-mail providers, in order to prevent
spam, will refuse to talk to mail servers without proper MX, PTR and SPF records
set up. How to update DNS records will depend on the DNS hosting provider.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The following is what we need:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
An &lt;strong&gt;MX&lt;/strong&gt; record for &lt;code&gt;example.com&lt;/code&gt;, pointing to &lt;code&gt;myserver.example.com&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This tells the world that e-mails to &lt;code&gt;&amp;lt;whatever&amp;gt;@example.com&lt;/code&gt; should be
delivered to the server &lt;code&gt;myserver.example.com&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
An &lt;strong&gt;A&lt;/strong&gt; record for &lt;code&gt;myserver.example.com&lt;/code&gt;, pointing to the IP address of our
  server.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A &lt;strong&gt;PTR&lt;/strong&gt; (reverse DNS) record mapping the IP address of our server to
  &lt;code&gt;myserver.example.com&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This allows Gmail to verify the legitimacy of our server via its IP when Gmail
receives a forwarded e-mail from it.&lt;/p&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A &lt;strong&gt;TXT&lt;/strong&gt; record, with key &lt;code&gt;example.com&lt;/code&gt; and value &lt;code&gt;v=spf1 mx ~all&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is an &lt;a href="http://en.wikipedia.org/wiki/Sender_Policy_Framework"&gt;SPF&lt;/a&gt; record; it
tells Gmail that the servers specified in the MX records of &lt;code&gt;example.com&lt;/code&gt;, in
this case only &lt;code&gt;myserver.example.com&lt;/code&gt;, are allowed to send e-mails purporting to
be from &lt;code&gt;&amp;lt;whatever&amp;gt;@example.com&lt;/code&gt;. All other servers attempting to do the same
will be rejected. This should be a sane default value, but feel free to custom
it as you like.&lt;/p&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;DNS records will take a while (depending on our provider, up to a day) to
propagate. Until they do, e-mails forwarded by our new e-mail server may get
marked as spam or rejected outright.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_2_receiving_e_mail"&gt;Step 2: Receiving E-mail&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We&amp;#8217;ll first set up an e-mail forwarding server which will let we receive e-mails
sent to our domains.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We will use &lt;a href="http://www.postfix.org"&gt;Postfix&lt;/a&gt; as the e-mail server. Let&amp;#8217;s start by
installing the necessary packages. We will assume a Ubuntu server in the
examples below; if you&amp;#8217;re using a different distribution, please consult your
distribution&amp;#8217;s documentation for the right commands.&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;$ sudo DEBIAN_FRONTEND=noninteractive apt-get install postfix&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In the above command, we skip the &lt;code&gt;debconf&lt;/code&gt; configuration UI with
&lt;code&gt;DEBIAN_FRONTEND=noninteractive&lt;/code&gt; as we will edit the configuration files
directly.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_etc_postfix_main_cf"&gt;/etc/postfix/main.cf&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Open up &lt;code&gt;/etc/postfix/main.cf&lt;/code&gt; in your favorite editor. This file will come
pre-populated with a bunch of config options and comments.  Replace the contents
of the file with the following (you can comment out the original contents for
reference):&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# /etc/postfix/main.cf&lt;/span&gt;

&lt;span class="c"&gt;# Host and site name.&lt;/span&gt;
&lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;mydomain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;myorigin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;

&lt;span class="c"&gt;# Virtual aliases.&lt;/span&gt;
&lt;span class="n"&gt;virtual_alias_domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;virtual_alias_maps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postfix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The first few lines are pretty straightforward; they tell Postfix how to
identify itself to the world. The last two lines tell Postfix to forward e-mails
sent to &lt;code&gt;&amp;lt;whatever&amp;gt;@example.com&lt;/code&gt; to another e-mail provider (Gmail), and that the
forwarding is configured in the database file &lt;code&gt;/etc/postfix/virtual&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_etc_postfix_virtual"&gt;/etc/postfix/virtual&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s now open up &lt;code&gt;/etc/postfix/virtual&lt;/code&gt; and fill in our forwarding
configuration:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# /etc/postfix/virtual&lt;/span&gt;

&lt;span class="c"&gt;# Forwarding mapping, one from-to address pair per line. The format is:&lt;/span&gt;
&lt;span class="c"&gt;#     &amp;lt;forward-from-addr&amp;gt; &amp;lt;whitespace&amp;gt; &amp;lt;forward-to-addr&amp;gt;&lt;/span&gt;
john@example.com        john123@gmail.com
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We can add as many forwarding rules as you want, one on each line.  We can use
any number of tabs / whitespaces between the forward-from and forward-to
addresses.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_update_lookup_table"&gt;Update lookup table&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It turns out that Postfix doesn&amp;#8217;t actually read &lt;code&gt;/etc/postfix/virtual&lt;/code&gt;
(surprise!); instead, what it reads is a lookup table generated from it.
So, let&amp;#8217;s generate the lookup table from our &lt;code&gt;/etc/postfix/virtual&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo postmap /etc/postfix/virtual
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: we must re-run this command every time we modify
&lt;code&gt;/etc/postfix/virtual&lt;/code&gt;!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_re_start_postfix"&gt;(Re)start Postfix&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It&amp;#8217;s now time to (re)start Postfix with our new configuration:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo postfix start
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo postfix reload
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_testing"&gt;Testing&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We should test our brand-new Postfix server by sending an e-mail to our
forward-from address. You might want to check out
&lt;a href="http://articles.slicehost.com/2008/8/6/postfix-using-telnet-to-test-postfix"&gt;these&lt;/a&gt;
&lt;a href="https://workaround.org/ispmail/lenny/test-mail-through-telnet"&gt;tutorials&lt;/a&gt; for
testing directly with the &lt;code&gt;telnet&lt;/code&gt; command.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you received the e-mail in your Gmail inbox, congratulations! Otherwise,
check the Postfix logs at &lt;code&gt;/var/log/mail.log&lt;/code&gt; (or with &lt;code&gt;journalctl -u postfix&lt;/code&gt;
if using Systemd) for errors. The most likely cause of issues is that DNS
records have not propagated yet, in which case we&amp;#8217;re likely to see a "rate
limited" or "rejected for spam" type error message.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If we only want to &lt;em&gt;receive&lt;/em&gt; but don&amp;#8217;t care about &lt;em&gt;sending&lt;/em&gt; e-mails as
&lt;code&gt;john@example.com&lt;/code&gt;, then this is all we need.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Otherwise, let&amp;#8217;s move on to
configuring Postfix to support sending e-mails from Gmail.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_3_sending_e_mail"&gt;Step 3: Sending E-mail&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Gmail requires a relay server (a server that will send e-mails to their
destination on behalf it) to speak
&lt;a href="http://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;TLS&lt;/a&gt;, which protects the
communication between Gmail and the relay server.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We will use &lt;a href="http://www.cyrusimap.org/"&gt;Cyrus SASL&lt;/a&gt; for this task. To install:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install sasl2-bin libsasl2-modules
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_user_name_amp_password"&gt;User name &amp;amp; password&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Open_mail_relay"&gt;Open relays&lt;/a&gt; are a terrible idea.
We want to protect our e-mail server with a user name and password so that it
will let Gmail send e-mails through it, but block spammers and other evil
actors.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Cyrus SASL supports several backends for storing user names and passwords,
including MySQL and PAM. However, we will go with the simplest backend&amp;#8201;&amp;#8212;&amp;#8201;a
plain database file.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s create the user name / password database file in the default location
&lt;code&gt;/etc/sasldb2&lt;/code&gt;, with a single user named &lt;code&gt;smtp&lt;/code&gt; (we can change the user name to
anything we want):&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo saslpasswd2 -c -u example.com smtp
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Verify with:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo sasldblistusers2
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now, we make sure only Postfix can read this file:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo chmod &lt;span class="m"&gt;400&lt;/span&gt; /etc/sasldb2
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo chown postfix /etc/sasldb2
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Lastly, we tell Cyrus SASL to use the file-based database to authenticate.
Create the file &lt;code&gt;/etc/postfix/sasl/smtpd.conf&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;pwcheck_method: auxprop
auxprop_plugin: sasldb
mech_list: PLAIN LOGIN CRAM-MD5 DIGEST-MD5 NTLM
log_level: 7&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_ssl_certificate"&gt;SSL Certificate&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We need an SSL certificate to enable TLS. While a proper SSL certificate signed
by a Certificate Authority (CA) can be pricey, it turns out that a simple
self-signed certificate suffices and works just fine.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So, let&amp;#8217;s generate one.&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Generate an RSA private/public key pair.&lt;/strong&gt; Note that you MUST supply a password
  to this command; the password will be removed in step 3.
&lt;/p&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;openssl genrsa -des3 -out example.key 1024
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Generate a Certificate Signing Request (CSR).&lt;/strong&gt; Make sure to enter
  &lt;code&gt;myserver.example.com&lt;/code&gt; when prompted for the "Common Name".
&lt;/p&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;openssl req -new -key example.key -out example.csr
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Remove RSA private/public key password.&lt;/strong&gt;
&lt;/p&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mv example.key example.key.orig
&lt;span class="nv"&gt;$ &lt;/span&gt;openssl rsa -in example.key.orig -out example.key
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Generate a self-signed certificate.&lt;/strong&gt; In the example, the generated
  certificate will be valid for 10 years.
&lt;/p&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;openssl x509 -req &lt;span class="se"&gt;\&lt;/span&gt;
    -days &lt;span class="m"&gt;3650&lt;/span&gt; -in example.csr -signkey example.key -out example.crt
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Create a PEM file.&lt;/strong&gt;
&lt;/p&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat example.crt example.key &amp;gt; example.pem
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Move and protect the PEM file.&lt;/strong&gt;
&lt;/p&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo mv example.pem /etc/postfix/example.pem
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo chmod &lt;span class="m"&gt;400&lt;/span&gt; /etc/postfix/example.pem
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo chown postfix /etc/postfix/example.pem
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure to protect the generated private key and certificate with care!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_relay_server"&gt;Relay server&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The final step is to configure Postfix to enable relaying of e-mail on behalf of
Gmail.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s open up &lt;code&gt;/etc/postfix/master.cf&lt;/code&gt;. This file should already contain a bunch
of config options, some of which are commented out. Uncomment the lines starting
with &lt;code&gt;submission&lt;/code&gt; and edit them to match the following:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;submission inet n       -       n       -       -       smtpd
  -o syslog_name=postfix/submission
  -o smtpd_tls_security_level=may
  -o smtpd_tls_cert_file=/etc/postfix/example.pem
  -o smtpd_sasl_auth_enable=yes
  -o smtpd_reject_unlisted_recipient=no
  -o smtpd_relay_restrictions=permit_sasl_authenticated,reject
  -o milter_macro_daemon_name=ORIGINATING&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A Postfix restart is due after all these changes:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo postfix reload
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If all went well, you should see Postfix serving a relay server, protected by
our user name and password in &lt;code&gt;/etc/sasldb2&lt;/code&gt;, on port 587.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_4_configure_gmail"&gt;Step 4: Configure Gmail&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally, let&amp;#8217;s log in to Gmail and tell it about our brand new server. (Note
that the new Inbox UI does not yet support all the settings available in the
legacy interface at the time of writing, so these instructions apply to the
legacy interface.)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s go to &lt;em&gt;Settings&lt;/em&gt; &amp;gt; &lt;em&gt;Accounts and Import&lt;/em&gt; and click &lt;em&gt;Add another email
address you own&lt;/em&gt;.
&lt;div align="center"&gt;&lt;img src="/assets/files/gmail_1.png"&gt;&lt;/div&gt;
In the dialog that pops up, fill in our target e-mail address and click &lt;em&gt;Next
Step&lt;/em&gt;.
&lt;div align="center"&gt;&lt;img src="/assets/files/gmail_2.png"&gt;&lt;/div&gt;
In the next dialog, enter the address of our e-mail server
(&lt;code&gt;myserver.example.com&lt;/code&gt;), and the user name and password we set up using
&lt;code&gt;saslpasswd2&lt;/code&gt; above. Make sure the user name is suffixed with our domain name
(so &lt;code&gt;smtp@example.com&lt;/code&gt; rather than just &lt;code&gt;smtp&lt;/code&gt;). Check that the correct port
(587) and the correct security protocol (TLS) are selected, then click &lt;em&gt;Add
Account&lt;/em&gt;.
&lt;div align="center"&gt;&lt;img src="/assets/files/gmail_3.png"&gt;&lt;/div&gt;
If all goes well, we should see a dialog like the following:
&lt;div align="center"&gt;&lt;img src="/assets/files/gmail_4.png"&gt;&lt;/div&gt;
And we should receive an e-mail, forwarded by our mail server set up in the
first part, to our &lt;code&gt;john123@gmail.com&lt;/code&gt; address. Click on the link inside the
e-mail and we&amp;#8217;re done!&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now, in any e-mail compose / reply window, you should be able to select
&lt;code&gt;john@example.com&lt;/code&gt; in the drop-down list next to "From". Congrats!&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If, on the other hand, you see an error like the following:
&lt;div align="center"&gt;&lt;img src="/assets/files/gmail_5.png"&gt;&lt;/div&gt;
You should check the Postfix logs at &lt;code&gt;/var/log/mail.log&lt;/code&gt; (or with &lt;code&gt;journalctl -u
postfix&lt;/code&gt; if using Systemd) for any errors.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_optional_step_5_setup_dkim_and_srs"&gt;[Optional] Step 5: Setup DKIM and SRS&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/DomainKeys_Identified_Mail"&gt;DKIM&lt;/a&gt;, short for
&lt;em&gt;DomainKeys Identified Mail&lt;/em&gt;, is e-mail validation system for preventing e-mail
spoofing. &lt;a href="https://support.google.com/mail/answer/180707?hl=en"&gt;Google recommends
setting up DKIM&lt;/a&gt;; if we don&amp;#8217;t, the e-mail messages that we forward to Gmail have
a higher probability of getting marked as spam.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Sender_Rewriting_Scheme"&gt;SRS&lt;/a&gt;, short for &lt;em&gt;Sender
Rewriting Scheme&lt;/em&gt;, is a relatively new standard that e-mail forwarding servers
are recommended to adopt, and it also helps reduce the likelihood of our
forwarded e-mail messages getting marked as spam.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Thus, while technically optional, it&amp;#8217;s a good idea to configure our Postfix
server to support both these standards. See my follow-up tutorial on
&lt;a href="/posts/setting-up-dkim-and-srs-in-postfix.html"&gt;Setting Up DKIM And SRS In
Postfix&lt;/a&gt; for a detailed step-by-step guide.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_conclusion"&gt;Conclusion&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In this post, we have set up a Postfix e-mail server that accomplishes the
following:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
E-mails sent to &lt;code&gt;john@example.com&lt;/code&gt; is received by Postfix on
  &lt;code&gt;myserver.example.com&lt;/code&gt; port 25, and forwarded to &lt;code&gt;john123@gmail.com&lt;/code&gt;;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Gmail will let you select &lt;code&gt;john@example.com&lt;/code&gt; as a "from" address when
  composing / replying to an e-mail, and will relay such e-mails through Postfix
  on &lt;code&gt;myserver.example.com&lt;/code&gt; port 587 using a configured user name / password
  combination.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I hope you found this guide useful, and if you have any thoughts / questions,
you&amp;#8217;re more than welcome to leave a comment below. Cheers!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Featured"></category><category term="Misc"></category></entry><entry><title>How To Add Custom Build Steps and Commands To setup.py</title><link href="https://seasonofcode.com/posts/how-to-add-custom-build-steps-and-commands-to-setuppy.html" rel="alternate"></link><updated>2014-10-07T14:53:00-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2014-10-07:posts/how-to-add-custom-build-steps-and-commands-to-setuppy.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;A &lt;code&gt;setup.py&lt;/code&gt; script using
&lt;a href="https://docs.python.org/2/distutils/introduction.html"&gt;&lt;code&gt;distutils&lt;/code&gt;&lt;/a&gt; /
&lt;a href="https://pythonhosted.org/setuptools/setuptools.html"&gt;&lt;code&gt;setuptools&lt;/code&gt;&lt;/a&gt; is the
standard way to package Python code. Often, however, we need to perform custom
actions for code generation, running tests, profiling, or building
documentation, etc., and we&amp;#8217;d like to integrate these actions into setup.py. In
other words, we&amp;#8217;d like to add custom steps to &lt;code&gt;setup.py build&lt;/code&gt; or &lt;code&gt;setup.py
install&lt;/code&gt;, or add a new command altogether to &lt;code&gt;setup.py&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s see how this is done.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_adding_custom_code_setup_py_code_commands_and_options"&gt;Adding Custom &lt;code&gt;setup.py&lt;/code&gt; Commands and Options&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s implement a custom command that runs &lt;a href="http://www.pylint.org/"&gt;Pylint&lt;/a&gt; on all
Python files in our project. The high level idea is:&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
Implement command as a subclass of &lt;code&gt;distutils.cmd.Command&lt;/code&gt;;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Add the newly defined command class to the &lt;code&gt;cmdclass&lt;/code&gt; argument to &lt;code&gt;setup()&lt;/code&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To see this in action, let&amp;#8217;s add the following to our &lt;code&gt;setup.py&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;distutils.cmd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;distutils.log&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PylintCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;distutils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A custom command to run Pylint on all Python source files.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;run Pylint on Python source files&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;user_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="c"&gt;# The format is (long option, short option, description).&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pylint-rcfile=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;path to Pylint config file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize_options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Set default values for options.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;# Each user option must be listed here with their default value.&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pylint_rcfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;finalize_options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Post-process options.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pylint_rcfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pylint_rcfile&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="s"&gt;&amp;#39;Pylint config file &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; does not exist.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pylint_rcfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Run command.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/usr/bin/pylint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pylint_rcfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;--rcfile=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pylint_rcfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;announce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;Running command: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;distutils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;setuptools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;cmdclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;pylint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PylintCommand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c"&gt;# Usual setup() args.&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now, running &lt;code&gt;python setup.py --help-commands&lt;/code&gt; will show:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;Standard commands:
  ...
Extra commands:
  pylint: run Pylint on Python source files
  ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We can now run the command we just defined with:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;$ python setup.py pylint&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&amp;#8230;or with a custom option:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;$ python setup.py pylint --pylint-rcfile=.pylintrc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To learn more, you can check out documentation on
&lt;a href="https://docs.python.org/2/distutils/apiref.html#creating-a-new-distutils-command"&gt;inheriting
from &lt;code&gt;distutils.cmd.Command&lt;/code&gt;&lt;/a&gt; as well as the source code of some built-in
commands, such as
&lt;a href="https://bitbucket.org/pypa/setuptools/src/312a67d000cb05d15b854957466c4751cf5e1c08/setuptools/command/build_py.py?at=default"&gt;&lt;code&gt;build_py&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_adding_custom_steps_to_code_setup_py_build_code"&gt;Adding Custom Steps to &lt;code&gt;setup.py build&lt;/code&gt;&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s say we are really paranoid about code style and we&amp;#8217;d like to run Pylint as
part of &lt;code&gt;setup.py build&lt;/code&gt;. We can do this in the following manner:&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
Create a subclass of &lt;code&gt;setuptools.command.build_py.build_py&lt;/code&gt; (or
  &lt;code&gt;distutils.command.build_py.build_py&lt;/code&gt; if using &lt;code&gt;distutils&lt;/code&gt;) that invokes our
  new Pylint command;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Add the newly defined command class to the &lt;code&gt;cmdclass&lt;/code&gt; argument to &lt;code&gt;setup()&lt;/code&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For example, we can implement the following in our &lt;code&gt;setup.py&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;setuptools.command.build_py&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BuildPyCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setuptools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_py&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Custom build command.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pylint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;setuptools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;setuptools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;cmdclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;pylint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PylintCommand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;build_py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BuildPyCommand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c"&gt;# Usual setup() args.&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For more examples, I encourage you to check out the
&lt;a href="https://bitbucket.org/pypa/setuptools/src/312a67d000cb05d15b854957466c4751cf5e1c08/setuptools/command/?at=default"&gt;&lt;code&gt;setuptools&lt;/code&gt;
source code&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>Announcing AsciiDocLIVE</title><link href="https://seasonofcode.com/posts/announcing-asciidoclive.html" rel="alternate"></link><updated>2014-06-11T18:07:00-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2014-06-11:posts/announcing-asciidoclive.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I am very pround to announce the alpha launch of &lt;strong&gt;AsciiDocLIVE&lt;/strong&gt;
(&lt;a href="https://asciidoclive.com/"&gt;https://asciidoclive.com/&lt;/a&gt;), a &lt;strong&gt;free online
&lt;a href="http://www.methods.co.nz/asciidoc/"&gt;AsciiDoc&lt;/a&gt; editor&lt;/strong&gt; with instant live preview,
syntax highlighting, and more!&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_the_idea"&gt;The Idea&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The idea for &lt;a href="https://asciidoclive.com/"&gt;AsciiDocLIVE&lt;/a&gt; struck me one day while
writing a blog post. Being a fan of
&lt;a href="http://www.methods.co.nz/asciidoc/"&gt;AsciiDoc&lt;/a&gt;, I use AsciiDoc for this blog, but
the repetitive cycle of edit-compile-preview is pretty tedious. I realized that
there wasn&amp;#8217;t a good AsciiDoc editor that supported live previews (like
&lt;a href="http://dillinger.io"&gt;Dillinger&lt;/a&gt; or &lt;a href="http://markable.in/"&gt;Markable&lt;/a&gt; for
&lt;a href="http://daringfireball.net/projects/markdown"&gt;Markdown&lt;/a&gt;). So, I hacked up a quick
prototype in my spare time, and &lt;a href="https://asciidoclive.com/"&gt;AsciiDocLIVE&lt;/a&gt; was
born!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_features"&gt;Features&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Features included in this alpha launch:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Instant live preview&lt;/strong&gt;: type in the left pane, see rendered result in the
  right pane.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Smart error messages&lt;/strong&gt;: errors generated by the AsciiDoc compiler are
  displayed and linked to the offending line in the source text.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Syntax highlighting&lt;/strong&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To be available soon:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Saving documents&lt;/strong&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Importing from and exporting to&lt;/strong&gt; Dropbox / Google Drive
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_feedback"&gt;Feedback&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Bugs? Improvement ideas? All feedback is appreciated at
&lt;a href="mailto:ji@chu4n.com"&gt;ji@chu4n.com&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>How X Window Managers Work, And How To Write One (Part II)</title><link href="https://seasonofcode.com/posts/how-x-window-managers-work-and-how-to-write-one-part-ii.html" rel="alternate"></link><updated>2014-06-08T23:14:00-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2014-06-08:posts/how-x-window-managers-work-and-how-to-write-one-part-ii.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;&lt;!--googleoff: index--&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="sidebarblock"&gt;
&lt;div class="content"&gt;
&lt;div class="title"&gt;Series Contents&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-i.html"&gt;Part I: Basic Concepts&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-ii.html"&gt;&lt;strong&gt;Part II: Introduction, Setup &amp;amp; Teardown, Initialization, Event Loop&lt;/strong&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-iii.html"&gt;Part III: Interaction with Application Windows&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;!--googleon: index--&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In &lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-i.html"&gt;Part
I of this series&lt;/a&gt;, we examined the role of X window managers in a modern
Linux/BSD desktop environment, and how they interact with the X server and
applications. In Part II, we will dig into the dirty details and walk through
the code of an example reparenting non-compositing window manager,
&lt;a href="https://github.com/jichu4n/basic_wm"&gt;basic_wm&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_introduction"&gt;Introduction&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Before we start with the code, let&amp;#8217;s go over a couple of basic implementation
choices such as language and API.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_language"&gt;Language&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can write a window manager in &lt;a href="http://xmonad.org"&gt;Haskell&lt;/a&gt;,
&lt;a href="http://qtile.org"&gt;Python&lt;/a&gt;, &lt;a href="http://www.nongnu.org/stumpwm/"&gt;Lisp&lt;/a&gt;,
&lt;a href="https://github.com/BurntSushi/wingo"&gt;Go&lt;/a&gt;,
&lt;a href="http://escher.sourceforge.net/"&gt;Java&lt;/a&gt;, or any other language that has X bindings,
i.e. a library for communicating with X servers.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I chose C++ for &lt;a href="https://github.com/jichu4n/basic_wm"&gt;basic_wm&lt;/a&gt;, our example
window manager, mainly because the C libraries for X11 are the best documented.
In addition to books such as the
&lt;a href="http://www.amazon.com/Programming-Manual-Version-Definitive-Guides/dp/1565920023"&gt;Xlib
Programming Manual&lt;/a&gt;, documentation can be found in the form of widely available
&lt;a href="http://www.xfree86.org/current/manindex3.html"&gt;man pages&lt;/a&gt; (e.g., try &lt;code&gt;man
XOpenDisplay&lt;/code&gt; at a terminal). Example usage and common patterns abound in the
source code of many great window managers written in the past three decades.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We will use C++11 and C++14 features where convenient, so you will need a
compatible compiler (GCC 4.9 or higher, or Clang 3.4 or higher) if you want to
play with the example source code.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="a-tale-of-two-x-libraries"&gt;A Tale of Two X Libraries&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;There are two official C libraries for X:
&lt;a href="http://en.wikipedia.org/wiki/Xlib"&gt;Xlib&lt;/a&gt; and
&lt;a href="http://en.wikipedia.org/wiki/Xcb"&gt;XCB&lt;/a&gt;. Xlib, hailing from 1985, was the original
X client library, and was the only official X client library until the
introduction of XCB in 2001. The two libraries have very different philosophies:
whereas Xlib tries to hide the X protocol behind a friendly C API with lots of
bells and whistles, XCB directly exposes the plumbing beneath.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In practice, this different manifests itself most prominently in how the two
libraries handle the fundamental asynchronous nature of X&amp;#8217;s client-server
architecture. Xlib attempts to hide the asynchronous X protocol behind a mixed
synchronous and asynchronous API, whereas XCB exposes a fully asynchronous API.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For example, to lookup the attributes (e.g., size and position) of a window, you
would write the following code using Xlib:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;XWindowAttributes&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;XGetWindowAttributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Do stuff.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Under the hood,
&lt;a href="http://manpages.ubuntu.com/manpages/en/man3/XGetWindowAttributes.3.html"&gt;&lt;code&gt;XGetWindowAttributes&lt;/code&gt;()&lt;/a&gt;
sends a request to the X server and blocks until it receives a response; in
other words, it is &lt;em&gt;synchronous&lt;/em&gt;. On the other hand, using XCB, you would write
this instead:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;xcb_get_window_attributes_cookie_t&lt;/span&gt; &lt;span class="n"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;xcb_get_window_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Do other stuff while waiting for reply.&lt;/span&gt;
&lt;span class="kt"&gt;xcb_get_window_attributes_reply_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;xcb_get_window_attributes_reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Do stuff.&lt;/span&gt;
&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The function &lt;code&gt;xcb_get_window_attributes&lt;/code&gt; merely sends the request to the X
server, and returns immediately without waiting for the reply; in other words,
it is &lt;em&gt;asynchronous&lt;/em&gt;. The client program must subsequently call
&lt;code&gt;xcb_get_window_attributes_reply&lt;/code&gt; to block on the response.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The advantage of the asynchronous approach is obvious if we consider an example
where we need to retrieve the attributes of, say, 5 windows at once. Using XCB,
we can immediately fire off all 5 requests to the X server, and then wait for
all of them to return. With Xlib, we have send one request at a time and wait
for its response to come back before we can send the next request. Therefore,
we&amp;#8217;d expect to only block for the duration of one round-trip to the X server
using XCB, compared to 5 with Xlib.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The downside of XCB&amp;#8217;s fully asynchronous approach is verbosity and a less
programmer-friendly interface.  The Xlib code above looks like your average C
library call; the XCB code above is significantly more involved.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;However, it is important to note that Xlib isn&amp;#8217;t fully synchronous. Rather,
&lt;strong&gt;Xlib has a mixture of synchronous and asynchronous APIs&lt;/strong&gt;. In general, functions
that do not return values (e.g.,
&lt;a href="http://manpages.ubuntu.com/manpages/en/man3/XConfigureWindow.3.html"&gt;XResizeWindow&lt;/a&gt;,
which changes the size of a window) are asynchronous, while functions that
return values (e.g.,
&lt;a href="http://manpages.ubuntu.com/manpages/en/man3/XGetWindowAttributes.3.html"&gt;XGetGeometry&lt;/a&gt;,
which return the size and position of a window) are synchronous:&lt;/p&gt;&lt;/div&gt;
&lt;div class="quoteblock"&gt;
&lt;div class="content"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Xlib saves up requests instead of sending them to the server immediately, so
that the client program can continue running instead of waiting to gain access
to the network after every Xlib call. This is possible because most Xlib calls
do not require immediate action by the server. This grouping of requests by the
client before sending them over the network also increases the performance of
most networks, because it makes the network transactions longer and less
numerous, reducing the total overhead involved.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Xlib sends the buffer full of requests to the server under three conditions.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The most common is when an application calls an Xlib routine to wait for an
event but no matching event is currently available on Xlib’s queue. Since, in
this case, the application must wait for an appropriate event anyway, it makes
sense to flush the request buffer.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Second, Xlib calls that get information from the server require a reply before
the program can continue, and therefore, the request buffer is sent and all the
requests acted on before the information is returned.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Third, the client would like to be able to flush the request buffer manually in
situations where no user events and no calls to query the server are expected.
One good example of this third case is an animated game, where the display
changes even when there is no user input.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="attribution"&gt;
&amp;#8212; Xlib Programming Manual §2.1.2
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is &lt;em&gt;the&lt;/em&gt; most confusing aspect of Xlib, and a source of endless frustration
for those new to X programming. One of the major motivations for the creation of
XCB was to eliminate this complexity.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Many popular window managers have already been ported to XCB from Xlib for the
performance benefits. If you are interested, you can read up on how the
&lt;a href="http://www.mini-dweeb.org/~arnau/docs/dueti/project/report.pdf"&gt;Awesome&lt;/a&gt; and
&lt;a href="http://blog.martin-graesslin.com/blog/2013/02/porting-kwin-to-xcb-making-c-usable-through-raii/"&gt;KWin&lt;/a&gt;
window managers were ported to XCB.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I chose to use Xlib for &lt;a href="https://github.com/jichu4n/basic_wm"&gt;basic_wm&lt;/a&gt;, however,
because as a pedagogical example, readability and simplicity is much more
important than performance. In fact, I would recommend starting with Xlib first
for any project and worry about porting to XCB later, as Xlib is much easier to
learn and prototype with.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;While an in-depth discussion of the merits of Xlib and XCB is beyond the scope
of this discussion, I do recommend you check out
&lt;a href="http://www.x.org/wiki/guide/xlib-and-xcb/"&gt;the official article on Xlib vs. XCB&lt;/a&gt;
as it presents a fascinating case study of API design.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_dependencies_and_building"&gt;Dependencies and Building&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Firstly, you will need Xlib development headers in order to compile against
Xlib. They are available on Debian/Ubuntu as &lt;code&gt;libx11-dev&lt;/code&gt;, on Fedora as
&lt;code&gt;libX11-devel&lt;/code&gt;, and on Arch Linux as part of &lt;code&gt;libx11&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The only additional library used by the example
&lt;a href="https://github.com/jichu4n/basic_wm"&gt;basic_wm&lt;/a&gt; code is
&lt;a href="https://code.google.com/p/google-glog/"&gt;google-glog&lt;/a&gt;, Google&amp;#8217;s open source C++
logging library. It is available on Debian/Ubuntu as &lt;code&gt;libgoogle-glog-dev&lt;/code&gt;, on
Fedora as &lt;code&gt;glog-devel&lt;/code&gt;, and on Arch Linux as &lt;code&gt;google-glog&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The recommended way to build the source code is with
&lt;a href="https://www.gnu.org/software/make/manual/html_node/Running.html"&gt;GNU Make&lt;/a&gt;: just
run &lt;code&gt;make&lt;/code&gt; in the source directory.  Alternatively, &lt;code&gt;g++ *.cpp&lt;/code&gt; will also do the
trick if you supply all the libraries correctly.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To test the window manager, you will likely need
&lt;a href="http://www.freedesktop.org/wiki/Software/Xephyr/"&gt;Xephyr&lt;/a&gt; along with a couple of
simple X programs such as &lt;code&gt;xeyes&lt;/code&gt; or &lt;code&gt;xterm&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_1_setup_and_teardown"&gt;Step 1: Setup and Teardown&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s start off with a skeleton implementation of the &lt;code&gt;WindowManager&lt;/code&gt; class,
which will encapsulate all the window management logic in our example. All it
will do for now is set up a connection to the X server on construction, and
close that connection on destruction.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In
&lt;a href="https://github.com/jichu4n/basic_wm/blob/master/window_manager.hpp"&gt;&lt;code&gt;window_manager.hpp&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;X11/Xlib.h&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WindowManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;// Factory method for establishing a connection to an X server and creating a&lt;/span&gt;
  &lt;span class="c1"&gt;// WindowManager instance.&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// Disconnects from the X server.&lt;/span&gt;
  &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// The entry point to this class. Enters the main event loop.&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

 &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;// Invoked internally by Create().&lt;/span&gt;
  &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Handle to the underlying Xlib Display struct.&lt;/span&gt;
  &lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Handle to root window.&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt; &lt;span class="n"&gt;root_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In
&lt;a href="https://github.com/jichu4n/basic_wm/blob/master/window_manager.cpp"&gt;&lt;code&gt;window_manager.cpp&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;quot;window_manager.hpp&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;glog/logging.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// 1. Open X display.&lt;/span&gt;
  &lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XOpenDisplay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Failed to open X display &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;XDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// 2. Construct WindowManager instance.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHECK_NOTNULL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;root_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DefaultRootWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::~&lt;/span&gt;&lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;XCloseDisplay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* TODO */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; function in
&lt;a href="https://github.com/jichu4n/basic_wm/blob/master/main.cpp"&gt;&lt;code&gt;main.cpp&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;glog/logging.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;quot;window_manager.hpp&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;google&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;InitGoogleLogging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;window_manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;window_manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Failed to initialize window manager.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;window_manager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Even if you have never programmed Xlib before, this should not be hard to
understand. &lt;code&gt;WindowManager::Create()&lt;/code&gt; is a
&lt;a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Doing_Work_in_Constructors"&gt;static
factory method&lt;/a&gt; that sets up a connection to an X server via
&lt;a href="http://manpages.ubuntu.com/manpages/trusty/en/man3/XOpenDisplay.3.html"&gt;&lt;code&gt;XOpenDisplay()&lt;/code&gt;&lt;/a&gt;;
we will let
&lt;a href="http://manpages.ubuntu.com/manpages/trusty/en/man3/XOpenDisplay.3.html"&gt;&lt;code&gt;XOpenDisplay()&lt;/code&gt;&lt;/a&gt;
figure out which X server to connect to from the &lt;code&gt;DISPLAY&lt;/code&gt; environment variable.
The connection is represented by the opaque &lt;code&gt;Display&lt;/code&gt; structure. We call
&lt;a href="http://manpages.ubuntu.com/manpages/trusty/en/man3/XOpenDisplay.3.html"&gt;&lt;code&gt;XCloseDisplay()&lt;/code&gt;&lt;/a&gt;
on the saved &lt;code&gt;Display*&lt;/code&gt; in the destructor to close the connection.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The other function of note is
&lt;a href="http://manpages.ubuntu.com/manpages/trusty/en/man3/AllPlanes.3.html"&gt;&lt;code&gt;DefaultRootWindow()&lt;/code&gt;&lt;/a&gt;,
which returns the default root window for a given X server. Technically, an X
server may have several root windows in some rare multihead setups, but let&amp;#8217;s
not worry about that here.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you run this program now, it should connect to the X server, close the
connection, and exit. Hooray!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_2_initialization"&gt;Step 2: Initialization&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now, let&amp;#8217;s dig into the mysterious &lt;code&gt;Run()&lt;/code&gt; function above. We&amp;#8217;ll start with the
initialization steps required after opening an X server connection.
In
&lt;a href="https://github.com/jichu4n/basic_wm/blob/master/window_manager.hpp"&gt;&lt;code&gt;window_manager.hpp&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WindowManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="c1"&gt;// Xlib error handler. It must be static as its address is passed to Xlib.&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;OnXError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XErrorEvent&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Xlib error handler used to determine whether another window manager is&lt;/span&gt;
  &lt;span class="c1"&gt;// running. It is set as the error handler right before selecting substructure&lt;/span&gt;
  &lt;span class="c1"&gt;// redirection mask on the root window, so it is invoked if and only if&lt;/span&gt;
  &lt;span class="c1"&gt;// another window manager is running. It must be static as its address is&lt;/span&gt;
  &lt;span class="c1"&gt;// passed to Xlib.&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;OnWMDetected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XErrorEvent&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Whether an existing window manager has been detected. Set by OnWMDetected,&lt;/span&gt;
  &lt;span class="c1"&gt;// and hence must be static.&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;wm_detected_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In
&lt;a href="https://github.com/jichu4n/basic_wm/blob/master/window_manager.cpp"&gt;&lt;code&gt;window_manager.cpp&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// 1. Initialization.&lt;/span&gt;
  &lt;span class="c1"&gt;//   a. Select events on root window. Use a special error handler so we can&lt;/span&gt;
  &lt;span class="c1"&gt;//   exit gracefully if another window manager is already running.&lt;/span&gt;
  &lt;span class="n"&gt;wm_detected_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;XSetErrorHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OnWMDetected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;XSelectInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;root_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;SubstructureRedirectMask&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;SubstructureNotifyMask&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;XSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wm_detected_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Detected another window manager on display &amp;quot;&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;XDisplayString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;//   b. Set error handler.&lt;/span&gt;
  &lt;span class="n"&gt;XSetErrorHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OnXError&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// 2. Main event loop.&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OnWMDetected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XErrorEvent&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// In the case of an already running window manager, the error code from&lt;/span&gt;
  &lt;span class="c1"&gt;// XSelectInput is BadAccess. We don&amp;#39;t expect this handler to receive any&lt;/span&gt;
  &lt;span class="c1"&gt;// other errors.&lt;/span&gt;
  &lt;span class="n"&gt;CHECK_EQ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;static_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;error_code&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;BadAccess&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Set flag.&lt;/span&gt;
  &lt;span class="n"&gt;wm_detected_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// The return value is ignored.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OnXError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XErrorEvent&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* Print e */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We first select substructure redirection and substructure notify events on the
root window. This is discussed in more detail in the
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-i.html#substructure-redirection"&gt;Substructure
Redirection&lt;/a&gt; section in Part I; to recap, this allows the window manager to
intercept requests from top level windows, and subscribe to events concerning the
same. Only one X client can select substructure redirection on the root window
at any given time; the second client to attempt to do so will get a &lt;code&gt;BadAccess&lt;/code&gt;
error.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Catching this error is somewhat tricky, however.
&lt;a href="http://manpages.ubuntu.com/manpages/en/man3/XSelectInput.3.html"&gt;&lt;code&gt;XSelectInput&lt;/code&gt;&lt;/a&gt;,
like all asynchronous Xlib functions, does not actually send a request to the X
server, but instead only &lt;em&gt;queues&lt;/em&gt; the request and returns. Hence, we have to
explicitly flush the request queue with
&lt;a href="http://manpages.ubuntu.com/manpages/en/man3/XSync.3.html"&gt;&lt;code&gt;XSync&lt;/code&gt;&lt;/a&gt; (see our
discussion above in &lt;a href="#a-tale-of-two-x-libraries"&gt;A Tale of Two X Libraries&lt;/a&gt;).
We set up a temporary error handler, &lt;code&gt;OnWMDetected&lt;/code&gt;, to catch errors during this
&lt;code&gt;XSync&lt;/code&gt; invocation.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Next, we set up our regular error handler which will be invoked for any future
errors. Our implementation, which logs the error and continues, will be an
important debugging aid as we implement and test our window manager. I will not
show it here for the sake of brevity; for reference, check it out in
&lt;a href="https://github.com/jichu4n/basic_wm/blob/master/window_manager.cpp"&gt;&lt;code&gt;window_manager.cpp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_3_the_event_loop"&gt;Step 3: The Event Loop&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now let&amp;#8217;s add to &lt;code&gt;Run()&lt;/code&gt; method above the signature construct of every modern
GUI program - the event loop. In
&lt;a href="https://github.com/jichu4n/basic_wm/blob/master/window_manager.cpp"&gt;&lt;code&gt;window_manager.cpp&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// 1. Initialization.&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="c1"&gt;// 2. Main event loop.&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 1. Get next event.&lt;/span&gt;
    &lt;span class="n"&gt;XEvent&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;XNextEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Received event: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// 2. Dispatch event.&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;CreateNotify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;OnCreateNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xcreatewindow&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;DestroyNotify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;OnDestroyNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xdestroywindow&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;ReparentNotify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;OnReparentNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xreparent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="c1"&gt;// etc. etc.&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Ignored event&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you have done low-level GUI programming before, this should look very
familiar. We sit in an event loop and repeatedly fetch the next event with
&lt;a href="http://manpages.ubuntu.com/manpages/en/man3/XNextEvent.3.html"&gt;&lt;code&gt;XNextEvent()&lt;/code&gt;&lt;/a&gt; and
dispatch it to the appropriate handlers.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The structure of the &lt;code&gt;XEvent&lt;/code&gt; type is typical of a polymorphic C structure.
Each type of event carries different attributes and corresponds to an event
&lt;code&gt;struct&lt;/code&gt;, such as &lt;code&gt;XKeyEvent&lt;/code&gt;, &lt;code&gt;XButtonEvent&lt;/code&gt;, and &lt;code&gt;XConfigureEvent&lt;/code&gt;. The first
field of each &lt;code&gt;struct&lt;/code&gt; is always &lt;code&gt;int type&lt;/code&gt;. The &lt;code&gt;XEvent&lt;/code&gt; type is a C
&lt;code&gt;union&lt;/code&gt; of all the event &lt;code&gt;structs&lt;/code&gt; plus &lt;code&gt;int type&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_XKeyEvent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Fields specific to XKeyEvent.&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;XKeyEvent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_XButtonEvent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Fields specific to XButtonEvent.&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;XButtonEvent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// etc.&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="n"&gt;_XEvent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;XKeyEvent&lt;/span&gt; &lt;span class="n"&gt;xkey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;XButtonEvent&lt;/span&gt; &lt;span class="n"&gt;xbutton&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// etc.&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;XEvent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This way, the type is always available regardless of the type of event and
requires no additional storage. The same pattern can be observed in
&lt;a href="http://en.wikipedia.org/wiki/GObject"&gt;GTK+/GLib&lt;/a&gt;,
&lt;a href="https://docs.python.org/3/c-api/structures.html"&gt;Python&amp;#8217;s C API&lt;/a&gt;, and many other
object-oriented C APIs.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In &lt;code&gt;basic_wm&lt;/code&gt;, the event handlers follow the naming convention of &lt;code&gt;OnFoo()&lt;/code&gt;,
where &lt;code&gt;Foo&lt;/code&gt; is the type of the event, so it should be straightforward to figure
out who does what.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_what_8217_s_next"&gt;What&amp;#8217;s Next&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We now have a basic skeleton for our window manager, and we can start filling in
the meat - the event handlers. The million-dollar question is, what events does
a window manager handle, and what should it do with them?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In the &lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-iii.html"&gt;
next installment&lt;/a&gt; in this series, we&amp;#8217;ll answer that question by diving
into the complex ways window managers, clients and the user interact with each
other via X events. In the meantime, you&amp;#8217;re more than welcome to check out the
code for &lt;code&gt;basic_wm&lt;/code&gt; &lt;a href="https://github.com/jichu4n/basic_wm"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;strong&gt;Next chapter:&lt;/strong&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-iii.html"&gt;&lt;strong&gt;How X
Window Managers Work, And How To Write One (Part III)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="sidebarblock"&gt;
&lt;div class="content"&gt;
&lt;div class="title"&gt;Series Contents&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-i.html"&gt;Part I: Basic Concepts&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-ii.html"&gt;&lt;strong&gt;Part II: Introduction, Setup &amp;amp; Teardown, Initialization, Event Loop&lt;/strong&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-iii.html"&gt;Part III: Interaction with Application Windows&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Featured"></category><category term="Window Manager"></category></entry><entry><title>DEBUG trap and PROMPT_COMMAND in Bash</title><link href="https://seasonofcode.com/posts/debug-trap-and-prompt_command-in-bash.html" rel="alternate"></link><updated>2014-06-08T11:50:00-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2014-06-08:posts/debug-trap-and-prompt_command-in-bash.html</id><summary type="html">&lt;div class="exampleblock"&gt;
&lt;div class="content"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;strong&gt;Update 03/08/2016&lt;/strong&gt;: A
&lt;a href="https://lists.gnu.org/archive/html/bug-bash/2015-10/msg00247.html"&gt;patch&lt;/a&gt; by
Dan Stromberg adds a &lt;code&gt;PS0&lt;/code&gt; variable to Bash that greatly simplifies what&amp;#8217;s
described in this article. This patch will likely be merged into Bash 4.4.
Please refer to &lt;a href="http://stromberg.dnsalias.org/~strombrg/PS0-prompt/"&gt;his
post&lt;/a&gt; for details.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_the_debug_trap"&gt;The DEBUG trap&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The DEBUG trap is an extremely handy feature of Bash. The idea is pretty
straightforward: if you run&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;echo Hello&amp;quot;&lt;/span&gt; DEBUG
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;then Bash will run &lt;code&gt;echo Hello&lt;/code&gt; before it executes each subsequent command. For
example:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;~/Scratch $ ls
Hello
file1 file2
~/Scratch $ echo Bye
Hello
Bye&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A caveat, however, is that the DEBUG trap is triggered once per &lt;em&gt;simple&lt;/em&gt;
command; if you have command lists or control structures, the trap will be
triggered multiple times. For example, using the setup above:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;~/Scratch $ echo 1 &amp;amp;&amp;amp; echo 2; echo 3
Hello
1
Hello
2
Hello
3
~/Scratch $ if [ -e /etc/passwd ]; then echo "/etc/passwd exists"; fi
Hello
Hello
/etc/passwd exists&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;What if we only want to run a command once per composite command, like the
&lt;a href="http://zsh.sourceforge.net/Doc/Release/Functions.html"&gt;&lt;code&gt;preexec&lt;/code&gt;&lt;/a&gt; hook in
&lt;a href="http://en.wikipedia.org/wiki/Z_shell"&gt;zsh&lt;/a&gt;?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Enter &lt;code&gt;PROMPT_COMMAND&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_prompt_command"&gt;PROMPT_COMMAND&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The idea behind &lt;code&gt;PROMPT_COMMAND&lt;/code&gt; is also very simple: if you run&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;echo Bye&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;then Bash will execute &lt;code&gt;echo Bye&lt;/code&gt; before it prints each subsequent prompt (i.e.,
after it has finished executing the previous command line). For example, using
the setup above:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;~/Scratch $ echo 1; echo 2
Hello
1
Hello
2
Hello
Bye&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Note that the DEBUG trap is triggered again for &lt;code&gt;PROMPT_COMMAND&lt;/code&gt;, in addition to
the user-supplied commands.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_combining_the_debug_trap_and_code_prompt_command_code"&gt;Combining the DEBUG trap and &lt;code&gt;PROMPT_COMMAND&lt;/code&gt;&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;By combining the DEBUG trap and &lt;code&gt;PROMPT_COMMAND&lt;/code&gt;, we can now hack Bash to
run some code right before and right after executing a full command. For
example, try adding this to your &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# This will run before any command is executed.&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; PreCommand&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$AT_PROMPT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
  &lt;span class="nb"&gt;unset &lt;/span&gt;AT_PROMPT

  &lt;span class="c"&gt;# Do stuff.&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Running PreCommand&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PreCommand&amp;quot;&lt;/span&gt; DEBUG

&lt;span class="c"&gt;# This will run after the execution of the previous full command line.  We don&amp;#39;t&lt;/span&gt;
&lt;span class="c"&gt;# want it PostCommand to execute when first starting a bash session (i.e., at&lt;/span&gt;
&lt;span class="c"&gt;# the first prompt).&lt;/span&gt;
&lt;span class="nv"&gt;FIRST_PROMPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="k"&gt;function&lt;/span&gt; PostCommand&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;AT_PROMPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$FIRST_PROMPT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;unset &lt;/span&gt;FIRST_PROMPT
    &lt;span class="k"&gt;return&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;

  &lt;span class="c"&gt;# Do stuff.&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Running PostCommand&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PostCommand&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The result:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;~/Scratch $ echo 1; echo 2 &amp;amp;&amp;amp; echo 3
Running PreCommand
1
2
3
Running PostCommand&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This gives rise to some neat applications, such as
&lt;a href="https://github.com/jichuan89/bash-command-timer"&gt;a command timer script&lt;/a&gt; I wrote that
prints out the execution time of each command: &lt;div align="center"&gt;&lt;img
src="/assets/files/bash_command_timer_screenshot.gif" style="max-width: 657px;
width: 100%"&gt;&lt;/div&gt;
Please feel free to
&lt;a href="https://github.com/jichuan89/bash-command-timer"&gt;check it out on GitHub&lt;/a&gt; :)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Happy Bash hacking!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Linux"></category><category term="Featured"></category></entry><entry><title>How X Window Managers Work, And How To Write One (Part I)</title><link href="https://seasonofcode.com/posts/how-x-window-managers-work-and-how-to-write-one-part-i.html" rel="alternate"></link><updated>2014-04-10T01:08:00-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2014-04-10:posts/how-x-window-managers-work-and-how-to-write-one-part-i.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;&lt;!--googleoff: index--&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="sidebarblock"&gt;
&lt;div class="content"&gt;
&lt;div class="title"&gt;Series Contents&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-i.html"&gt;&lt;strong&gt;Part I: Basic Concepts&lt;/strong&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-ii.html"&gt;Part II: Introduction, Setup &amp;amp; Teardown, Initialization, Event Loop&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-iii.html"&gt;Part III: Interaction with Application Windows&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;!--googleon: index--&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Window managers are one of the core components of the modern Linux/BSD desktop.
It is not an exaggeration to say that they define to a large degree our
day-to-day user experience, as they are responsible for deciding how individual
windows look, move around, react to input, and organize themselves. Hence,
almost 30 years since &lt;a href="http://en.wikipedia.org/wiki/Ultrix_Window_Manager"&gt;the
first X window manager&lt;/a&gt;, we still argue over the merits of different window
managers, and new window managers continue to reinvent how we interact with our
digital world.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In this series of posts, I hope to demystify how window managers work, and how
you might go about writing one yourself.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I will be quoting quite heavily from the seminal
&lt;a href="http://www.amazon.com/Programming-Manual-Version-Definitive-Guides/dp/1565920023"&gt;Xlib
Programming Manual (3rd Ed, 1994)&lt;/a&gt; by Adrian Nye and published by O&amp;#8217;Reilly.
Despite its age, it remains amazingly relevant and is the best available
introductory text to the internals of X, which has not changed over the past two
decades as much as you&amp;#8217;d think. Since you could buy the book plus shipping for
less than the price of a cup of coffee, I strongly recommend it to anyone
interested in learning more about X. In addition, its chapter 16 also covers the
basics of window management.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_the_role_of_an_x_window_manager"&gt;The Role of an X Window Manager&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s start with an examination of the role of the window manager in a modern
Linux/BSD desktop environment.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_the_rights_of_x_window_managers"&gt;The Rights of X Window Managers&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Unlike other windowing systems such as Microsoft Windows or Mac OS X, X does not
dictate a window manager or how a window manager should behave. This decision is
to thank for the wild diversity of X window managers we see today.&lt;/p&gt;&lt;/div&gt;
&lt;div class="quoteblock"&gt;
&lt;div class="content"&gt;X is somewhat unusual in that it does not mandate a particular type of window
manager. Its developers have tried to make X itself as free of window management
or user interface policy as possible.&lt;/div&gt;
&lt;div class="attribution"&gt;
&amp;#8212; Xlib Programming Manual §1.2.3
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In fact, it does not even require a window manager to be present at all:&lt;/p&gt;&lt;/div&gt;
&lt;div class="quoteblock"&gt;
&lt;div class="content"&gt;Unlike citizens, the window manager has rights but not responsibilities.
Programs must be prepared to cooperate with any type of window manager or with
none at all [&amp;#8230;].&lt;/div&gt;
&lt;div class="attribution"&gt;
&amp;#8212; Xlib Programming Manual §1.2.3
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is in stark contrast to the integrative approach of other GUI systems. On
Mac OS X and &lt;a href="https://unity.ubuntu.com/"&gt;Unity&lt;/a&gt;, for example, an application could
not possibly function without the window manager, as the latter is responsible
for rendering a part of the application&amp;#8217;s interface (e.g., menus).&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_the_responsibilities_of_x_window_managers"&gt;The Responsibilities of X Window Managers&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As you probably already know, X operates in a server-client model. An X &lt;em&gt;server&lt;/em&gt;
controls one or more physical display devices as well as input devices (mouse,
keyboard, etc.). An application that wants to interact with these devices
assumes the role of an X &lt;em&gt;client&lt;/em&gt;. An X server and its clients may run on the
same computer, in which case they communicate via
&lt;a href="http://en.wikipedia.org/wiki/Unix_domain_socket"&gt;domain sockets&lt;/a&gt;, or on different
computers, in which case they communicate through TCP/IP.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;strong&gt;A window manager is a regular X client.&lt;/strong&gt; It doesn&amp;#8217;t have any superuser
privileges or keys to kernel backdoors; it is a normal user process that is
allowed by the X server to call a set of special APIs. X ensures that no more
than one window manager is running at any given point by denying a client access
to these APIs if another client currently has access. The first client to
attempt to access these APIs always succeeds.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A window manager communicates with the windows it manages through two X
mechanisms: properties and events. We will discuss these in detail in later
sections, but the takeaway is that the communication happens through the X
server, not directly between the window manager and other applications.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is illustrated by the following diagram:&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph" id="role-of-a-window-manager"&gt;&lt;p&gt;&lt;div align="center"&gt;&lt;img
src="https://docs.google.com/drawings/d/1Kv8kYF3IeWnsMSuF04goBPi1WudQV3llyK4R5lu_ips/pub?w=554&amp;h=402"
alt="Role of a Window Manager"
style="max-width: 554px; width: 100%;"&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_how_an_x_window_manager_manages_windows"&gt;How an X Window Manager Manages Windows&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s now dive into the details of how a window manager does its job.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_the_window_hierarchy"&gt;The Window Hierarchy&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When we think about modern GUIs, we usually use the term &lt;em&gt;widgets&lt;/em&gt; or &lt;em&gt;controls&lt;/em&gt;
to refer to UI elements such as buttons, scrollbars, or text boxes, and the term
&lt;em&gt;windows&lt;/em&gt; to refer to a container for such widgets that has its own name and
can be independently moved around, closed, resized, etc..&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;X, however, was designed to be as low-level as possible. The fundamental UI
model that X provides, upon which UI frameworks such as
&lt;a href="http://www.gtk.org/"&gt;GTK+&lt;/a&gt; and &lt;a href="http://qt-project.org"&gt;Qt&lt;/a&gt; are built, is that of an
&lt;em&gt;hierarchy of rectangles&lt;/em&gt;. In X terminology, all top level windows and all UI
elements within are &lt;em&gt;windows&lt;/em&gt;. In other words, a &lt;em&gt;window&lt;/em&gt;, is any rectangular
area that is an unit of user interaction and/or graphic display.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Windows are organized into a tree hierarchy. At the root of the hierarchy is the
&lt;em&gt;root window&lt;/em&gt;, a virtual, invisible window that has the same size as the screen,
and is always present. Top level windows are direct children of the root
window. UI elements within a top level window are descendants of that window.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;div align="center"&gt;&lt;img src="/assets/files/wm_sample_dialog.png" alt="An
example X window" style="max-width: 402px; width: 100%;"&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For example, consider the dialog box above from the &lt;a href="http://www.xfce.org/"&gt;Xfce&lt;/a&gt;
desktop environment. The entire dialog is an X &lt;em&gt;window&lt;/em&gt;. All UI elements in the
dialog box - the magnifying glass icon, the text box, the green down arrow, the
Close and Launch buttons, and the icons inside those buttons - are also X
_window_s.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The whole dialog window is a child of the root window. The magnifying glass
icon, the text box, and the Close and Launch buttons are children of the dialog
window. The green down arrow is a child of the text box window, and the icons in
the Close and Launch buttons are children of those buttons respectively.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;An important thing to note about X windows is that a child window is clipped to
the boundaries of its parent:&lt;/p&gt;&lt;/div&gt;
&lt;div class="quoteblock"&gt;
&lt;div class="content"&gt;A child may be positioned partially or completely outside its parent window, but
output to the child is displayed and input received only in the area where the
child overlaps with the parent.&lt;/div&gt;
&lt;div class="attribution"&gt;
&amp;#8212; Xlib Programming Manual §2.2.2
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For example, if we increase the width of the text box in the dialog above by
2x without changing the size of the dialog box, the portion of the text box that
extends outside of the dialog box will become invisible, and clicking on it will
not send an event to the text box.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A window manager manages top level windows - that is, direct children of the
root window.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="substructure-redirection"&gt;Substructure Redirection&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In the absence of a window manager, when an application wants to do something
with a window - move it, resize it, show/hide it, etc. - its request is directly
processed by the X server, and that&amp;#8217;s the end of that. A window manager,
however, needs to intercept these requests. For example, a window manager may
need to know that a new top level window has been created and displayed, in
order to draw window decorations (e.g. minimize / maximize / close buttons)
around it. It may also need to know that an existing top level window has been
resized, in order to redraw the window decorations to reflect the change.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The mechanism that allows a window manager to intercept such requests is called
&lt;em&gt;substructure redirection&lt;/em&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is how substructure redirection works. Suppose we have a window &lt;em&gt;W&lt;/em&gt;. If a
program &lt;em&gt;M&lt;/em&gt; registers for substructure redirection on &lt;em&gt;W&lt;/em&gt;, a matching request to
modify any direct child window of &lt;em&gt;W&lt;/em&gt; will &lt;em&gt;not&lt;/em&gt; be executed by the X server.
Instead, the X server redirects this request to the program &lt;em&gt;M&lt;/em&gt;, which can do
whatever it wants with the request, including denying the request outright or
granting the request with modifications. More formally,&lt;/p&gt;&lt;/div&gt;
&lt;div class="quoteblock"&gt;
&lt;div class="content"&gt;The &lt;em&gt;structure&lt;/em&gt;, as the term is used here, is the location, size, stacking
order, border width, and mapping status of a window. The &lt;em&gt;substructure&lt;/em&gt; is all
these statistics about the children of a particular window. This is the complete
set of information about screen layout that the window manager might need in
order to implement its policy. &lt;em&gt;Redirection&lt;/em&gt; means that an event is sent to the
client selecting redirection (usually the window manager), and the original
structure−changing request is not executed.&lt;/div&gt;
&lt;div class="attribution"&gt;
&amp;#8212; Xlib Programming Manual §16.2
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Note that only direct children of a window &lt;em&gt;W&lt;/em&gt; is affected by substructure
redirection on &lt;em&gt;W&lt;/em&gt;, not any windows further down the hierarchy.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This gets interesting when we consider substructure redirection on the root
window:&lt;/p&gt;&lt;/div&gt;
&lt;div class="quoteblock"&gt;
&lt;div class="content"&gt;When the window manager selects &lt;code&gt;SubstructureRedirectMask&lt;/code&gt; on the root window,
an attempt by any other client to change the configuration of any child of the
root window will fail. Instead an event describing the layout change request
will be sent to the window manager. The window manager then reads the event and
determines whether to honor the request, modify it, or deny it completely. If it
decides to honor the request, it calls the routine that the client called that
triggered the event with the same arguments. If it decides to modify the
request, it calls the same routine but with modified arguments.&lt;/div&gt;
&lt;div class="attribution"&gt;
&amp;#8212; Xlib Programming Manual §16.2
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In other words, a window manager must register for substructure redirection on
the root window, which causes all creation, destruction, reconfiguration etc. of
top level windows - which are direct children of the root window - to be routed
to the window manager. This is the magic hook into the X server that window
managers rely on to do their job.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This relationship is shown in the following diagram:
&lt;div align="center"&gt;&lt;img
src="https://docs.google.com/drawings/d/1ykdjiN-__H5-aWjic73c23K6g2MguBKLgwh9C2n-I5k/pub?w=602&amp;amp;h=273"
alt="Role of a Window Manager"
style="max-width: 602px; width: 100%;"&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally, the X server only allows one running program to register for
substructure redirection on any given window at any given time. An attempt to
register for substructure redirection on a window will fail if another X client
has already done the same on the same window, and has not unregistered,
disconnected from the X server, or crashed. Since all window managers must
register for substructure redirection on the root window, this latter acts as a
locking mechanism that prevents two or more window managers from running
simultaneously on the same screen.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_reparenting"&gt;Reparenting&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In the example dialog box above, we see a title bar with, for example, little
buttons for minimizing, maximizing, and closing the window. These UI elements
are not created by the application, but by the window manager, via a process
known as &lt;em&gt;reparenting&lt;/em&gt; or &lt;em&gt;framing&lt;/em&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="quoteblock"&gt;
&lt;div class="content"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A window manager can decorate [top level] windows on the screen with titlebars
and place little boxes on the titlebar with which the window can be moved or
resized. This is only one possibility [&amp;#8230;].&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To do this, the window manager creates a child of the root somewhat larger than
the top level window of the application. Then it calls
&lt;a href="http://manpages.ubuntu.com/manpages/en/man3/XReparentWindow.3.html"&gt;&lt;code&gt;XReparentWindow()&lt;/code&gt;&lt;/a&gt;,
specifying the top level window of the application as &lt;code&gt;&lt;em&gt;win&lt;/em&gt;&lt;/code&gt; and the new parent
[window it just created] as &lt;code&gt;&lt;em&gt;parent&lt;/em&gt;&lt;/code&gt;. &lt;code&gt;&lt;em&gt;win&lt;/em&gt;&lt;/code&gt; and all its descendants will
then be descendants of &lt;code&gt;&lt;em&gt;parent&lt;/em&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="attribution"&gt;
&amp;#8212; Xlib Programming Manual §16.3
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In other words, if we were to run an X application without a window manager
present, the top level window of the application would be a direct child of the
root window. With a window manager running, however, the top level window of the
application may be &lt;em&gt;reparented&lt;/em&gt; by the window manager; it becomes a child of a
frame window which is created by the window manager, and which is itself a
direct child of the root window. The window manager can add other UI elements
inside this frame window alongside the application&amp;#8217;s top level window as it sees
fit.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Therefore, I&amp;#8217;ve kind of lied to you several paragraphs ago: the dialog box shown
earlier is really a child window within a frame window created by
&lt;a href="http://www.xfce.org"&gt;Xfce&lt;/a&gt;'s window manager, Xfwm, along with other UI elements
for window management:
&lt;div align="center"&gt;&lt;img
src="https://docs.google.com/drawings/d/1JIaZeVZBB2Yu5t8e7l0Euln_ix61bg-pGEG086P-cLg/pub?w=412&amp;amp;h=248"
style="max-width: 412px; width: 100%;"&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Reparenting is what allows different window managers to draw different window
decorations, and thereby achieve a consistent look-and-feel across windows.
However, there are also window managers that do &lt;em&gt;not&lt;/em&gt; reparent at all: these are
called &lt;em&gt;non-reparenting&lt;/em&gt; window managers. There are two reasons why a window
manager would not want to reparent:&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
If a window manager does not draw window decorations around top level
   windows , it obviously has no need to reparent them. Examples:
   &lt;a href="http://xmonad.org"&gt;xmonad&lt;/a&gt;, &lt;a href="http://dwm.suckless.org"&gt;dwm&lt;/a&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Compositing window managers do not always need to reparent windows; we will
   discuss why below. Example: &lt;a href="http://www.compiz.org/"&gt;Compiz&lt;/a&gt;. This is not true
   for all compositing window managers, however; for example, GNOME&amp;#8217;s default
   window manager, &lt;a href="http://github.com/GNOME/mutter/"&gt;Mutter&lt;/a&gt;, is a reparenting
   comopositing window manager.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s now consider substructure redirection in the context of reparenting. When
a top level window &lt;em&gt;W&lt;/em&gt; is first shown (&lt;em&gt;map&lt;/em&gt;'ped in X jargon), the window manager
is notified because it has registered for substructure redirection on the root
window, and a top level window is a direct child of the root window. It then
creates a frame &lt;em&gt;F&lt;/em&gt; and reparents &lt;em&gt;W&lt;/em&gt;, so that &lt;em&gt;W&lt;/em&gt; becomes a child of &lt;em&gt;F&lt;/em&gt;, which
itself is a child of the root window. But since now &lt;em&gt;W&lt;/em&gt; is no longer a direct
child of the root window, the window manager will no longer be able to intercept
changes to &lt;em&gt;W&lt;/em&gt;!&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Therefore, a reparenting window manager must also subsequently register for
substructure redirection on each frame window it creates.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_compositing"&gt;Compositing&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Compositing window managers are a relatively new development. Compositing
support in X  was added in late 2004, a full decade after the last edition of
&lt;a href="http://www.amazon.com/Programming-Manual-Version-Definitive-Guides/dp/1565920023"&gt;Xlib
Programming Manual&lt;/a&gt;. The first compositing window managers,
&lt;a href="http://www.xfce.org"&gt;Xfwm&lt;/a&gt; and &lt;a href="http://www.compiz.org/"&gt;Compiz&lt;/a&gt;, launched in early
2005.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So, what exactly does a compositing window manager do?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In our discussion above on substructure redirection and reparenting, we saw how
a window manager can respond to various requests for a top level window - to
display/hide it (&lt;em&gt;map&lt;/em&gt;/&lt;em&gt;unmap&lt;/em&gt; in X jargon), to resize it, to move it, etc.. But
we didn&amp;#8217;t talk about how to deal with what&amp;#8217;s &lt;em&gt;inside&lt;/em&gt; the top level windows.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Indeed, from the perspective of the window manager, top level windows are black
boxes; they each manage their own descendant windows (UI elements), perhaps
through a framework such as &lt;a href="http://www.gtk.org"&gt;GTK+&lt;/a&gt; or
&lt;a href="http://qt-project.org/"&gt;Qt&lt;/a&gt;, and the window manager has no right to interfere
there. The application that creates a top level window is responsible for
rendering and handling events for any descendant windows (UI elements), and does
so directly through X. This is shown in &lt;a href="#role-of-a-window-manager"&gt;the first diagram above&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As the computing power of graphics hardware grew, so did people&amp;#8217;s expectations
from their window managers. With hardware acceleration, it became possible to
build much more computationally intensive user interfaces, such as the
(in)famous Desktop Cube in &lt;a href="http://www.compiz.org"&gt;Compiz&lt;/a&gt;:
&lt;div align="center"&gt;&lt;img src="/assets/files/wm_compiz.png"
style="max-width: 640px; width: 100%;"&gt;&lt;/div&gt;
or the Shift Switcher:
&lt;div align="center"&gt;&lt;img src="/assets/files/wm_compiz_2.png"
style="max-width: 640px; width: 100%;"&gt;&lt;/div&gt;
Let&amp;#8217;s take a moment to think about how we can implement an interface such as the
Shift Switcher above. When the user triggers this interface, we need to:&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
Render each top level window and all its descendant windows (UI elements) to
   an off-screen, in-memory buffer, instead of directly to the hardware.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Transform (rotate, contort, etc.) each buffer according to our design.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Composite the transformed buffers into a final buffer along with a background
   and any other floating UI elements else we need to display.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Create an &lt;em&gt;overlay&lt;/em&gt; window that covers the entire screen and hides all other
   windows.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Render the final buffer into the overlay window.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;There are a number of challenges:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
We must be able to retrieve the displayed contents of top level windows.
  However, as we described earlier, top level windows render their contents
  directly through X, without going through the window manager.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
We need to update our interface in real time as the contents of the
  top level windows change. However, top level windows do not notify window
  managers when their contents change, again because they render their contents
  directly through X.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
A top level window &lt;em&gt;A&lt;/em&gt; may overlap with another top level window
  &lt;em&gt;B&lt;/em&gt; below, which means a portion of &lt;em&gt;B&lt;/em&gt; isn&amp;#8217;t currently displayed. Our
  interface, however, must capture the &lt;em&gt;full&lt;/em&gt; rendering of &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt;,
  regardless of overlapping regions.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
All this complex compositing process is computationally intensive and requires
  hardware acceleration to function adequately.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It is clear that none of this would be possible without some heavy cooperation
from the X server. Enter the
&lt;a href="http://cgit.freedesktop.org/xorg/proto/compositeproto/tree/compositeproto.txt"&gt;Composite
extension&lt;/a&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="quoteblock"&gt;
&lt;div class="content"&gt;Many user interface operations would benefit from having pixel contents of
window hierarchies available without respect to sibling and antecedent clipping.
In addition, placing control over the composition of these pixel contents into a
final screen image in an external application will enable a flexible system for
dynamic application content presentation.&lt;/div&gt;
&lt;div class="attribution"&gt;
&amp;#8212; X Composite Extension
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The Composite extension provides a mechanism to request the X server not to
render a specific window and its descendants directly to hardware, but to a
special buffer maintained by the X server, and do so without the normal clipping
and overlap computations. This buffer can then be read and used by the client
that made the request.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;That&amp;#8217;s exactly what a compositing window manager does: it will ask X to render
each top level window to an off-screen, in-memory buffer and composite the
results into an overlay window itself. And it needs to do this not just for
fancy task switcher interfaces as in our example, but also to achieve effects
like translucency, animations, soft shadows, and the like.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is illustrated in the following diagram:
&lt;div align="center"&gt;&lt;img
src="https://docs.google.com/drawings/d/1eK05Uzlr2ix4NpsiEBUu42IwZ3DEjX8MvYTiE3-chqA/pub?w=573&amp;amp;h=509"
style="max-width: 573px; width: 100%;"&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s end this section by considering whether a compositing window manager
should reparent top level windows.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Since a compositing window manager already knows the size and position of all
top level windows, it&amp;#8217;s easy for it to just draw window decorations during
compositing into the overlay window using graphics operations (e.g. OpenGL),
without ever creating an actual X frame window and reparenting. Some compositing
window managers do operate this way.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;On the other hand, a window manager may need to support both a compositing and a
non-compositing mode, for compatibility with older or unsupported graphics
hardware. In this case, it needs to implement reparenting and frame windows for
non-compositing mode anyway, so additionally implementing drawing window
decorations using graphics operations becomes redundant. This is why may other
compositing window managers still choose to reparent.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_ready_for_some_code"&gt;Ready For Some Code?&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you&amp;#8217;ve read everything up to this point, you&amp;#8217;re probably holding back the
urge to cry out "&lt;em&gt;Enough talk - show me some code!&lt;/em&gt;" I don&amp;#8217;t blame you.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In &lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-ii.html"&gt;the
next installment&lt;/a&gt; in this series, I will walk you through a basic
implementation of a reparenting, non-compositing window manager. Impatient?
Check out the code &lt;a href="https://github.com/jichu4n/basic_wm"&gt;on GitHub&lt;/a&gt;!&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;strong&gt;Next chapter:&lt;/strong&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-ii.html"&gt;&lt;strong&gt;How X
Window Managers Work, And How To Write One (Part II)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="sidebarblock"&gt;
&lt;div class="content"&gt;
&lt;div class="title"&gt;Series Contents&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-i.html"&gt;&lt;strong&gt;Part I: Basic Concepts&lt;/strong&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-ii.html"&gt;Part II: Introduction, Setup &amp;amp; Teardown, Initialization, Event Loop&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/posts/how-x-window-managers-work-and-how-to-write-one-part-iii.html"&gt;Part III: Interaction with Application Windows&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Featured"></category><category term="Window Manager"></category></entry><entry><title>The Most Popular Fonts On The Web: A Study</title><link href="https://seasonofcode.com/posts/the-most-popular-fonts-on-the-web-a-study.html" rel="alternate"></link><updated>2014-04-04T23:04:00-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2014-04-04:posts/the-most-popular-fonts-on-the-web-a-study.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;&lt;link rel="image_src"
href="https://docs.google.com/spreadsheets/d/1LxHdYqTqK7b9Subq2F23IHRrhEYoYm7xdVPQMZexaNc/embed/oimg?id=1LxHdYqTqK7b9Subq2F23IHRrhEYoYm7xdVPQMZexaNc&amp;oid=65057078&amp;zx=ey1naahah70j"&gt;
If you&amp;#8217;ve ever worked on a web site, you already know that choosing the right
fonts is one of the most important aesthetic decisions in the design of a site.
But, like all aesthetic decisions, it is a highly subjective.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I decided to try to bring a little bit of objectivity into the equation by
finding out, empirically, what fonts the most popular sites on the web are using
today.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_methodology"&gt;Methodology&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I wrote a Python program that crawls the front page of the 100,000 most popular
web sites according to &lt;a href="http://www.alexa.com/topsites"&gt;Alexa&amp;#8217;s top sites list&lt;/a&gt;.
It parses the HTML using
&lt;a href="http://www.crummy.com/software/BeautifulSoup/"&gt;BeautifulSoup&lt;/a&gt;, and parses all
in-line and linked CSS stylesheets using &lt;a href="http://cthedot.de/cssutils/"&gt;cssutils&lt;/a&gt;.
It then looks for &lt;code&gt;font&lt;/code&gt; and &lt;code&gt;font-family&lt;/code&gt; rules in the CSS rules, and stores
the normalized form of each font in those rules in order. The result is kept in
a &lt;a href="https://sqlite.org"&gt;SQLite&lt;/a&gt; database for analysis.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This all sounds pretty straightforward, but in fact it took me two weeks to
build a crawler that doesn&amp;#8217;t choke on all the crazy crap people throw at
browsers. I will write up some of the more interesting cases in a separate post.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The final crawl success rate was about 96%. The size of all HTML and stylesheets
downloaded was about 30GB.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_the_most_popular_first_choice_fonts"&gt;The Most Popular First-Choice Fonts&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, let&amp;#8217;s take a look at the first-choice/most preferred fonts, i.e., the
ones that appear first in &lt;code&gt;font-family&lt;/code&gt; rules. These fonts most closely
represent the intention of the web site designers without compatibility
compromises.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For each font, we calculate the number of distinct web sites that have at least
one CSS &lt;code&gt;font&lt;/code&gt; or &lt;code&gt;font-family&lt;/code&gt; rule that lists the font as the first choice.
This means that if a site has two rules, one listing Arial and another
listing Times, it will count towards both. Thus, the numbers add up to much
higher than the total number of sites.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Without further ado, here&amp;#8217;s the breakdown of the top fonts on the web:
&lt;div align="center"&gt;&lt;iframe
height=620
style="max-width: 610px; width: 100%"
src="//docs.google.com/spreadsheets/d/1LxHdYqTqK7b9Subq2F23IHRrhEYoYm7xdVPQMZexaNc/gviz/chartiframe?oid=65057078"
seamless frameborder=0 scrolling=yes&gt;&lt;/iframe&gt;&lt;/div&gt;
(The chart is interactive - hover/click to see actual numbers.)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A couple of observations:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Sans-serif fonts dominate the web.&lt;/strong&gt; The top 25 fonts list only includes 4
  serif fonts, compared to 16 sans-serif fonts. The most popular serif-font,
  Georgia, ranks #4 on the list with about 20% of sites.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Monospace fonts get no love.&lt;/strong&gt; Most sites don&amp;#8217;t bother
  specifying a custom monospace font; the most common monospace font
  specification just uses the browser default (12%). The most popular monospace
  font, Monaco, is featured on 7.2% of sites. Both of these are quite high, in
  fact, considering that we only crawl the front page of these sites.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;The most popular fonts of each family:&lt;/strong&gt;
&lt;/p&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Sans-serif:&lt;/strong&gt; Arial (#1, 62%)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Serif:&lt;/strong&gt; Georgia (#4, 20%)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Monospace:&lt;/strong&gt; Monaco (#11, 7.2%)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Old Microsoft fonts still reign over the web.&lt;/strong&gt; The top non-Microsoft font,
  Helvetica Neue, ranks #6 with an impressive 18% of top web sites.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;&lt;a href="http://fortawesome.github.io/Font-Awesome/"&gt;Font Awesome&lt;/a&gt; is awesome&lt;/strong&gt;. About
  4.6% of the top 100K sites already use it for universal icons.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;The Chinese web is on the rise.&lt;/strong&gt; 3 out of the top 25 fonts are Chinese fonts,
  compared to 21 Latin fonts (and 1 symbol font). No other scripts made their
  way into the list.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_what_if_we_considered_8230"&gt;What If We Considered&amp;#8230;&lt;/h4&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Fonts in all positions&lt;/strong&gt;: (&lt;a href="https://docs.google.com/spreadsheets/d/1LxHdYqTqK7b9Subq2F23IHRrhEYoYm7xdVPQMZexaNc/gviz/chartiframe?oid=940843634"&gt;graph&lt;/a&gt;) not much difference.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;The top 1,000 web sites only&lt;/strong&gt;: (&lt;a href="https://docs.google.com/spreadsheets/d/1LxHdYqTqK7b9Subq2F23IHRrhEYoYm7xdVPQMZexaNc/gviz/chartiframe?oid=1208179553"&gt;graph&lt;/a&gt;) even more Arial (#1, 74%).
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_the_most_popular_heading_fonts"&gt;The Most Popular Heading Fonts&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Next, let&amp;#8217;s look at first-choice fonts used in headings or titles.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I used a really crude metric to determine whether a CSS rule matches a heading:
whether the CSS selector is for an &lt;code&gt;H1&lt;/code&gt;&amp;#8230;&lt;code&gt;H6&lt;/code&gt; tag or contains the strings
"heading" or "title". While this finds only a subset of actual headings, it is
not a bad approximation as it matches rules on about 58% of the top 100,000
web sites.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s start with the graph:
&lt;div align="center"&gt;&lt;iframe
height=620
style="max-width: 610px; width: 100%"
src="//docs.google.com/spreadsheets/d/1LxHdYqTqK7b9Subq2F23IHRrhEYoYm7xdVPQMZexaNc/gviz/chartiframe?oid=1659247262"
seamless frameborder=0 scrolling=yes&gt;&lt;/iframe&gt;&lt;/div&gt;
Observations:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Header fonts are more diverse.&lt;/strong&gt; While Microsoft fonts still reign supreme, a
  number or more exotic fonts are also on the list. In terms of distribution,
  there&amp;#8217;s a much longer tail. It may be a sign that designers pay a lot
  more attention to fonts used in headings.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Serif fonts are more popular in headings than elsewhere.&lt;/strong&gt; While Arial still
  claims to top spot with 27.31% of sites, the top serif font, Georgia, rises to
  2nd place with 9% of sites.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;No monospace fonts in headings.&lt;/strong&gt; Not surprising.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Among Chinese fonts, &lt;strong&gt;宋体 is more commonly used for body text, while 雅黑 (or
  Yahei) is more commonly used for heading text.&lt;/strong&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_concluding_thoughts"&gt;Concluding Thoughts&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Arial and friends are the &lt;a href="http://screenfont.ca/fonts/today/interim/"&gt;most&lt;/a&gt;
&lt;a href="http://pxlnv.com/blog/guaahhhhhhh-come-on/"&gt;hated&lt;/a&gt;
&lt;a href="http://www.prepressure.com/fonts/interesting/most-hated"&gt;fonts&lt;/a&gt;
&lt;a href="http://enjoytherandom.com/hipster-hitler-hates-arial/"&gt;ever&lt;/a&gt;. Quoting
&lt;a href="http://www.marksimonson.com/notebook/view/the-scourge-of-arial"&gt;The Scourge of
Arial&lt;/a&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="quoteblock"&gt;
&lt;div class="content"&gt;Despite its pervasiveness, a professional designer would rarely - at least for
the moment - specify Arial.&lt;/div&gt;
&lt;div class="attribution"&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And yet, Arial is still the default font on the vast majority of sites on
the web, followed closely by its friends. Why?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Quoting &lt;a href="http://www.64notes.com/design/stop-helvetica-arial/"&gt;Stop Using Arial &amp;amp;
Helvetica&lt;/a&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="quoteblock"&gt;
&lt;div class="content"&gt;Some people actually have a reason to use them but most use it mindlessly - just
because everyone else does. Often, no thought is given to design of the site,
let alone typography.&lt;/div&gt;
&lt;div class="attribution"&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is pretty sad. Paraphrasing
&lt;a href="http://www.dtelepathy.com/blog/graveyard/stop-using-lame-fonts"&gt;Stop Using Lame
Fonts&lt;/a&gt;, a good font stack has the potential to really make a site design shine,
and it&amp;#8217;s a shame web designers aren&amp;#8217;t exploiting this opportunity.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_caveats"&gt;Caveats&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;There are a couple of caveats with this dataset.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, I am only surveying the landing page of each site. For many sites,
notably those whose main interface is hidden behind a login (Facebook, Evernote,
etc.), we may not be finding the styles that matter most to users. However, I
figured since it would be pretty poor design to build a landing page that is
aesthetically inconsistent with the rest of the site, it is not very likely that
the font selection on the landing page would be too different from the fonts
used elsewhere on the site. Of course, without creating fake accounts on these sites,
we have no way to verify.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The numbers are not weighted by prominence on the web pages. One could argue
that the font of the main body text on a page should carry more weight than that
of the tiny disclaimer text at the bottom which no one reads. It would be tricky
to determine what the right weight function is though.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The numbers are not weighted by the prominence of the web sites. For example, we
could make it so that Google&amp;#8217;s use of Arial would get more weight than some
random obscure site&amp;#8217;s use of Arial, as Google&amp;#8217;s choice impacts many more users
and was probably the result of deliberation by a team of expert designers.
Again, it&amp;#8217;s not entirely obvious how the weights should be assigned.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I am only looking at CSS rules in &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tags or linked stylesheets. That
means I am ignoring &lt;code&gt;style="&amp;#8230;"&lt;/code&gt; attributes in tags, &lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt; elements, or
dynamically assigned fonts (i.e., through JavaScript). I would be surprised if
this turns out to be a big loss though.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_next_steps"&gt;Next Steps&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I can think of quite a few other useful questions one might find the answer to
from this dataset:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
What are the most common font pairings?
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
What are the popular choices for heading fonts, given that I&amp;#8217;ve chosen font X
  as my body text font?
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
What are the most common fonts on news sites/forums/productivity web
  apps/social media sites?
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Is there any correlation between font choice and site popularity?
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;What do you think?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Please feel free to &lt;a href="https://www.mediafire.com/?xqrk731716v078l"&gt;download&lt;/a&gt; the top
100 first-choice fonts as a CSV file.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Featured"></category><category term="Misc"></category></entry><entry><title>Python: Multiprocessing and Exceptions</title><link href="https://seasonofcode.com/posts/python-multiprocessing-and-exceptions.html" rel="alternate"></link><updated>2014-03-10T22:54:00-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2014-03-10:posts/python-multiprocessing-and-exceptions.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Python&amp;#8217;s
&lt;a href="http://docs.python.org/3/library/multiprocessing.html"&gt;&lt;code&gt;multiprocessing&lt;/code&gt;&lt;/a&gt; module
provides an interface for spawning and managing child processes that is familiar
to users of the &lt;a href="http://docs.python.org/3/library/threading.html"&gt;&lt;code&gt;threading&lt;/code&gt;&lt;/a&gt;
module. One problem with the &lt;code&gt;multiprocessing&lt;/code&gt; module, however, is that
&lt;strong&gt;exceptions in spawned child processes don&amp;#8217;t print stack traces&lt;/strong&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Consider the following snippet:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;somelib&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;somelib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;somefunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;and the following error message:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File "test.py", line 9, in &amp;lt;module&amp;gt;
    print(pool.map(f, range(5)))
  File "/usr/lib/python3.3/multiprocessing/pool.py", line 228, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
  File "/usr/lib/python3.3/multiprocessing/pool.py", line 564, in get
    raise self._value
ZeroDivisionError: division by zero&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;What triggered the &lt;code&gt;ZeroDivisionError&lt;/code&gt;? Did &lt;code&gt;somelib.somefunc(x)&lt;/code&gt; return 0, or
did some other computation in &lt;code&gt;somelib.somefunc()&lt;/code&gt; cause the exception? You will
notice that we only see the stack trace of the main process, whereas the stack
trace of the code that actually triggered the exception in the worker processes
is not shown at all.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Luckily, Python provides a handy
&lt;a href="http://docs.python.org/3/library/traceback.html"&gt;&lt;code&gt;traceback&lt;/code&gt;&lt;/a&gt; module for working
with exceptions and stack traces. All we have to do is catch the exception
inside the worker process, and print it. Let&amp;#8217;s change the code above to read:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;somelib&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;somelib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;somefunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Caught exception in worker thread (x = &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;):&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# This prints the type, value, and stack trace of the&lt;/span&gt;
    &lt;span class="c"&gt;# current exception being handled.&lt;/span&gt;
    &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_exc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now, if you run the same code again, you will see something like this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;Caught exception in worker thread (x = 0):
Traceback (most recent call last):
  File "test.py", line 7, in f
    return 1 / somelib.somefunc(x)
  File "/path/to/somelib.py", line 2, in somefunc
    return 1 / x
ZeroDivisionError: division by zero

Traceback (most recent call last):
  File "test.py", line 16, in &amp;lt;module&amp;gt;
    print(pool.map(f, range(5)))
  File "/usr/lib/python3.3/multiprocessing/pool.py", line 228, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
  File "/usr/lib/python3.3/multiprocessing/pool.py", line 564, in get
    raise self._value
ZeroDivisionError: division by zero&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The printed traceback reveals &lt;code&gt;somelib.somefunc()&lt;/code&gt; to be the actual culprit.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In practice, you may want to save the exception and the stack trace somewhere.
For that, you can use the
&lt;a href="http://docs.python.org/3/library/traceback.html#traceback.print_exc"&gt;&lt;code&gt;file&lt;/code&gt;&lt;/a&gt;
argument of
&lt;a href="http://docs.python.org/3/library/traceback.html#traceback.print_exc"&gt;&lt;code&gt;print_exc&lt;/code&gt;&lt;/a&gt;
in combination with
&lt;a href="http://docs.python.org/3/library/io.html?highlight=stringio#io.StringIO"&gt;&lt;code&gt;StringIO&lt;/code&gt;&lt;/a&gt;.
For example:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;  &lt;span class="c"&gt;# Import StringIO in Python 2&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Work&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;exc_buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_exc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;exc_buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;Uncaught exception in worker process:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;exc_buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>C++: Access Specifiers and Overriding</title><link href="https://seasonofcode.com/posts/c-access-specifiers-and-overriding.html" rel="alternate"></link><updated>2014-03-01T00:19:00-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2014-03-01:posts/c-access-specifiers-and-overriding.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Consider the following C++ code:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;B::f()&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;protected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C::f()&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// This is NOT legal:&lt;/span&gt;
  &lt;span class="c1"&gt;//   b-&amp;gt;f();&lt;/span&gt;
  &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// Nor is this:&lt;/span&gt;
  &lt;span class="c1"&gt;//   c-&amp;gt;f();&lt;/span&gt;

  &lt;span class="c1"&gt;// Why is this legal?&lt;/span&gt;
  &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// Prints &amp;quot;B::f()&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// Prints &amp;quot;C::f()&amp;quot;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;My first reaction, and perhaps yours too, is that this code shouldn&amp;#8217;t be legal.
The base class &lt;code&gt;A&lt;/code&gt; defines a public pure virtual method &lt;code&gt;f()&lt;/code&gt; that must be
overridden in derived classes. But the &lt;code&gt;f()&lt;/code&gt; implementations in both derived
classes are non-public; &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; actually &lt;em&gt;don&amp;#8217;t&lt;/em&gt; conform to the interface of
the base class (unless casted to the base class), as shown in the first block in
&lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It turns out, however, that in C++ a method in a derived class overrides a
method in a base class &lt;strong&gt;regardless of the access specifiers of the two methods&lt;/strong&gt;.
In other words, it does not matter whether the method is declared in the base
class as &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt;, nor does it matter how the method
is declared in the derived class; as long as they have the same signature, the
method in the inherit class always overrides the method in the base class:&lt;/p&gt;&lt;/div&gt;
&lt;div class="quoteblock"&gt;
&lt;div class="content"&gt;If a virtual member function &lt;code&gt;vf&lt;/code&gt; is declared in a class &lt;code&gt;Base&lt;/code&gt; and in a class
&lt;code&gt;Derived&lt;/code&gt;, derived directly or indirectly from &lt;code&gt;Base&lt;/code&gt;, a member function &lt;code&gt;vf&lt;/code&gt;
with &lt;strong&gt;the same name&lt;/strong&gt;, &lt;strong&gt;parameter-type-list&lt;/strong&gt; (8.3.5), &lt;strong&gt;cv-qualification&lt;/strong&gt;, and
&lt;strong&gt;ref- qualifier&lt;/strong&gt; (or absence of same) as &lt;code&gt;Base::vf&lt;/code&gt; is declared, then
&lt;code&gt;Derived::vf&lt;/code&gt; is also virtual (whether or not it is so declared) and &lt;strong&gt;it
&lt;em&gt;overrides&lt;/em&gt; &lt;code&gt;Base::vf&lt;/code&gt;&lt;/strong&gt;.&lt;/div&gt;
&lt;div class="attribution"&gt;
&amp;#8212; C++ standard §10.3.2
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;(Emphasis mine.)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You will notice that access specifiers&amp;#8201;&amp;#8212;&amp;#8201;&lt;code&gt;public&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, etc.&amp;#8201;&amp;#8212;&amp;#8201;are
specifically omitted from the list of criteria for determining an override
relationship. Thus, the above code works exactly as if both &lt;code&gt;B::f()&lt;/code&gt; and
&lt;code&gt;C::f()&lt;/code&gt; had been declared &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Another consequence of this rather bizarre omission is that the language
actually allows you to &lt;code&gt;public&lt;/code&gt;-ly inherit from a base class, and yet &lt;em&gt;not&lt;/em&gt;
conform to its public interface unless casted to the base class, as illustrated
in the first block in &lt;code&gt;main&lt;/code&gt; above. Or, from the derived class&amp;#8217;s perspective,
the language allows clients to legally access methods explicitly marked
&lt;code&gt;private&lt;/code&gt; or &lt;code&gt;protected&lt;/code&gt; through a cast to the base class.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So, accidental omission or well thought-out design decision? Any ideas?&lt;/p&gt;&lt;/div&gt;
</summary><category term="C++"></category></entry><entry><title>How To Set Default Fonts and Font Aliases on Linux</title><link href="https://seasonofcode.com/posts/how-to-set-default-fonts-and-font-aliases-on-linux.html" rel="alternate"></link><updated>2014-02-22T01:32:00-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2014-02-22:posts/how-to-set-default-fonts-and-font-aliases-on-linux.html</id><summary type="html">&lt;div class="sect3"&gt;
&lt;h4 id="_font_woes"&gt;Font Woes&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It&amp;#8217;s fairly straightforward to set the default font used in native apps on a
modern Linux desktop, or the default fonts used to render web pages in your
browser of choice.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;But if you&amp;#8217;re reading this, you probably know that that&amp;#8217;s far from the end of
the story. You might have noticed that Firefox and Chrome rudely ignore your
font settings for many websites. This is because many (if not most) popular
sites, including &lt;a href="http://www.google.com"&gt;Google&lt;/a&gt;, &lt;a href="http://www.yahoo.com"&gt;Yahoo&lt;/a&gt;,
&lt;a href="http://www.facebook.com"&gt;Facebook&lt;/a&gt; or &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt;, specify
preferred fonts for text:&lt;/p&gt;&lt;/div&gt;
&lt;div class="tableblock"&gt;
&lt;table rules="none"
style="margin-left:auto; margin-right:auto;"
width="80%"
frame="void"
cellspacing="0" cellpadding="4"&gt;
&lt;col width="16%" /&gt;
&lt;col width="83%" /&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left" valign="top"&gt; Site                  &lt;/th&gt;
&lt;th align="left" valign="top"&gt; Font Specification&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Google&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;&lt;code&gt;arial, sans-serif&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Yahoo&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;&lt;code&gt;Helvetica Neue, Helvetica, Arial&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Facebook&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;&lt;code&gt;lucida grande, tahoma, verdana, arial, sans-serif&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;GitHub&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;&lt;code&gt;Helvetica, arial, freesans, clean, sans-serif&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;(Retrieved on 02/21/2014)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You might immediately notice that the most commonly used fonts on these sites,
Arial and Helvetica, are fonts that come bundled with Microsoft Windows, and are
most likely &lt;em&gt;not&lt;/em&gt; installed on your Linux system. In this case, what font is
&lt;em&gt;actually&lt;/em&gt; used is anyone&amp;#8217;s guess. If they &lt;em&gt;are&lt;/em&gt; installed (e.g., via a package
like &lt;a href="https://aur.archlinux.org/packages/ttf-ms-fonts/"&gt;ttf-ms-fonts&lt;/a&gt; or directly
copied from a Windows machine), well, you still probably want to display your
favorite font instead :)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So, let&amp;#8217;s find out what your default fonts and aliases are with &lt;code&gt;fc-match&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; family in serif sans-serif monospace Arial Helvetica Verdana &lt;span class="s2"&gt;&amp;quot;Times New Roman&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Courier New&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$family&lt;/span&gt;&lt;span class="s2"&gt;: &amp;quot;&lt;/span&gt;
  &lt;span class="nb"&gt;fc&lt;/span&gt;-match &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$family&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is what I get on my machine by default:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;serif: DejaVuSerif.ttf: "DejaVu Serif" "Book"
sans-serif: DejaVuSans.ttf: "DejaVu Sans" "Book"
monospace: DejaVuSansMono.ttf: "DejaVu Sans Mono" "Book"
Arial: DejaVuSans.ttf: "DejaVu Sans" "Book"
Helvetica: n019003l.pfb: "Nimbus Sans L" "Regular"
Verdana: DejaVuSans.ttf: "DejaVu Sans" "Book"
Times New Roman: DejaVuSerif.ttf: "DejaVu Serif" "Book"
Courier New: DejaVuSansMono.ttf: "DejaVu Sans Mono" "Book"&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_font_configuration_files"&gt;Font Configuration Files&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So, assuming you&amp;#8217;ve installed your fonts of choice (via a package, copying to
&lt;code&gt;/usr/share/fonts&lt;/code&gt; or &lt;code&gt;~/.fonts&lt;/code&gt; - please verify with the &lt;code&gt;fc-list&lt;/code&gt; command),
how do you set them as default in all apps and web sites?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Well, there are two places where fonts are configured: system-wide configuration
resides in &lt;code&gt;/etc/fonts/&lt;/code&gt;, and per-user configs are stored in
&lt;code&gt;~/.config/fontconfig/fonts.conf&lt;/code&gt; (note that this used to be &lt;code&gt;~/.fonts.conf&lt;/code&gt;
before &lt;code&gt;fontconfig&lt;/code&gt; 2.10.1). For simplicity&amp;#8217;s sake, we&amp;#8217;ll do it in
&lt;code&gt;~/.config/fontconfig/fonts.conf&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s open up &lt;code&gt;~/.config/fontconfig/fonts.conf&lt;/code&gt;, or create it if it doesn&amp;#8217;t
already exist. Put the following skeleton structure in there:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;#39;1.0&amp;#39;?&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE fontconfig SYSTEM &amp;#39;fonts.dtd&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;fontconfig&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/fontconfig&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We will put all of our custom configuration between &lt;code&gt;&amp;lt;fontconfig&amp;gt;&lt;/code&gt; and
&lt;code&gt;&amp;lt;/fontconfig&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_setting_default_fonts"&gt;Setting Default Fonts&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, let&amp;#8217;s set the default serif, sans serif, and monospace fonts. I&amp;#8217;ll use
the beautiful &lt;a href="http://en.wikipedia.org/wiki/Croscore_fonts"&gt;Chrome OS fonts&lt;/a&gt; as an
example
(&lt;a href="https://aur.archlinux.org/packages/ttf-chromeos-fonts/"&gt;&lt;code&gt;ttf-chromeos-fonts&lt;/code&gt;&lt;/a&gt; if
you&amp;#8217;re running &lt;a href="http://www.archlinux.org"&gt;Arch Linux&lt;/a&gt;). Insert the following
between &lt;code&gt;&amp;lt;fontconfig&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/fontconfig&amp;gt;&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="c"&gt;&amp;lt;!-- Set preferred serif, sans serif, and monospace fonts. --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;alias&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;family&amp;gt;&lt;/span&gt;serif&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;prefer&amp;gt;&amp;lt;family&amp;gt;&lt;/span&gt;Tinos&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&amp;lt;/prefer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/alias&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;alias&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;family&amp;gt;&lt;/span&gt;sans-serif&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;prefer&amp;gt;&amp;lt;family&amp;gt;&lt;/span&gt;Arimo&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&amp;lt;/prefer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/alias&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;alias&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;family&amp;gt;&lt;/span&gt;sans&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;prefer&amp;gt;&amp;lt;family&amp;gt;&lt;/span&gt;Arimo&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&amp;lt;/prefer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/alias&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;alias&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;family&amp;gt;&lt;/span&gt;monospace&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;prefer&amp;gt;&amp;lt;family&amp;gt;&lt;/span&gt;Cousine&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&amp;lt;/prefer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/alias&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_aliasing_microsoft_fonts"&gt;Aliasing Microsoft Fonts&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now, we will create aliases for commonly used fonts like Arial and Helvetica, so
that our favorite fonts will always be used instead of these fonts, e.g. when
requested by a web site.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Insert the following between &lt;code&gt;&amp;lt;fontconfig&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/fontconfig&amp;gt;&lt;/code&gt;, after the
previous snippet:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="c"&gt;&amp;lt;!-- Aliases for commonly used MS fonts. --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;match&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;test&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;string&amp;gt;&lt;/span&gt;Arial&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&amp;lt;/test&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;binding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;strong&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Arimo&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;match&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;test&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;string&amp;gt;&lt;/span&gt;Helvetica&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&amp;lt;/test&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;binding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;strong&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Arimo&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;match&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;test&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;string&amp;gt;&lt;/span&gt;Verdana&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&amp;lt;/test&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;binding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;strong&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Arimo&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;match&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;test&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;string&amp;gt;&lt;/span&gt;Tahoma&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&amp;lt;/test&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;binding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;strong&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Arimo&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;match&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Insert joke here --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;test&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;string&amp;gt;&lt;/span&gt;Comic Sans MS&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&amp;lt;/test&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;binding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;strong&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Arimo&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;match&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;test&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;string&amp;gt;&lt;/span&gt;Times New Roman&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&amp;lt;/test&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;binding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;strong&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Tinos&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;match&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;test&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;string&amp;gt;&lt;/span&gt;Times&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&amp;lt;/test&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;binding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;strong&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Tinos&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;match&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;test&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;string&amp;gt;&lt;/span&gt;Courier New&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&amp;lt;/test&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;edit&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;assign&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;binding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;strong&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Cousine&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/edit&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Note that the Microsoft fonts are aliased directly to the our preferred
substitute fonts. Aliasing to generic families (serif, sans-serif etc.) may or
may not work depending on your configuration in &lt;code&gt;/etc/fonts&lt;/code&gt; (they didn&amp;#8217;t work
for me), so it&amp;#8217;s safer this way.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This list is of course by no means definitive; add/remove aliases as you like.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_the_result"&gt;The Result&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You&amp;#8217;ll need to log out and back in for all applications to update. You should
see the difference immediately:&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;div class="title"&gt;Google search results, before (Arial):&lt;/div&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;img src="/assets/files/font_config_before.png" alt="/assets/files/font_config_before.png" width="500" /&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;div class="title"&gt;Google search results, after (Arimo):&lt;/div&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;img src="/assets/files/font_config_after.png" alt="/assets/files/font_config_after.png" width="500" /&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;You can verify that the aliases have been set up correctly with &lt;code&gt;fc-match&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; family in serif sans-serif monospace Arial Helvetica Verdana &lt;span class="s2"&gt;&amp;quot;Times New Roman&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Courier New&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$family&lt;/span&gt;&lt;span class="s2"&gt;: &amp;quot;&lt;/span&gt;
  &lt;span class="nb"&gt;fc&lt;/span&gt;-match &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$family&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;which should now give you something like:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;serif: Tinos-Regular.ttf: "Tinos" "Regular"
sans-serif: Arimo-Regular.ttf: "Arimo" "Regular"
monospace: Cousine-Regular.ttf: "Cousine" "Regular"
Arial: Arimo-Regular.ttf: "Arimo" "Regular"
Helvetica: Arimo-Regular.ttf: "Arimo" "Regular"
Verdana: Arimo-Regular.ttf: "Arimo" "Regular"
Times New Roman: Tinos-Regular.ttf: "Tinos" "Regular"
Courier New: Cousine-Regular.ttf: "Cousine" "Regular"&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_other_notes"&gt;Other Notes&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Some existing examples you may find online show the following syntax:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- Deprecated syntax --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;match&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pattern&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;test&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;family&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;qual=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;any&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;string&amp;gt;&lt;/span&gt;Arial&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&amp;lt;/test&amp;gt;&lt;/span&gt;
  ...
&lt;span class="nt"&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This will produce an error message like&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;Fontconfig error: "/home/username/.config/fontconfig/fonts.conf", line 38: invalid attribute 'name'&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The fix is to change &lt;code&gt;&amp;lt;match target="pattern" name="family"&amp;gt;&lt;/code&gt; to just &lt;code&gt;&amp;lt;match&amp;gt;&lt;/code&gt;,
as shown above.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Linux"></category></entry><entry><title>Unicode I/O and Locales in Python</title><link href="https://seasonofcode.com/posts/unicode-io-and-locales-in-python.html" rel="alternate"></link><updated>2014-02-20T17:51:00-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2014-02-20:posts/unicode-io-and-locales-in-python.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I recently ran into a weird error when running some Python code in a chroot jail.&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;你好&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/tmp/asdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;gave me&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
  File "/usr/lib/python3.3/encodings/ascii.py", line 26, in decode
    return codecs.ascii_decode(input, self.errors)[0]
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe4 in position 0: ordinal not in range(128)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The same happened with interprocess I/O:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;/usr/bin/cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;universal_newlines&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd_stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;你好&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;gave me&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
  File "/usr/lib/python3.3/subprocess.py", line 578, in check_output
    output, unused_err = process.communicate(timeout=timeout)
  File "/usr/lib/python3.3/subprocess.py", line 908, in communicate
    stdout = _eintr_retry_call(self.stdout.read)
  File "/usr/lib/python3.3/subprocess.py", line 479, in _eintr_retry_call
    return func(*args)
  File "/usr/lib/python3.3/encodings/ascii.py", line 26, in decode
    return codecs.ascii_decode(input, self.errors)[0]
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe4 in position 0: ordinal not in range(128)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It turns out that Python &lt;code&gt;str&lt;/code&gt;'s are encoded to/decoded from raw bytes during
I/O (&lt;code&gt;print&lt;/code&gt;, file I/O, IPC, etc) using the &lt;em&gt;default&lt;/em&gt; system locale encoding.
The advantage is that, if your system locale is set up correctly, everything
just works - there&amp;#8217;s no explicit encoding/decoding between strings and bytes.
The downside is that your Python code that runs fine on one machine can fail
mysteriously on a different machine.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In my case, the chroot jail yielded:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;$ locale
LANG=C
LC_CTYPE="C"
LC_NUMERIC="C"
LC_TIME="C"
LC_COLLATE="C"
LC_MONETARY="C"
LC_MESSAGES="C"
LC_PAPER="C"
LC_NAME="C"
LC_ADDRESS="C"
LC_TELEPHONE="C"
LC_MEASUREMENT="C"
LC_IDENTIFICATION="C"
LC_ALL=&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_solution_a"&gt;Solution A&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The simplest solution is to set the system locale, either just for the Python
program or for your shell. For example,&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Run ./my_program.py with a custom LANG value.&lt;/span&gt;
&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.utf-8 ./my_program.py
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;or&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Set locale for current shell session.&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.utf-8
./my_program.py
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In fact, it&amp;#8217;s probably a good idea to add the &lt;code&gt;export&lt;/code&gt; line to your &lt;code&gt;~/.bashrc&lt;/code&gt;,
or follow however your Linux distro decides locales should be set.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_solution_b"&gt;Solution B&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;On the other hand, you can explicitly set the encoding used during I/O in your
Python code.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For file I/O, in Python 3.x, you can set the &lt;code&gt;encoding&lt;/code&gt; argument of
&lt;a href="http://docs.python.org/3.3/library/functions.html#open"&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Python 3.x&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/tmp/asdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;你好&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In Python 2.x, you can use
&lt;a href="http://docs.python.org/2/library/codecs.html#codecs.open"&gt;&lt;code&gt;codecs.open&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Python 2.x&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/tmp/asdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;你好&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Alternatively, you can use raw mode for file I/O:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/tmp/asdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;你好&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For IPC with &lt;code&gt;subprocess&lt;/code&gt;, you must &lt;strong&gt;not&lt;/strong&gt; use &lt;code&gt;universal_newlines=True&lt;/code&gt;, as that
will always attempt to encode/decode using the system locale. Instead:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;/usr/bin/cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd_stdout_bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_stderr_bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;你好&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd_stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;cmd_stdout_bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;cmd_stderr_bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>Disabling Screen-Off Animation In Android</title><link href="https://seasonofcode.com/posts/disabling-screen-off-animation-in-android.html" rel="alternate"></link><updated>2013-02-02T02:41:49-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2013-02-02:posts/disabling-screen-off-animation-in-android.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I am impressed by the amazing progress Android&amp;#8217;s UI has made since its
inception. With each iteration, likewise in software as in hardware, its
usability and aesthetics have steadily improved to the point where I can now
confidently buy one for my mom to replace the iPhone I recommended to her only
last year.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;On the other hand, one particular "feature" I intensely dislike is the
screen-off animation that emulates the brief white flash you see when an old CRT
TV monitor is powering off. Introduced in Gingerbread (2.3), it seems not to
bother most people as much as it bothers me, and even seems to be quite popular
(e.g., &lt;a href="http://forum.xda-developers.com/showthread.php?t=1890526"&gt;this thread&lt;/a&gt;).&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I was glad to learn though that a number of people find it as annoying as I do,
for example in
&lt;a href="http://forum.cyanogenmod.org/topic/64185-any-way-to-disable-the-screen-off-animation-in-101/"&gt;this thread&lt;/a&gt;
and &lt;a href="http://code.google.com/p/cyanogenmod/issues/detail?id=6519"&gt;this bug&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As a CyanogenMod fan, I was quite happy with the straightforward checkbox in the
Settings app in CyanogenMod 9 that toggled whether to play this animation. In
CM10, this option was removed, but there was an easy hack involving changing
window animation scale in the developer settings, as explained in the
&lt;a href="http://code.google.com/p/cyanogenmod/issues/detail?id=6519"&gt;second link above&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So when I updated to CM10.1 M1, I was very unpleasantly surprised to find that
this hack does not work any more either. I tried to immediately downgrade to
CM10, but then discovered that doing so requires a full data wipe (of
course&amp;#8230;). A quick search pulled up
&lt;a href="http://forum.xda-developers.com/showthread.php?t=1989397"&gt;this thread&lt;/a&gt; which
proposes a simple prop edit, but the following posts in the thread suggest mixed
results.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So, stuck with CM10.1, and really disgusted at this turn of events, I finally
decided to put on my hax0r gloves and get this annoying "feature" out of my face
once and for all.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;strong&gt;Poking Around&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I went to &lt;a href="http://androidxref.com/"&gt;androidxref.com&lt;/a&gt; and started searching
the Android source code for "screen off animation". (OK, I actually started out
with &lt;em&gt;grep&lt;/em&gt;, but it didn&amp;#8217;t take me long to realize
&lt;a href="http://androidxref.com/"&gt;androidxref.com&lt;/a&gt; was about sixty million times
faster - it&amp;#8217;s really pretty cool.)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I quickly found why changing the window animation scale in &lt;strong&gt;Jelly Bean 4.1 (and
CM10)&lt;/strong&gt; disables the screen-off animation. The two snippets of of code
implementing this behavior are at
&lt;a href="http://androidxref.com/4.0.4/xref/frameworks/base/services/java/com/android/server/PowerManagerService.java#470"&gt;line 470&lt;/a&gt; and
&lt;a href="http://androidxref.com/4.0.4/xref/frameworks/base/services/java/com/android/server/PowerManagerService.java#2228"&gt;line 2228&lt;/a&gt;
of &lt;code&gt;PowerManagerService.java&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In &lt;strong&gt;Jelly Bean 4.2 (and CM10.1)&lt;/strong&gt;, however, these parts of the code have been
completely refactored. The snippet of code that launches the screen-off
animation is now found at
&lt;a href="http://androidxref.com/4.2_r1/xref/frameworks/base/services/java/com/android/server/power/DisplayPowerController.java#704"&gt;line 704&lt;/a&gt;
of &lt;code&gt;DisplayPowerController.java&lt;/code&gt;. Note that this new &lt;code&gt;DisplayPowerController&lt;/code&gt;
class has been factored out of the old &lt;code&gt;PowerManagerService&lt;/code&gt; class, and both
have moved into a separate &lt;code&gt;power&lt;/code&gt; sub-directory.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;strong&gt;The Hacking&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;em&gt;Disclaimer: I am &lt;strong&gt;NOT&lt;/strong&gt; responsible for anything that happens to your phone or
you or your house or your relationship with your wife if you follow the
instructions down here. If you don&amp;#8217;t know what you&amp;#8217;re doing and are scared of
bricking your phone, just give up and go watch Superbowl. Please.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;What did &lt;em&gt;not&lt;/em&gt; change, I found, is that this code gets packaged into
&lt;code&gt;/system/framework/services.jar&lt;/code&gt; on the Android system. So, let&amp;#8217;s take a look at
this file as found in the CM10.1 image on my phone:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Copy services.jar from phone to current directory.&lt;/span&gt;
adb pull /system/framework/services.jar
&lt;span class="c"&gt;# Disassemble.&lt;/span&gt;
apktool d services.jar
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;(&lt;code&gt;&lt;a href="http://code.google.com/p/android-apktool/"&gt;apktool&lt;/a&gt;&lt;/code&gt; is a tool that
extracts and disassembles Android APK/JAR files, and is available for Linux,
Windows and OS X.) This produces a directory, &lt;code&gt;services.jar.out&lt;/code&gt;, which contains
the disassembled code of &lt;code&gt;services.jar&lt;/code&gt; we just pulled from a connected phone. I
dived into the &lt;code&gt;DisplayPowerController&lt;/code&gt; code and edited the &lt;em&gt;else&lt;/em&gt; clause at
&lt;a href="http://androidxref.com/4.2_r1/xref/frameworks/base/services/java/com/android/server/power/DisplayPowerController.java#704"&gt;line 704&lt;/a&gt;
to essentially just say &lt;code&gt;setScreenOn(false);&lt;/code&gt; directly instead of running
the animation first. If you look at the dissassembled code, you&amp;#8217;d realize Dalvik
bytecode is really quite readable and easy to hack, especially since the line
number hints allow you to directly map a line in the Java source code to the
corresponding Dalvik instructions. I just had the Java source file on
&lt;a href="http://androidxref.com"&gt;androidxref.com&lt;/a&gt; open in a browser tab for reference
and killed instructions line by line. You can
&lt;a href="http://www.mediafire.com/?5e8s5kzblav4a5g"&gt;download my patch here&lt;/a&gt; and apply
it like this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;patch -d services.jar.out -Np1 &amp;lt; path/to/disable_screen_off_animation.patch
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;(For CM10.1 nightlies (after the MR1.1 merge) and CM10.1 M2, use
&lt;a href="http://www.mediafire.com/download.php?drw5t67v24tb4x9"&gt;this patch&lt;/a&gt; instead.
The same piece of code was shuffled around to
&lt;a href="https://github.com/CyanogenMod/android_frameworks_base/blob/f6f6b1d37c1d5a8ba687e4d09761eb762f7269af/services/java/com/android/server/power/DisplayPowerController.java#L777"&gt;line 777&lt;/a&gt;. For CM10.1 M3, use
&lt;a href="http://www.mediafire.com/download.php?3xghfg9yfqyj9o7"&gt;this patch&lt;/a&gt; instead.)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now re-assemble the code and push it back on to the device:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Re-assemble modified sources as services-mod.jar.&lt;/span&gt;
apktool b services.jar.out services-mod.jar
&lt;span class="c"&gt;# Copy services-mod.jar to /sdcard/ on phone.&lt;/span&gt;
adb push services-mod.jar /sdcard/
&lt;span class="c"&gt;# Remount /system partition as read-write in order to modify it.&lt;/span&gt;
adb shell su -c &lt;span class="s1"&gt;&amp;#39;mount -o rw,remount /system&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# Overwrite original services.jar on phone with services-mod.jar as root.&lt;/span&gt;
adb shell su -c &lt;span class="s1"&gt;&amp;#39;cp /sdcard/services-mod.jar /system/framework/services.jar&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# Reboot phone for this to take effect.&lt;/span&gt;
adb reboot
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When the phone reboots, it will say Android is upgrading and will rebuild Dalvik
cache for each application, so it might take a while. But hey, it&amp;#8217;s worth it.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;strong&gt;Parting Words&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The final product, if you just want to replace the &lt;code&gt;services.jar&lt;/code&gt; on your phone, is here:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;CyanogenMod 10.1 M1&lt;/strong&gt; - tested on Galaxy Nexus (maguro) and Nexus S (crespo), should work on other phones as well (can&amp;#8217;t promise - let me know):
&lt;/p&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://www.mediafire.com/?16dhrvk7esr77br"&gt;services-mod.jar&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;CyanogenMod 10.1 M2&lt;/strong&gt; - tested on Galaxy Nexus (maguro), should work on other phones as well (can&amp;#8217;t promise - let me know):
&lt;/p&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://www.mediafire.com/?kdd4af6h81bq8"&gt;services-mod.jar&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;CyanogenMod 10.1 M3&lt;/strong&gt; - tested on Galaxy Nexus (maguro), should work on other phones as well (can&amp;#8217;t promise - let me know):
&lt;/p&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://www.mediafire.com/?78cvqi6qe0s3yoy"&gt;services-mod.jar&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;CyanogenMod 10.1 RC1&lt;/strong&gt; - tested on Galaxy Nexus (maguro), should work on other phones as well (can&amp;#8217;t promise - let me know):
&lt;/p&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://www.mediafire.com/?w1527lnv5eoh8kl"&gt;services-mod.jar&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Stock 4.2.2 (takju/JDQ39)&lt;/strong&gt; - for &lt;a href="https://developers.google.com/android/nexus/images#takjujdq39"&gt;"takju" factory image from Google&lt;/a&gt;
&lt;/p&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Note&lt;/strong&gt;: use this to replace &lt;code&gt;services.&lt;strong&gt;odex&lt;/strong&gt;&lt;/code&gt;, not &lt;code&gt;services.&lt;strong&gt;jar&lt;/strong&gt;&lt;/code&gt;!
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://www.mediafire.com/?g5guv4hkcvt9owm"&gt;services-mod.odex&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Stock 4.2.2 (yakju/JDQ39)&lt;/strong&gt; - for &lt;a href="https://developers.google.com/android/nexus/images#yakjujdq39"&gt;"yakju" factory image from Google&lt;/a&gt;
&lt;/p&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Note&lt;/strong&gt;: use this to replace &lt;code&gt;services.&lt;strong&gt;odex&lt;/strong&gt;&lt;/code&gt;, not &lt;code&gt;services.&lt;strong&gt;jar&lt;/strong&gt;&lt;/code&gt;!
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://www.mediafire.com/?8ttffv118tnxgp5"&gt;services-mod.odex&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Apply the &lt;code&gt;services-mod.jar&lt;/code&gt; to your phone like this (obviously assuming you
have adb working and root):&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Copy services-mod.jar to /sdcard/ on phone.&lt;/span&gt;
adb push services-mod.jar /sdcard/
&lt;span class="c"&gt;# Remount /system partition as read-write in order to modify it.&lt;/span&gt;
adb shell su -c &lt;span class="s1"&gt;&amp;#39;mount -o rw,remount /system&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# Overwrite original services.jar on phone with services-mod.jar as root.&lt;/span&gt;
adb shell su -c &lt;span class="s1"&gt;&amp;#39;cp /sdcard/services-mod.jar /system/framework/services.jar&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# Reboot phone for this to take effect.&lt;/span&gt;
adb reboot
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Or, I suppose, you could just use ES File Explorer with root mode enabled, mount
&lt;code&gt;/system&lt;/code&gt; as read-write and copy the file to &lt;code&gt;/system/framework/services.jar&lt;/code&gt; on
the phone.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Note that a reboot is needed after you replace the &lt;code&gt;services.jar&lt;/code&gt; whatever you
do, and upon the first reboot the "Android is upgrading" dialog will pop up.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Android"></category><category term="Featured"></category></entry><entry><title>Android Rooting: A Developer's Guide</title><link href="https://seasonofcode.com/posts/android-rooting-a-developers-guide.html" rel="alternate"></link><updated>2012-11-21T00:58:12-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2012-11-21:posts/android-rooting-a-developers-guide.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;&lt;img src="/assets/files/rooting_android_blue.jpg"
align="right"
style="max-width: 350px; width: 35%; margin: 1.5em 0 1.5em 1.5em;"&gt;
First things first&amp;#8201;&amp;#8212;&amp;#8201;this is not about how to apply a rooting method, e.g., a
one-click-root, to an Android device. Rather, it is about how one could go about
&lt;em&gt;developing&lt;/em&gt; a rooting method for a device that no one has rooted before, and is
told through my experiences with rooting a particular device&amp;#8201;&amp;#8212;&amp;#8201;the Barnes &amp;amp;
Noble Nook Tablet 8GB. For context, you can read my original thread
"&lt;a href="http://forum.xda-developers.com/showthread.php?t=1529553"&gt;Root for Nook
Tablet 8GB (w/ Android Market)&lt;/a&gt; on XDA-Developers where I published my rooting
method, which has reached a download count of&amp;#8201;&amp;#8212;&amp;#8201;wait for it&amp;#8201;&amp;#8212;&amp;#8201;OVER NINE
THOUSAND!!!&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For an overview of how rooting works behind the scenes, you may want to read my
previous article
&lt;a href="/posts/how-rooting-works-a-technical-explanation-of-the-android-rooting-process.html"&gt;How
Rooting Works - A Technical Explanation of the Android Rooting Process&lt;/a&gt; as
background.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Sometime in late February (2012), on a visit to to a Barnes &amp;amp; Noble store in
Boston, I bought the then freshly released Nook Tablet 8GB entirely on impulse
for $199. Being the hax0r that I am, the first thing I did when I got home was
to try to root the device. It came as a nasty surprise, therefore, when I
discovered that no one had yet succeeded in rooting the device. All I could find
was a &lt;a href="http://www.youtube.com/watch?v=x8e0OLWQYc4"&gt;YouTube video&lt;/a&gt; showing
that the existing rooting method for its cousin, the Nook Tablet 16GB, did not
work. After waiting for a few days, the absolutely pathetic app store and
handicaps instituted by B&amp;amp;N finally motivated me to develop a rooting method for
the device myself.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_the_plan"&gt;The Plan&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So, how do you go about rooting an Android device? As I explain in
&lt;a href="/posts/how-rooting-works-a-technical-explanation-of-the-android-rooting-process.html"&gt;my
previous article&lt;/a&gt;, rooting is basically a two-step process:&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
Find exploit that allows execution of arbitrary code as root
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Use exploit to install &lt;code&gt;su&lt;/code&gt; (with SUID bit set) and &lt;code&gt;Superuser.apk&lt;/code&gt; as root
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;After &lt;code&gt;su&lt;/code&gt; and &lt;code&gt;Superuser.apk&lt;/code&gt; are installed correctly, apps that require root
(such as &lt;a href="http://matrixrewriter.com/android/"&gt;Titanium Backup&lt;/a&gt; or
&lt;a href="https://play.google.com/store/apps/details?id=org.adaway&amp;amp;hl=en"&gt;AdAway&lt;/a&gt;)
will invoke &lt;code&gt;su&lt;/code&gt; to run code as the privileged user.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_the_process"&gt;The Process&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;There are many generic or device-specific exploits that a hax0r may leverage to
achieve privileged execution of arbitrary code. I would again refer you to
&lt;a href="http://jon.oberheide.org/files/bsides11-dontrootrobots.pdf"&gt;this excellent
presentation on various Android root exploits&lt;/a&gt; that have been or may still be
used for this purpose.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;However, none of these methods that I knew of could work on the Nook Tablet,
which is probably one of the most locked-down Android ROMs out there:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Bootloader is locked.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
ADB is disabled, and cannot be enabled from the UI.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Installing non-market apps (raw APKs) is disabled, and cannot be enabled from the UI.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
No access to Google Play / Android Market (or any Google Apps).
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This rules out 1) root APKs and 2) the majority of exploits out there that
require executing commands over ADB. It means that one cannot run any code on
the device that does not come from B&amp;amp;N period.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;But of course there was another way in. Somebody on XDA-Developers had
discovered that the bootloader of the Nook Tablet supported booting off an
Android system located in partition images stored on an external microSD card.
This mechanism is probably used to repair corrupted system partitions by B&amp;amp;N
customer support.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The solution, then, is clear: we create dummy system partition images that,
instead of booting an Android system, installs &lt;code&gt;su&lt;/code&gt; and &lt;code&gt;Superuser.apk&lt;/code&gt; into the
"normal" Android system in internal flash memory. More concretely, I modified
the system initialization file inside the initrd inside the boot partition image
to invoke a custom script that copied the relevant files into the &lt;code&gt;system&lt;/code&gt;
partition in the internal flash memory.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I based my work on
&lt;a href="http://forum.xda-developers.com/showthread.php?t=1517513"&gt;bauwks&amp;#8217;s 2nduboot
images&lt;/a&gt; and used &lt;a href="https://gitorious.org/ac100/abootimg"&gt;abootimg&lt;/a&gt; to unpack
files in the boot partition image &lt;code&gt;boot.img&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Extracts files in the boot partition image into the current directory.&lt;/span&gt;
abootimg -x ./boot.img
&lt;span class="c"&gt;# Extract files in the initrd cpio archive into the folder ./ramdisk/&lt;/span&gt;
aboot-unpack-initrd ./initrd.img
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I changed the system initialization file &lt;code&gt;init.omap4430.rc&lt;/code&gt; in the initrd to
mount the system partition of the internal flash memory at &lt;code&gt;/foo&lt;/code&gt; rather than
&lt;code&gt;/system&lt;/code&gt;, because later system initialization steps attempt to remount
&lt;code&gt;/system&lt;/code&gt; as read-only and so on, and for some reason I could not disable that
behavior:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;on fs
    mkdir /foo
    mount ext4 /dev/block/platform/mmci-omap-hs.1/by-name/system /foo wait&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I added the following to the system initialization file &lt;code&gt;init.rc&lt;/code&gt; in the initrd to start my rooting script:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;service root_script /sbin/busybox ash /assets/run.sh
    oneshot&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;My rooting script, which I place in the directory &lt;code&gt;assets&lt;/code&gt; in the initrd,
installs not only &lt;code&gt;su&lt;/code&gt;, but also Google Play and other Google apps which are
missing from the Nook Tablet ROM:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Install su and Superuser.apk&lt;/span&gt;
/sbin/busybox cp /assets/su /foo/bin/
/sbin/busybox cp /assets/su /foo/xbin/
/sbin/busybox chmod &lt;span class="m"&gt;06755&lt;/span&gt; /foo/xbin/su
/sbin/busybox chmod &lt;span class="m"&gt;06755&lt;/span&gt; /foo/bin/su
/sbin/busybox cp /assets/Superuser.apk /foo/app/

&lt;span class="c"&gt;# Install Busybox.&lt;/span&gt;
/sbin/busybox cp /sbin/busybox /foo/xbin/
/sbin/busybox chmod &lt;span class="m"&gt;06755&lt;/span&gt; /foo/xbin/busybox

&lt;span class="c"&gt;# Install Google Play and other Google apps.&lt;/span&gt;
/sbin/busybox cp /assets/*.apk /foo/app/
/sbin/busybox cp /assets/com.google.android.maps..xml /foo/etc/permissions/
/sbin/busybox cp /assets/com.google.android.maps.jar /foo/framework/
/sbin/busybox cp /assets/libvoicesearch.so /foo/lib/

&lt;span class="c"&gt;# Done.&lt;/span&gt;
/sbin/busybox mount -o ro,remount /foo
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In accordance with the above script, I had placed all assets in the &lt;code&gt;assets&lt;/code&gt;
directory inside the initrd, and the Busybox binary in &lt;code&gt;sbin&lt;/code&gt; inside the initrd.
With all changes done, I pack everything back into a new boot.img:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Build initrd cpio archive&lt;/span&gt;
abootimg-pack-initrd initrd.img.new
&lt;span class="c"&gt;# Build new boot.img using previously extracted components&lt;/span&gt;
abootimg --create boot.img.new -f ./bootimg.cfg -k ./zImage -r ./initrd.img.new
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Then I replace the &lt;code&gt;boot.img&lt;/code&gt; on the SD card image with my &lt;code&gt;boot.img.new&lt;/code&gt;, and
the rooting method is done.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_final_words"&gt;Final words&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The actual process, of course, was much, much more painful. The Nook Tablet&amp;#8217;s
bootloader is very picky; some microSD cards just won&amp;#8217;t work, there is a file
size limit on &lt;code&gt;boot.img&lt;/code&gt;, etc.. It was also after much frustration that I
discovered the mount-to-&lt;code&gt;/foo&lt;/code&gt; trick. And I could not even keep track of how
many factory restores I had to perform on the device to undo bad modifications.
But it was still a lot of fun, and the euphoria at the end and the feeling of
accomplishment when reply posts started rolling in and random people were
donating $5 as a token of their appreciation could not be overstated.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Good luck rooting!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Android"></category><category term="Featured"></category></entry><entry><title>Carrier programming on CDMA Android phones</title><link href="https://seasonofcode.com/posts/carrier-programming-on-cdma-android-phones.html" rel="alternate"></link><updated>2012-11-15T23:57:36-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2012-11-15:posts/carrier-programming-on-cdma-android-phones.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Have you ever wondered how CDMA phones are programmed to a specific carrier for
voice calls, SMS and data?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In the U.S., all major CDMA carriers operate on the same frequencies, which
means that there is no inherent difference in hardware between phones sold by
any of them, and that theoretically there is no reason why a Verizon Wireless
phone cannot work on Sprint or MetroPCS or Virgin Mobile or Boost Mobile, for
example. Unlike GSM phones with swappable SIM&amp;#8217;s, however, a CDMA phone sold in
the U.S. is typically locked to a particular carrier; so how is that done?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I was recently able to figure out the answer to this question when I
successfully flashed a CDMA phone from Sprint to Verizon (an exploit documented
in &lt;a href="/posts/flashing-a-sprint-nexus-s-4g-to-verizon.html"&gt;Flashing a Sprint
Nexus S 4G to Verizon&lt;/a&gt;). As I have not been able to find a compilation of this
information elsewhere, I am writing up this document in the hope that it will
help others with flashing phones or porting ROMs to different carriers.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Note that this information is based on my research with the Jelly Bean (4.1 &amp;amp;
4.2), ICS (4.0) and Gingerbread (2.3.4) versions of Android and two major U.S.
CDMA carriers, Verizon Wireless and Sprint. Hence, it may not be applicable to
other phones or carriers; in particular, the section about CDMA chips do not
apply to CDMA phones that require a SIM card, such as some Verizon Wireless LTE
phones. In such cases, your comments and insights are welcome.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally, a disclaimer: I have no formal understanding of any of the intricacies
of CDMA technology and therefore cannot guarantee the correctness or accuracy of
this information. Use it at your own risk. I cannot be held responsible for any
damage or legal consequences resulting from or related to the application of
this information.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;At a high level, there are two places where carrier information is stored on a
CDMA Android phone: inside the CDMA chip (radio), and in Android OS system
files.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_programming_the_cdma_chip"&gt;Programming the CDMA chip&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Every CDMA phone (obviously) has a CDMA chip (radio). This chip is responsible
for carrying out voice calls and transferring data over 2G/3G, and in order to
do that, it needs to know stuff like what phone number it represents, what
towers to connect to, what account name to bill the 3G connection to, etc.. All
of this information is stored directly inside the chip (unless you have a
Verizon Wireless LTE phone with a SIM card), and not on any file system
controlled by the OS; this is why even after a factory reset (which formats the
internal flash file system) these settings persist. It is (I believe) not
possible to change the information stored on the CDMA chip from the OS itself;
instead, carriers provide a special number (e.g., *228 for Verizon Wireless)
that, when called, will transfer the information to the chip. This is typically
called "programming" the phone by U.S. carriers.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So what information exactly is stored inside the CDMA chip? Here&amp;#8217;s an incomplete
list:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;MEID&lt;/strong&gt;: Unique serial number of the phone. This is like the MAC address of an
  ethernet / WiFi card in that it is the sole identifier of the CDMA chip. It is
  what carriers use to connect phone calls, deliver SMS&amp;#8217;s, blacklist stolen
  phones, etc.. A fatal flaw, however, is that it is actually possible to modify
  (flash) the MEID of many, but not all, CDMA chips. If you flash the MEID of
  phone A onto phone B, the carrier network has no way of distinguishing between
  phone A and phone B, and phone B is able to make and receive calls, send and
  receive messages etc. as phone A. Unsurprisingly, this is illegal in many
  countries, including the U.S., and as such I will not discuss it here.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Phone / account numbers&lt;/strong&gt;: known as MDN and MIN, these store the phone and
  account numbers associated with the phone.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;2G/3G data account information&lt;/strong&gt;: user names and passwords used to connect to
  data services. Some carriers have stronger (harder to impersonate)
  authentication systems than others; for instance, Verizon Wireless requires
  two encrypted passwords and a secret key in the EFS file system on the CDMA
  chip; Boost Mobile only requires two passwords; while MetroPCS simply accepts
  the SPC/MSL code (see below) as the password. Note that 2G and 3G are
  unrelated systems with independent authentication; a phone can have valid 3G
  credentials and thus connect to 3G while being denied a 2G connection.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;PRL (Preferred Roaming List)&lt;/strong&gt;: a list of towers the phone can connect to. This
  is of course carrier- and location-specific. In some cases, updating the PRL
  (by calling a special number) can improve reception and save battery when the
  phone moves to a new geographical area; see
  &lt;a href="http://www.verizonwireless.com/care/popups/prl.html"&gt;Verizon Wireless&amp;#8217;s
  explanation&lt;/a&gt;, for example.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Software such as CDMA Workshop, DFS, QXDM/QPST can be used to read / write
information stored on a CDMA chip from a computer. Often, however, a 6-digit
passcode known as the SPC code or the MSL code is required. This SPC/MSL code,
again stored inside the CDMA chip, is either randomly assigned by the carrier
(this is the case for Verizon Wireless and Sprint) or deterministically computed
based on the MEID (MetroPCS). In the former case, there are a variety of tricks
for retrieving the SPC/MSL code from the phone itself,; Google is your friend
there. In the latter case, there are sites for computing the code from the MEID.
Once it is known, the SPC/MSL code can be changed to any 6-digit number; some
phones may even allow you to overwrite the SPC/MSL code without knowing it
first.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_carrier_configuration_in_the_android_os"&gt;Carrier configuration in the Android OS&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To figure out what system files in the Android OS contain carrier information, I
inspected source code and images of ROMS for the Samsung Galaxy Nexus (Sprint
and Verizon Wireless), the Samsung Nexus S 4G (Sprint), the HTC Incredible
(Verizon Wireless), and the Motorola Droid 3 (Verizon Wireless). I found three
places that store carrier-specific information.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The first is &lt;code&gt;/system/build.prop&lt;/code&gt;. Sprint phones contain the following lines:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;ro.cdma.home.operator.numeric=310120
ro.cdma.home.operator.alpha=Sprint&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;while Verizon Wireless phones contain the following lines instead:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;ro.cdma.home.operator.numeric=310004
ro.cdma.home.operator.alpha=Verizon
ro.cdma.homesystem=64,65,76,77,78,79,80,81,82,83&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;These settings apply to phone calls. If one adopts the Sprint configuration on a
Verizon Wireless phone, for example, the phone would ring very briefly on a
call, but would be unable to actually make or receive calls. The
&lt;code&gt;ro.cdma.homesystem&lt;/code&gt; specifies a list of indices into the PRL that represent
"home" or non-roaming networks.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The second configuration file is &lt;code&gt;eri.xml&lt;/code&gt;, which is compiled into the file
&lt;code&gt;/res/xml/eri.xml&lt;/code&gt; inside the system package
&lt;code&gt;/system/framework/framework-res.apk&lt;/code&gt; on an Android system. This file tells the
OS what it needs to display about a particular network (as an index into the
PRL); for an example, take a look at
&lt;a href="https://android.googlesource.com/device/samsung/toroplus/&lt;code&gt;/refs/tags/android-4.2_r1/overlay/frameworks/base/core/res/res/xml/eri.xml"&gt;the
stock eri.xml for the Sprint Galaxy Nexus&lt;/a&gt; or
&lt;a href="https://github.com/CyanogenMod/android_device_samsung_toro/blob/ics/overlay/frameworks/base/core/res/res/xml/eri.xml"&gt;the
CyanogenMod eri.xml for the Verizon Wireless Galaxy Nexus&lt;/a&gt;. In particular,
this file instructs the OS whether to consider a network (tower) to be roaming
(so whether a roaming icon is displayed), and gives the name of the network
(tower) to be shown in the UI. It must be stressed that this file &lt;em&gt;has no
functional effect&lt;/em&gt;; all it changes is how the OS displays information about
networks. Since APK packages are just ZIP archives, it is easy to replace the
+eri.xml&lt;/code&gt; within to change roaming and name settings for networks; note,
however, that the file inside the APK is not a plain text XML, but some compiled
binary form; you may need to Google for the appropriate binary form pulled from
another phone.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The last configuration file is &lt;code&gt;/system/etc/apns-conf.xml&lt;/code&gt;. This file contains
APN settings for 4G and MMS. See the stock APN settings file for the
&lt;a href="https://android.googlesource.com/device/samsung/crespo4g/+/refs/heads/jb-release/4g-apns-conf.xml"&gt;Sprint
Nexus S 4G&lt;/a&gt; or the
&lt;a href="https://github.com/CyanogenMod/android_vendor_cm/blob/ics/prebuilt/common/etc/apns-conf-cdma.xml"&gt;default
CyanogenMod APN settings&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_step_by_step_guide"&gt;Step-by-step guide&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you&amp;#8217;re interested in learning more about how exactly this works, you&amp;#8217;re
welcome to take a look at my follow-up article
&lt;a href="/posts/flashing-a-sprint-nexus-s-4g-to-verizon.html"&gt;Flashing a Sprint Nexus
S 4G to Verizon&lt;/a&gt;, which documents the process of flashing an actual phone.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Android"></category><category term="Featured"></category></entry><entry><title>Announcing JFBView</title><link href="https://seasonofcode.com/posts/announcing-jfbview.html" rel="alternate"></link><updated>2012-11-10T18:41:27-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2012-11-10:posts/announcing-jfbview.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Around April this year I had heavily patched a PDF viewer for the Linux
framebuffer called FBPDF, which was written by Ali Gholami Rudi in C. Over the
past week I took up the project of completely rewriting a PDF / image viewer
from scratch in C++ with advanced stuff like multi-threaded rendering and
background caching and so on, and I am proud to announce the result - JFBView.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;JFBView is a PDF and image viewer for the Linux framebuffer. Head over to the
&lt;a href="/pages/jfbview.html"&gt;JFBView home page&lt;/a&gt; for links to source and
documentation.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If your are an ArchLinux user, you can install JFBView from the
&lt;a href="https://aur.archlinux.org/packages/jfbview/"&gt;AUR&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>NITDroid userland update VII</title><link href="https://seasonofcode.com/posts/nitdroid-userland-update-vii.html" rel="alternate"></link><updated>2011-10-26T09:50:15-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-10-26:posts/nitdroid-userland-update-vii.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I&amp;#8217;ve been able to get wireless working - well, sort of. The problem in my last
post about the DHCP client failing to start was solved by adding
&lt;code&gt;wifi.interface=wlan0&lt;/code&gt; in &lt;code&gt;default.prop&lt;/code&gt; (doesn&amp;#8217;t really matter where though;
could have used &lt;code&gt;system.prop&lt;/code&gt; for instance) as suggested by
&lt;a href="http://groups.google.com/group/android-porting/browse_thread/thread/780b447e8d2641ab"&gt;this
thread&lt;/a&gt;. After fixing some more permission problems, I was able to connect to
the open WiFi networks at my school:&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;div class="title"&gt;Wireless in Gingerbread (Android 2.3.7) on the Nokia N810&lt;/div&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="/assets/files/nitdroid/nitdroid_20111026_1.jpg"&gt;
&lt;img src="/assets/files/nitdroid/nitdroid_20111026_1_small.jpg" alt="Wireless settings in Gingerbread on the Nokia N810" width="250" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="/assets/files/nitdroid/nitdroid_20111026_2.jpg"&gt;
&lt;img src="/assets/files/nitdroid/nitdroid_20111026_2_small.jpg" alt="Browser showing welcome page from wireless network on the Nokia N810" width="250" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;However, at our school, internet is provided only through an EAP-encrypted
network (Purple Air in the above image). The school provides in addition two
open WiFi networks. One, Purple Help in the above image, redirects all traffic
to a help page which provides instructions on how to connect to the main
EAP-encrypted network. The other, Guest in the above image, is for visiting
guests to the college and will only give internet access if you knew a guest
user name and password privately assigned to each visitor. The N810 is now able
to connect to both of the two open networks, but is unable to connect to the EAP
network. I am not surprised by this because our EAP network is  set up so badly
that I have not been able to make my Thinkpad laptop connect to it under Linux
either, nor is the N810 able to connect to the network even using the
proprietary driver under stock Maemo. Therefore, I have not been able to get
internet on the device, but that is hardly the fault of Android, the driver, or
the device.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I next tried tethering my phone as an AP, but while my laptop and tablet can
connect to the phone fine, the N810 is not showing it in the list of scan
results in Android. Using the proprietary driver for the wireless chip in stock
Maemo, the N810 &lt;em&gt;is&lt;/em&gt; able to connect to my phone. This means that there are
still problems with the open source driver for the wireless chip in the N810,
but I do know now that at least open WiFi networks on standard routers do work
fine. Since I do not have a wireless router of my own, I have not been able to
test further.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>NITDroid userland update VI</title><link href="https://seasonofcode.com/posts/nitdroid-userland-update-vi.html" rel="alternate"></link><updated>2011-10-25T03:19:00-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-10-25:posts/nitdroid-userland-update-vi.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I have been working on getting wireless to work on the N810 under Gingerbread. So far I have not been successful, but I have made a lot of progress along the way.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I started out basically follwing &lt;a href="http://blog.linuxconsulting.ro/2010/04/porting-wifi-drivers-to-android.html"&gt;this great article on porting WiFi drivers to Android&lt;/a&gt;. For some reason, if I compiled the driver for the wireless chip on the N810 (&lt;code&gt;p54spi&lt;/code&gt;) directly into the kernel, the kernel refuses to boot. Therefore, I compiled it as a module, grabbed the firmware required from &lt;a href="http://linuxwireless.org/en/users/Drivers/p54"&gt;the official site of the p54 driver&lt;/a&gt; and add the corresponding changes to &lt;code&gt;Android.mk&lt;/code&gt; and &lt;code&gt;BoardConfig.mk&lt;/code&gt; as described in the &lt;a href="http://blog.linuxconsulting.ro/2010/04/porting-wifi-drivers-to-android.html"&gt;aforementioned article&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;But, as &lt;a href="http://blog.linuxconsulting.ro/2010/04/porting-wifi-drivers-to-android.html"&gt;the same article&lt;/a&gt; explains, Android, rather than using the normal control functions in wpa_supplicant like a normal Linux system, expects wireless drivers to implement Android&amp;#8217;s custom set of commands directly on top of SIOCSIWPRIV, and relies on those instead. I do not understand the rationale behind such a design decision; why reinvent the wheel when the wireless connectivity mechanism on modern Linux systems work just fine? But of course it is pointless arguing with Android, and I adapted the patch found in &lt;a href="http://boundarydevices.com/blogs/android-wlan-the-rest-of-the-story"&gt;this article on porting WiFi drivers for the Nitrogen-E&lt;/a&gt; (which is a &lt;a href="http://boundarydevices.com/NitrogenE.php"&gt;a Freescale i.MX51 / Cortex-A8 based board&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Unfortunately that was not enough either. As Android still thrashed around and refused to talk to the wireless chip, I discovered a line in my logcat output saying something like &lt;code&gt;ioctl[SIOCSIWPRIV] (cscan): -1&lt;/code&gt;. Researching further lead me to &lt;a href="http://randomshit.dreamhosters.com/TouchPad/Drivers/Wifi/AR6003Android.pdf"&gt;this PDF&lt;/a&gt; (also archived &lt;a href="/assets/files/nitdroid/AR6003Android.pdf"&gt;here&lt;/a&gt;) which explained that Gingerbread added on top of Froyo &lt;em&gt;yet another&lt;/em&gt; custom command over SIOCSIWPRIV, combo scan, that a driver needs to implement. In fact, Gingerbread will &lt;em&gt;only&lt;/em&gt; use combo scanning to scan for APs when using WEXT. A patch for this is found &lt;a href="https://github.com/CyanogenMod/android_external_wpa_supplicant_6/commit/cd46450b1674b462dcc278ae2f015d8449e5c158"&gt;here&lt;/a&gt; or, less elegantly, by removing combo scanning from the WEXT driver of wpa_supplicant as in &lt;a href="https://gitorious.org/picopc-android-gingerbread/external-wpa_supplicant_6/commit/5f5c50d722eedaedd75c1698b79f464310ce6478?format=patch"&gt;this patch&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In addition, I had to patch libhardware_legacy to use &lt;code&gt;wlan0&lt;/code&gt; instead of &lt;code&gt;sta&lt;/code&gt; (seriously, why is that hard-coded in?) which libhardware_legacy uses as the interface name to determine the state of the wpa_supplicant process. The patch is as follows:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/wifi/wifi.c b/wifi/wifi.c&lt;/span&gt;
&lt;span class="gh"&gt;index 3f8708d..9d9d89c 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/wifi/wifi.c&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/wifi/wifi.c&lt;/span&gt;
&lt;span class="gu"&gt;@@ -60,7 +60,7 @@ static char iface[PROPERTY_VALUE_MAX];&lt;/span&gt;
 #ifndef WIFI_FIRMWARE_LOADER
 #define WIFI_FIRMWARE_LOADER           &amp;quot;&amp;quot;
 #endif
&lt;span class="gd"&gt;-#define WIFI_TEST_INTERFACE            &amp;quot;sta&amp;quot;&lt;/span&gt;
&lt;span class="gi"&gt;+#define WIFI_TEST_INTERFACE            &amp;quot;wlan0&amp;quot;&lt;/span&gt;

 #define WIFI_DRIVER_LOADER_DELAY       1000000
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Otherwise, I get errors like&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;Unable to open connection to supplicant on "sta": No such file or directory&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;After all this effort, the device is able to scan correctly and does give a list of APs in Android GUI. From the logcat output I can see that it is also able to successfully associate with the AP:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;I/wpa_supplicant( 1205): Trying to associate with 1c:17:d3:fc:db:79 (SSID='Purple Help' freq=2412 MHz)
D/wpa_supplicant( 1205): Cancelling scan request
D/wpa_supplicant( 1205): WPA: clearing own WPA/RSN IE
D/wpa_supplicant( 1205): Automatic auth_alg selection: 0x1
D/wpa_supplicant( 1205): WPA: clearing AP WPA IE
D/wpa_supplicant( 1205): WPA: clearing AP RSN IE
D/wpa_supplicant( 1205): WPA: clearing own WPA/RSN IE
D/wpa_supplicant( 1205): No keys have been configured - skip key clearing
D/wpa_supplicant( 1205): wpa_driver_wext_set_drop_unencrypted
D/wpa_supplicant( 1205): State: SCANNING -&amp;gt; ASSOCIATING
I/wpa_supplicant( 1205): CTRL-EVENT-STATE-CHANGE id=-1 state=3 BSSID=1c:17:d3:fc:db:79
D/wpa_supplicant( 1205): wpa_driver_wext_set_operstate: operstate 0-&amp;gt;0 (DORMANT)
D/wpa_supplicant( 1205): WEXT: Operstate: linkmode=-1, operstate=5
D/wpa_supplicant( 1205): wpa_driver_wext_associate
D/wpa_supplicant( 1205): wpa_driver_wext_set_psk
D/wpa_supplicant( 1205): Setting authentication timeout: 10 sec 0 usec
D/wpa_supplicant( 1205): EAPOL: External notification - EAP success=0
D/wpa_supplicant( 1205): EAPOL: External notification - EAP fail=0
D/wpa_supplicant( 1205): EAPOL: External notification - portControl=ForceAuthorized
D/wpa_supplicant( 1205): RTM_NEWLINK: operstate=0 ifi_flags=0x1003 ([UP])
D/wpa_supplicant( 1205): RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
D/wpa_supplicant( 1205): Wireless event: cmd=0x8b06 len=8
D/wpa_supplicant( 1205): RTM_NEWLINK: operstate=0 ifi_flags=0x1003 ([UP])
D/wpa_supplicant( 1205): RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
D/wpa_supplicant( 1205): Wireless event: cmd=0x8b04 len=12
D/wpa_supplicant( 1205): RTM_NEWLINK: operstate=0 ifi_flags=0x1003 ([UP])
D/wpa_supplicant( 1205): RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
D/wpa_supplicant( 1205): Wireless event: cmd=0x8b1a len=19
D/wpa_supplicant( 1205): CMD: AP_SCAN 1
D/wpa_supplicant( 1205): ap_scan = 1
V/WifiMonitor(  925): Event [Trying to associate with 1c:17:d3:fc:db:79 (SSID='Purple Help' freq=2412 MHz)]
V/WifiMonitor(  925): Event [CTRL-EVENT-STATE-CHANGE id=-1 state=3 BSSID=1c:17:d3:fc:db:79]
D/wpa_supplicant( 1205): CMD: DRIVER SCAN-PASSIVE
D/wpa_supplicant( 1205): wpa_driver_priv_driver_cmd SCAN-PASSIVE len = 4096
D/wpa_supplicant( 1205): SCAN-PASSIVE not yet supported
V/WifiStateTracker(  925): Changing supplicant state: SCANNING ==&amp;gt; ASSOCIATING
D/wpa_supplicant( 1205): CMD: STATUS
D/wpa_supplicant( 1205): CMD: DRIVER RSSI-APPROX
D/wpa_supplicant( 1205): wpa_driver_priv_driver_cmd RSSI-APPROX len = 4096
D/wpa_supplicant( 1205): &amp;gt;&amp;gt;&amp;gt;. DRIVER EMULATE RSSI
E/wpa_supplicant( 1205): wpa_driver_priv_driver_cmd failed (-1): RSSI
D/wpa_supplicant( 1205): CMD: DRIVER LINKSPEED
D/wpa_supplicant( 1205): wpa_driver_priv_driver_cmd LINKSPEED len = 4096
D/wpa_supplicant( 1205): Link Speed command
E/wpa_supplicant( 1205): wpa_driver_priv_driver_cmd failed (-1): LINKSPEED
D/wpa_supplicant( 1205): EAPOL: disable timer tick
D/wpa_supplicant( 1205): RTM_NEWLINK: operstate=0 ifi_flags=0x11003 ([UP][LOWER_UP])
D/wpa_supplicant( 1205): RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
D/wpa_supplicant( 1205): RTM_NEWLINK: operstate=0 ifi_flags=0x11003 ([UP][LOWER_UP])
D/wpa_supplicant( 1205): RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
D/wpa_supplicant( 1205): Wireless event: cmd=0x8c08 len=50
D/wpa_supplicant( 1205): RTM_NEWLINK: operstate=0 ifi_flags=0x11003 ([UP][LOWER_UP])
D/wpa_supplicant( 1205): RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
D/wpa_supplicant( 1205): Wireless event: cmd=0x8b15 len=20
D/wpa_supplicant( 1205): Wireless event: new AP: 1c:17:d3:fc:db:79
D/wpa_supplicant( 1205): Association info event
D/wpa_supplicant( 1205): WPA: clearing AP WPA IE
D/wpa_supplicant( 1205): WPA: clearing AP RSN IE
D/wpa_supplicant( 1205): State: ASSOCIATING -&amp;gt; ASSOCIATED
I/wpa_supplicant( 1205): CTRL-EVENT-STATE-CHANGE id=0 state=4 BSSID=1c:17:d3:fc:db:79
D/wpa_supplicant( 1205): wpa_driver_wext_set_operstate: operstate 0-&amp;gt;0 (DORMANT)
D/wpa_supplicant( 1205): WEXT: Operstate: linkmode=-1, operstate=5
V/WifiMonitor(  925): Event [CTRL-EVENT-STATE-CHANGE id=0 state=4 BSSID=1c:17:d3:fc:db:79]
V/WifiStateTracker(  925): Changing supplicant state: ASSOCIATING ==&amp;gt; ASSOCIATED
D/wpa_supplicant( 1205): Associated to a new BSS: BSSID=1c:17:d3:fc:db:79
I/wpa_supplicant( 1205): Associated with 1c:17:d3:fc:db:79
D/wpa_supplicant( 1205): WPA: Association event - clear replay counter
D/wpa_supplicant( 1205): WPA: Clear old PTK
D/wpa_supplicant( 1205): EAPOL: External notification - portEnabled=0
D/wpa_supplicant( 1205): EAPOL: External notification - portValid=0
D/wpa_supplicant( 1205): EAPOL: External notification - portEnabled=1
D/wpa_supplicant( 1205): EAPOL: SUPP_PAE entering state S_FORCE_AUTH
D/wpa_supplicant( 1205): EAPOL: SUPP_BE entering state IDLE
D/wpa_supplicant( 1205): Cancelling authentication timeout
D/wpa_supplicant( 1205): State: ASSOCIATED -&amp;gt; COMPLETED
I/wpa_supplicant( 1205): CTRL-EVENT-STATE-CHANGE id=0 state=7 BSSID=00:00:00:00:00:00
I/wpa_supplicant( 1205): CTRL-EVENT-CONNECTED - Connection to 1c:17:d3:fc:db:79 completed (auth) [id=0 id_str=]
D/wpa_supplicant( 1205): wpa_driver_wext_set_operstate: operstate 0-&amp;gt;1 (UP)
D/wpa_supplicant( 1205): WEXT: Operstate: linkmode=-1, operstate=6
D/wpa_supplicant( 1205): Cancelling scan request
D/wpa_supplicant( 1205): RTM_NEWLINK: operstate=1 ifi_flags=0x11043 ([UP][RUNNING][LOWER_UP])
D/wpa_supplicant( 1205): RTM_NEWLINK, IFLA_IFNAME: Interface 'wlan0' added
V/WifiMonitor(  925): Event [Associated with 1c:17:d3:fc:db:79]
V/WifiMonitor(  925): Event [CTRL-EVENT-STATE-CHANGE id=0 state=7 BSSID=00:00:00:00:00:00]
V/WifiMonitor(  925): Event [CTRL-EVENT-CONNECTED - Connection to 1c:17:d3:fc:db:79 completed (auth) [id=0 id_str=]]
V/WifiStateTracker(  925): Changing supplicant state: ASSOCIATED ==&amp;gt; COMPLETED
V/WifiStateTracker(  925): New network state is CONNECTED
D/wpa_supplicant( 1205): CMD: STATUS
D/wpa_supplicant( 1205): CMD: STATUS
D/wpa_supplicant( 1205): CMD: DRIVER RSSI-APPROX
D/wpa_supplicant( 1205): wpa_driver_priv_driver_cmd RSSI-APPROX len = 4096
D/wpa_supplicant( 1205): &amp;gt;&amp;gt;&amp;gt;. DRIVER EMULATE RSSI
D/wpa_supplicant( 1205): CMD: DRIVER LINKSPEED
D/wpa_supplicant( 1205): wpa_driver_priv_driver_cmd LINKSPEED len = 4096
D/wpa_supplicant( 1205): Link Speed command
D/wpa_supplicant( 1205): CMD: DRIVER BTCOEXMODE 1
D/wpa_supplicant( 1205): wpa_driver_priv_driver_cmd BTCOEXMODE 1 len = 4096
D/wpa_supplicant( 1205): BTCOEXMODE not yet supported
D/wpa_supplicant( 1205): CMD: DRIVER GETPOWER
D/wpa_supplicant( 1205): wpa_driver_priv_driver_cmd GETPOWER len = 4096
D/wpa_supplicant( 1205): GETPOWER not yet supported
D/wpa_supplicant( 1205): CMD: DRIVER POWERMODE 1
D/wpa_supplicant( 1205): wpa_driver_priv_driver_cmd POWERMODE 1 len = 4096
D/wpa_supplicant( 1205): POWERMODE not yet supported
D/WifiStateTracker(  925): DHCP request started&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;However, DHCP appears not to function and Android unloads the driver and reloads it only to restart the scan &amp;#8594; associate &amp;#8594; DHCP query cycle. The error message is&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;E/WifiStateTracker(  925): DHCP request failed: Timed out waiting for dhcpcd to start
D/wpa_supplicant( 1205): CMD: DRIVER POWERMODE 0
D/wpa_supplicant( 1205): wpa_driver_priv_driver_cmd POWERMODE 0 len = 4096
D/wpa_supplicant( 1205): POWERMODE not yet supported
D/wpa_supplicant( 1205): CMD: DRIVER BTCOEXMODE 2
D/wpa_supplicant( 1205): wpa_driver_priv_driver_cmd BTCOEXMODE 2 len = 4096
D/wpa_supplicant( 1205): BTCOEXMODE not yet supported
D/wpa_supplicant( 1205): CMD: DISCONNECT
D/wpa_supplicant( 1205): wpa_driver_wext_disassociate
D/wpa_supplicant( 1205): No keys have been configured - skip key clearing
D/wpa_supplicant( 1205): State: COMPLETED -&amp;gt; DISCONNECTED
I/wpa_supplicant( 1205): CTRL-EVENT-STATE-CHANGE id=0 state=8 BSSID=00:00:00:00:00:00
D/wpa_supplicant( 1205): wpa_driver_wext_set_operstate: operstate 1-&amp;gt;0 (DORMANT)
D/wpa_supplicant( 1205): WEXT: Operstate: linkmode=-1, operstate=5
D/wpa_supplicant( 1205): EAPOL: External notification - portEnabled=0
D/wpa_supplicant( 1205): EAPOL: SUPP_PAE entering state DISCONNECTED&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Given that it is 7AM, that I have class and homework due, and that I have been working on this for the past 10 hours I will have to figure this out next time&amp;#8230;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;My full patch for wpa_supplicant 0.6.x, as found in the &lt;code&gt;external/wpa_supplicant_6&lt;/code&gt; directory in the Android source tree, is as follows:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/wpa_supplicant/Android.mk b/wpa_supplicant/Android.mk&lt;/span&gt;
&lt;span class="gh"&gt;index d3ab3dd..eb23985 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/wpa_supplicant/Android.mk&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/wpa_supplicant/Android.mk&lt;/span&gt;
&lt;span class="gu"&gt;@@ -32,6 +32,11 @@ ifeq ($(TARGET_ARCH),arm)&lt;/span&gt;
 L_CFLAGS += -mabi=aapcs-linux
 endif

&lt;span class="gi"&gt;+# Disable combo scan&lt;/span&gt;
&lt;span class="gi"&gt;+ifeq ($(BOARD_WEXT_NO_COMBO_SCAN),true)&lt;/span&gt;
&lt;span class="gi"&gt;+L_CFLAGS += -DWEXT_NO_COMBO_SCAN&lt;/span&gt;
&lt;span class="gi"&gt;+endif&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
 # To ignore possible wrong network configurations
 L_CFLAGS += -DWPA_IGNORE_CONFIG_ERRORS

&lt;span class="gh"&gt;diff --git a/wpa_supplicant/src/drivers/driver_wext.c b/wpa_supplicant/src/drivers/driver_wext.c&lt;/span&gt;
&lt;span class="gh"&gt;index bc5efff..36f28b5 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/wpa_supplicant/src/drivers/driver_wext.c&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/wpa_supplicant/src/drivers/driver_wext.c&lt;/span&gt;
&lt;span class="gu"&gt;@@ -253,7 +253,8 @@ int wpa_driver_wext_set_ssid(void *priv, const u8 *ssid, size_t ssid_len)&lt;/span&gt;
                if (ssid_len)
                        ssid_len++;
        }
&lt;span class="gd"&gt;-       iwr.u.essid.length = ssid_len;&lt;/span&gt;
&lt;span class="gi"&gt;+       drv-&amp;gt;ssid_len = iwr.u.essid.length = ssid_len;&lt;/span&gt;
&lt;span class="gi"&gt;+        os_strlcpy(drv-&amp;gt;ssid, buf, sizeof(drv-&amp;gt;ssid));&lt;/span&gt;

        if (ioctl(drv-&amp;gt;ioctl_sock, SIOCSIWESSID, &amp;amp;iwr) &amp;lt; 0) {
                wpa_printf(MSG_ERROR, &amp;quot;ioctl[SIOCSIWESSID]&amp;quot;);
&lt;span class="gu"&gt;@@ -969,6 +970,8 @@ void * wpa_driver_wext_init(void *ctx, const char *ifname)&lt;/span&gt;
        drv-&amp;gt;errors = 0;
        drv-&amp;gt;driver_is_started = TRUE;
        drv-&amp;gt;skip_disconnect = 0;
&lt;span class="gi"&gt;+        drv-&amp;gt;ssid_len = 0;&lt;/span&gt;
&lt;span class="gi"&gt;+        os_memset(drv-&amp;gt;ssid, 0, sizeof(drv-&amp;gt;ssid));&lt;/span&gt;
 #endif
        wpa_driver_wext_finish_drv_init(drv);

&lt;span class="gu"&gt;@@ -2559,12 +2562,207 @@ static int wpa_driver_priv_driver_cmd( void *priv, char *cmd, char *buf, size_t&lt;/span&gt;
        ret = ioctl(drv-&amp;gt;ioctl_sock, SIOCSIWPRIV, &amp;amp;iwr);

        if (ret &amp;lt; 0) {
&lt;span class="gi"&gt;+#ifdef ANDROID&lt;/span&gt;
&lt;span class="gi"&gt;+            if (os_strcasecmp(cmd, &amp;quot;RSSI&amp;quot;) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                struct iwreq wrq;&lt;/span&gt;
&lt;span class="gi"&gt;+                struct iw_statistics stats;&lt;/span&gt;
&lt;span class="gi"&gt;+                signed int rssi;&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG, &amp;quot;&amp;gt;&amp;gt;&amp;gt;. DRIVER EMULATE RSSI &amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                wrq.u.data.pointer = (caddr_t) &amp;amp;stats;&lt;/span&gt;
&lt;span class="gi"&gt;+                wrq.u.data.length = sizeof(stats);&lt;/span&gt;
&lt;span class="gi"&gt;+                /* Clear updated flag */&lt;/span&gt;
&lt;span class="gi"&gt;+                wrq.u.data.flags = 1;&lt;/span&gt;
&lt;span class="gi"&gt;+                strncpy(wrq.ifr_name, drv-&amp;gt;ifname, IFNAMSIZ);&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+                if (ioctl(drv-&amp;gt;ioctl_sock, SIOCGIWSTATS, &amp;amp;wrq) &amp;lt; 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                    perror(&amp;quot;ioctl[SIOCGIWSTATS]&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                    ret = -1;&lt;/span&gt;
&lt;span class="gi"&gt;+                } else {&lt;/span&gt;
&lt;span class="gi"&gt;+                    if (stats.qual.updated &amp;amp; IW_QUAL_DBM) {&lt;/span&gt;
&lt;span class="gi"&gt;+                        /* Values in dBm, stored in u8 with range 63 : -192 */&lt;/span&gt;
&lt;span class="gi"&gt;+                        rssi = ( stats.qual.level &amp;gt; 63 ) ?&lt;/span&gt;
&lt;span class="gi"&gt;+                            stats.qual.level - 0x100 :&lt;/span&gt;
&lt;span class="gi"&gt;+                            stats.qual.level;&lt;/span&gt;
&lt;span class="gi"&gt;+                    } else&lt;/span&gt;
&lt;span class="gi"&gt;+                        rssi = stats.qual.level;&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+                    if (drv-&amp;gt;ssid_len != 0 &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="gi"&gt;+                        drv-&amp;gt;ssid_len &amp;lt; buf_len) {&lt;/span&gt;
&lt;span class="gi"&gt;+                        os_memcpy((void *) buf, (void *)&lt;/span&gt;
&lt;span class="gi"&gt;+                              (drv-&amp;gt;ssid), drv-&amp;gt;ssid_len);&lt;/span&gt;
&lt;span class="gi"&gt;+                        ret = drv-&amp;gt;ssid_len;&lt;/span&gt;
&lt;span class="gi"&gt;+                        ret += snprintf(&amp;amp;buf[ret], buf_len-ret,&lt;/span&gt;
&lt;span class="gi"&gt;+                                &amp;quot; rssi %dn&amp;quot;, rssi);&lt;/span&gt;
&lt;span class="gi"&gt;+                        if (ret &amp;lt; (int)buf_len)&lt;/span&gt;
&lt;span class="gi"&gt;+                            return ret;&lt;/span&gt;
&lt;span class="gi"&gt;+                        ret = -1;&lt;/span&gt;
&lt;span class="gi"&gt;+                    }&lt;/span&gt;
&lt;span class="gi"&gt;+                }&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;START&amp;quot;, 5) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                os_sleep(0, WPA_DRIVER_WEXT_WAIT_US);&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_msg(drv-&amp;gt;ctx, MSG_INFO, WPA_EVENT_DRIVER_STATE &amp;quot;STARTED&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;STOP&amp;quot;, 4) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_msg(drv-&amp;gt;ctx, MSG_INFO, WPA_EVENT_DRIVER_STATE &amp;quot;STOPPED&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;LINKSPEED&amp;quot;, 9) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                struct iwreq wrq;&lt;/span&gt;
&lt;span class="gi"&gt;+                unsigned int linkspeed;&lt;/span&gt;
&lt;span class="gi"&gt;+                os_strncpy(wrq.ifr_name, drv-&amp;gt;ifname, IFNAMSIZ);&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG,&amp;quot;Link Speed command&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                if (ioctl(drv-&amp;gt;ioctl_sock, SIOCGIWRATE, &amp;amp;wrq) &amp;lt; 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                    perror(&amp;quot;ioctl[SIOCGIWRATE]&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                    ret = -1;&lt;/span&gt;
&lt;span class="gi"&gt;+                } else {&lt;/span&gt;
&lt;span class="gi"&gt;+                    linkspeed = wrq.u.bitrate.value / 1000000;&lt;/span&gt;
&lt;span class="gi"&gt;+                    ret = snprintf(buf, buf_len, &amp;quot;LinkSpeed %dn&amp;quot;,&lt;/span&gt;
&lt;span class="gi"&gt;+                            linkspeed);&lt;/span&gt;
&lt;span class="gi"&gt;+                }&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;SNR&amp;quot;, 3) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                struct iwreq wrq;&lt;/span&gt;
&lt;span class="gi"&gt;+                struct iw_statistics stats;&lt;/span&gt;
&lt;span class="gi"&gt;+                int snr, rssi, noise;&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+                wrq.u.data.pointer = (caddr_t) &amp;amp;stats;&lt;/span&gt;
&lt;span class="gi"&gt;+                wrq.u.data.length = sizeof(stats);&lt;/span&gt;
&lt;span class="gi"&gt;+                wrq.u.data.flags = 1; /* Clear updated flag */&lt;/span&gt;
&lt;span class="gi"&gt;+                strncpy(wrq.ifr_name, drv-&amp;gt;ifname, IFNAMSIZ);&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+                if (ioctl(drv-&amp;gt;ioctl_sock, SIOCGIWSTATS, &amp;amp;wrq) &amp;lt; 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                    perror(&amp;quot;ioctl[SIOCGIWSTATS]&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                    ret = -1;&lt;/span&gt;
&lt;span class="gi"&gt;+                } else {&lt;/span&gt;
&lt;span class="gi"&gt;+                    if (stats.qual.updated &amp;amp; IW_QUAL_DBM) {&lt;/span&gt;
&lt;span class="gi"&gt;+                        /* Values in dBm, stored in u8 with&lt;/span&gt;
&lt;span class="gi"&gt;+                         * range 63 : -192 */&lt;/span&gt;
&lt;span class="gi"&gt;+                        rssi = ( stats.qual.level &amp;gt; 63 ) ?&lt;/span&gt;
&lt;span class="gi"&gt;+                            stats.qual.level - 0x100 :&lt;/span&gt;
&lt;span class="gi"&gt;+                            stats.qual.level;&lt;/span&gt;
&lt;span class="gi"&gt;+                        noise = ( stats.qual.noise &amp;gt; 63 ) ?&lt;/span&gt;
&lt;span class="gi"&gt;+                            stats.qual.noise - 0x100 :&lt;/span&gt;
&lt;span class="gi"&gt;+                            stats.qual.noise;&lt;/span&gt;
&lt;span class="gi"&gt;+                    } else {&lt;/span&gt;
&lt;span class="gi"&gt;+                        rssi = stats.qual.level;&lt;/span&gt;
&lt;span class="gi"&gt;+                        noise = stats.qual.noise;&lt;/span&gt;
&lt;span class="gi"&gt;+                    }&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+                    snr = rssi - noise;&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+                    ret = snprintf(buf, buf_len, &amp;quot;snr = %un&amp;quot;,&lt;/span&gt;
&lt;span class="gi"&gt;+                            (unsigned int)snr);&lt;/span&gt;
&lt;span class="gi"&gt;+                    if (ret &amp;lt; (int)buf_len)&lt;/span&gt;
&lt;span class="gi"&gt;+                        return ret;&lt;/span&gt;
&lt;span class="gi"&gt;+                }&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;SET-RTS-THRESHOLD&amp;quot;, 17) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                struct iwreq wrq;&lt;/span&gt;
&lt;span class="gi"&gt;+                unsigned int rtsThreshold;&lt;/span&gt;
&lt;span class="gi"&gt;+                char *cp = cmd + 17;&lt;/span&gt;
&lt;span class="gi"&gt;+                char *endp;&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+                strncpy(wrq.ifr_name, drv-&amp;gt;ifname, IFNAMSIZ);&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+                if (*cp != &amp;#39;\0&amp;#39;) {&lt;/span&gt;
&lt;span class="gi"&gt;+                    rtsThreshold = (unsigned int)strtol(cp, &amp;amp;endp, 0);&lt;/span&gt;
&lt;span class="gi"&gt;+                    if (endp != cp) {&lt;/span&gt;
&lt;span class="gi"&gt;+                        wrq.u.rts.value = rtsThreshold;&lt;/span&gt;
&lt;span class="gi"&gt;+                        wrq.u.rts.fixed = 1;&lt;/span&gt;
&lt;span class="gi"&gt;+                        wrq.u.rts.disabled = 0;&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+                        if (ioctl(drv-&amp;gt;ioctl_sock, SIOCSIWRTS,&lt;/span&gt;
&lt;span class="gi"&gt;+                              &amp;amp;wrq) &amp;lt; 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                            perror(&amp;quot;ioctl[SIOCGIWRTS]&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                            ret = -1;&lt;/span&gt;
&lt;span class="gi"&gt;+                        } else {&lt;/span&gt;
&lt;span class="gi"&gt;+                            rtsThreshold = wrq.u.rts.value;&lt;/span&gt;
&lt;span class="gi"&gt;+                            wpa_printf(MSG_DEBUG,&amp;quot;Set RTS Threshold command = %d&amp;quot;, rtsThreshold);&lt;/span&gt;
&lt;span class="gi"&gt;+                            ret = 0;&lt;/span&gt;
&lt;span class="gi"&gt;+                        }&lt;/span&gt;
&lt;span class="gi"&gt;+                    }&lt;/span&gt;
&lt;span class="gi"&gt;+                }&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;GET-RTS-THRESHOLD&amp;quot;, 17) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                struct iwreq wrq;&lt;/span&gt;
&lt;span class="gi"&gt;+                unsigned int rtsThreshold;&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+                strncpy(wrq.ifr_name, drv-&amp;gt;ifname, IFNAMSIZ);&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+                if (ioctl(drv-&amp;gt;ioctl_sock, SIOCGIWRTS, &amp;amp;wrq) &amp;lt; 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                    perror(&amp;quot;ioctl[SIOCGIWRTS]&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                    ret = -1;&lt;/span&gt;
&lt;span class="gi"&gt;+                } else {&lt;/span&gt;
&lt;span class="gi"&gt;+                    rtsThreshold = wrq.u.rts.value;&lt;/span&gt;
&lt;span class="gi"&gt;+                    wpa_printf(MSG_DEBUG,&amp;quot;Get RTS Threshold command = %d&amp;quot;,&lt;/span&gt;
&lt;span class="gi"&gt;+                           rtsThreshold);&lt;/span&gt;
&lt;span class="gi"&gt;+                    ret = snprintf(buf, buf_len, &amp;quot;rts-threshold = %un&amp;quot;,&lt;/span&gt;
&lt;span class="gi"&gt;+                            rtsThreshold);&lt;/span&gt;
&lt;span class="gi"&gt;+                    if (ret &amp;lt; (int)buf_len)&lt;/span&gt;
&lt;span class="gi"&gt;+                        return ret;&lt;/span&gt;
&lt;span class="gi"&gt;+                }&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;SCAN-ACTIVE&amp;quot;, 11) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG,&amp;quot;SCAN-ACTIVE not yet supportedn&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                ret = 0 ;&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;SCAN-PASSIVE&amp;quot;, 12) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG,&amp;quot;SCAN-PASSIVE not yet supportedn&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                ret = 0 ;&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;SCAN-CHANNELS&amp;quot;, 13) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG,&amp;quot;SCAN-CHANNELS not yet supportedn&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                ret = 0 ;&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;BTCOEXSCAN-START&amp;quot;, 16) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG,&amp;quot;BTCOEXSCAN-START not yet supportedn&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                ret = 0 ;&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;BTCOEXSCAN-STOP&amp;quot;, 15) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG,&amp;quot;BTCOEXSCAN-STOP not yet supportedn&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                ret = 0 ;&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;RXFILTER-START&amp;quot;, 14) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG,&amp;quot;RXFILTER-START not yet supportedn&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                ret = 0 ;&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;RXFILTER-STOP&amp;quot;, 13) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG,&amp;quot;RXFILTER-STOP not yet supportedn&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                ret = 0 ;&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;RXFILTER-STATISTICS&amp;quot;, 19) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG,&amp;quot;RXFILTER-STATISTICS not yet supportedn&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                ret = 0 ;&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;RXFILTER-ADD&amp;quot;, 12) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG,&amp;quot;RXFILTER-ADD not yet supportedn&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                ret = 0 ;&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;RXFILTER-REMOVE&amp;quot;, 15) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG,&amp;quot;RXFILTER-REMOVE not yet supportedn&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                ret = 0 ;&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;BTCOEXMODE&amp;quot;, 10) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG,&amp;quot;BTCOEXMODE not yet supportedn&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                ret = 0 ;&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;BTCOEXSTAT&amp;quot;, 10) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG,&amp;quot;BTCOEXSTAT not yet supportedn&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                ret = 0 ;&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;POWERMODE&amp;quot;, 9) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG,&amp;quot;POWERMODE not yet supportedn&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                ret = 0 ;&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;GETPOWER&amp;quot;, 8 ) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                wpa_printf(MSG_DEBUG,&amp;quot;GETPOWER not yet supportedn&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                ret = 0 ;&lt;/span&gt;
&lt;span class="gi"&gt;+            } else if (os_strncasecmp(cmd, &amp;quot;MACADDR&amp;quot;, 7) == 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                /* MACADDR */&lt;/span&gt;
&lt;span class="gi"&gt;+                struct ifreq ifr;&lt;/span&gt;
&lt;span class="gi"&gt;+                os_memset(&amp;amp;ifr, 0, sizeof(ifr));&lt;/span&gt;
&lt;span class="gi"&gt;+                os_strncpy(ifr.ifr_name, drv-&amp;gt;ifname, IFNAMSIZ);&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+                if (ioctl(drv-&amp;gt;ioctl_sock, SIOCGIFHWADDR, &amp;amp;ifr) &amp;lt; 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+                    perror(&amp;quot;ioctl[SIOCGIFHWADDR]&amp;quot;);&lt;/span&gt;
&lt;span class="gi"&gt;+                    ret = -1;&lt;/span&gt;
&lt;span class="gi"&gt;+                } else {&lt;/span&gt;
&lt;span class="gi"&gt;+                    u8 *macaddr = (u8 *) ifr.ifr_hwaddr.sa_data;&lt;/span&gt;
&lt;span class="gi"&gt;+                    ret = snprintf(buf, buf_len, &amp;quot;Macaddr = &amp;quot; MACSTR &amp;quot;n&amp;quot;,&lt;/span&gt;
&lt;span class="gi"&gt;+                            MAC2STR(macaddr));&lt;/span&gt;
&lt;span class="gi"&gt;+                }&lt;/span&gt;
&lt;span class="gi"&gt;+            }&lt;/span&gt;
&lt;span class="gi"&gt;+            if (ret &amp;lt; 0) {&lt;/span&gt;
&lt;span class="gi"&gt;+#endif&lt;/span&gt;
                wpa_printf(MSG_ERROR, &amp;quot;%s failed (%d): %s&amp;quot;, __func__, ret, cmd);
                drv-&amp;gt;errors++;
                if (drv-&amp;gt;errors &amp;gt; WEXT_NUMBER_SEQUENTIAL_ERRORS) {
                        drv-&amp;gt;errors = 0;
                        wpa_msg(drv-&amp;gt;ctx, MSG_INFO, WPA_EVENT_DRIVER_STATE &amp;quot;HANGED&amp;quot;);
                }
&lt;span class="gi"&gt;+#ifdef ANDROID&lt;/span&gt;
&lt;span class="gi"&gt;+            }&lt;/span&gt;
&lt;span class="gi"&gt;+#endif&lt;/span&gt;
        } else {
                drv-&amp;gt;errors = 0;
                ret = 0;
&lt;span class="gh"&gt;diff --git a/wpa_supplicant/src/drivers/driver_wext.h b/wpa_supplicant/src/drivers/driver_wext.h&lt;/span&gt;
&lt;span class="gh"&gt;index 29ef44b..a7cde94 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/wpa_supplicant/src/drivers/driver_wext.h&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/wpa_supplicant/src/drivers/driver_wext.h&lt;/span&gt;
&lt;span class="gu"&gt;@@ -47,6 +47,9 @@ struct wpa_driver_wext_data {&lt;/span&gt;
        int errors;
        int driver_is_started;
        int skip_disconnect;
&lt;span class="gi"&gt;+        /* SIOCSIWPRIV support in WEXT for non-Android WiFi drivers. */&lt;/span&gt;
&lt;span class="gi"&gt;+        char ssid[33];&lt;/span&gt;
&lt;span class="gi"&gt;+        unsigned int ssid_len;&lt;/span&gt;
 #endif
 };

&lt;span class="gh"&gt;diff --git a/wpa_supplicant/wpa_supplicant.c b/wpa_supplicant/wpa_supplicant.c&lt;/span&gt;
&lt;span class="gh"&gt;index beec16e..ed40642 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/wpa_supplicant/wpa_supplicant.c&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/wpa_supplicant/wpa_supplicant.c&lt;/span&gt;
&lt;span class="gu"&gt;@@ -1490,6 +1490,9 @@ int wpa_drv_scan(struct wpa_supplicant *wpa_s, struct wpa_ssid **ssid_ptr)&lt;/span&gt;
        size_t ssid_len = 0;
        int ret = -1;

&lt;span class="gi"&gt;+#ifdef WEXT_NO_COMBO_SCAN&lt;/span&gt;
&lt;span class="gi"&gt;+       if (wpa_s-&amp;gt;driver-&amp;gt;scan) {&lt;/span&gt;
&lt;span class="gi"&gt;+#else&lt;/span&gt;
        if (wpa_s-&amp;gt;driver-&amp;gt;combo_scan) {
                ret = wpa_s-&amp;gt;driver-&amp;gt;combo_scan(wpa_s-&amp;gt;drv_priv, ssid_ptr,
                                                wpa_s-&amp;gt;conf-&amp;gt;ssid);
&lt;span class="gu"&gt;@@ -1499,6 +1502,7 @@ int wpa_drv_scan(struct wpa_supplicant *wpa_s, struct wpa_ssid **ssid_ptr)&lt;/span&gt;
                }
        }
        else if (wpa_s-&amp;gt;driver-&amp;gt;scan) {
&lt;span class="gi"&gt;+#endif&lt;/span&gt;
                if (*ssid_ptr) {
                        ssid_nm = (*ssid_ptr)-&amp;gt;ssid;
                        ssid_len = (*ssid_ptr)-&amp;gt;ssid_len;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Credit goes to Michael Trimarchi as the changes are totally adapted from &lt;a href="https://gitorious.org/flow-g1-5/platform_external_wpa_supplicant/commit/0079ce31faa15d882272891661493ce734e5ab3e"&gt;his patch&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I have added a repository for userland patches which can be accessed &lt;a href="https://gitorious.org/nitdroid/ul_patches"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>NITDroid userland update V</title><link href="https://seasonofcode.com/posts/nitdroid-userland-update-v.html" rel="alternate"></link><updated>2011-10-24T02:12:24-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-10-24:posts/nitdroid-userland-update-v.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;In short - I compiled Gingerbread (2.3.7_r1) without modification and it boots on the N810 out of the box. That was SO much easier than with Froyo&amp;#8230;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;div class="title"&gt;Gingerbread (2.3.7 r1) on the Nokia N810:&lt;/div&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="/assets/files/nitdroid/nitdroid_20111024.jpg"&gt;
&lt;img src="/assets/files/nitdroid/nitdroid_20111024_small.jpg" alt="Gingerbread (2.3.7 r1) on the Nokia N810" width="300" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I uploaded my device configuration files for Android to &lt;a href="https://gitorious.org/nitdroid/device"&gt;this Git repository&lt;/a&gt;. To build, the files should be kept in a folder with any name, say &lt;code&gt;nitdroid_device&lt;/code&gt;, under &lt;code&gt;$ANDROID_SOURCE/device&lt;/code&gt;. To build, run &lt;code&gt;make PRODUCT-nitdroid-eng&lt;/code&gt; or a variant from the root of the source tree.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I also calibrated the TSC2005 touchscreen. The code I pulled off &lt;a href="http://groups.google.com/group/android-internals/msg/7c6ff76e0381e95a"&gt;this thread&lt;/a&gt; back in May resulted in weird coordinates on my touchscreen since when I was running Froyo, and I took the time to correct the numeric values by trial and error on my touchscreen. The final diff from the &lt;code&gt;tsc2005.c&lt;/code&gt; created by the OpenWRT patches is:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gd"&gt;--- a/drivers/input/touchscreen/tsc2005.c&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/drivers/input/touchscreen/tsc2005.c&lt;/span&gt;
&lt;span class="gu"&gt;@@ -304,8 +304,8 @@ static void tsc2005_ts_update_pen_state(struct tsc2005 *ts,&lt;/span&gt;
                                        int x, int y, int pressure)
 {
        if (pressure) {
&lt;span class="gi"&gt;+                x = abs((x - 260) * 800 / 3550);&lt;/span&gt;
&lt;span class="gi"&gt;+                y = abs((3600 - y) * 480 / 3750);&lt;/span&gt;
                input_report_abs(ts-&amp;gt;idev, ABS_X, x);
                input_report_abs(ts-&amp;gt;idev, ABS_Y, y);
                input_report_abs(ts-&amp;gt;idev, ABS_PRESSURE, pressure);
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I have committed it to &lt;a href="https://gitorious.org/nitdroid/kernel_patches"&gt;my kernel patches repository&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;There are still a million issues though&amp;#8230;sound and wireless don&amp;#8217;t work yet, and most importantly the system panics after about a minute of inaction, complaining (untruthfully) that the SD card had been removed. But it&amp;#8217;s a start.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>Using ALSA audio drivers in Android</title><link href="https://seasonofcode.com/posts/using-alsa-audio-drivers-in-android.html" rel="alternate"></link><updated>2011-10-23T21:13:53-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-10-23:posts/using-alsa-audio-drivers-in-android.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;While working on a port of the Gingerbread (2.3.7) userland of Android for the N810, I had to figure out how to add support for an audio chip with a working ALSA driver in an Android build. The information was out there but it took me a while to figure everything out, so here&amp;#8217;s a brief summary of the process.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;First, of course, ALSA drivers for the chip must be enabled in the kernel; to check whether they are working, see if &lt;code&gt;/dev/snd&lt;/code&gt; is properly populated. If not, check if the driver has been compiled into the kernel and not as a module.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;There are three libraries that act as intermediate layers between an ALSA sound device and the Android userland. Due to &lt;a href="http://groups.google.com/group/android-building/msg/c73c14f9b0dcd15a?pli=1"&gt;the recent relocation of the Android source tree&lt;/a&gt;, I used alternative URLs for the three libraries. The code (shamelessly stolen and modified from &lt;a href="http://www.armadeus.com/wiki/index.php?title=Android#Audio"&gt;this Armadeus Wiki page&lt;/a&gt;) is as follows, assuming &lt;code&gt;$ANDROID_SOURCE&lt;/code&gt; points to the root of the checked-out Android source tree:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$ANDROID_SOURCE&lt;/span&gt;/external
git clone git://git.omapzoom.org/platform/external/alsa-lib.git
git clone git://git.omapzoom.org/platform/external/alsa-utils.git

&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$ANDROID_SOURCE&lt;/span&gt;/hardware
git clone git://git.omapzoom.org/platform/hardware/alsa_sound.git
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;However, a bogus commit to the last library in &lt;code&gt;platform/hardware/alsa_sound&lt;/code&gt; breaks the build (as explained &lt;a href="http://comments.gmane.org/gmane.comp.handhelds.android.porting/15792"&gt;in this thread&lt;/a&gt;), hence:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$ANDROID_SOURCE&lt;/span&gt;/hardware/alsa_sound
git checkout ece3f1b6f1e6a67d02e42490eca6c7de62220b57
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Then, modify the &lt;code&gt;BoardConfig.mk&lt;/code&gt; of your build to include:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;HAVE_HTC_AUDIO_DRIVER&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;BOARD_USES_GENERIC_AUDIO&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;BOARD_USES_ALSA_AUDIO&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;BUILD_WITH_ALSA_UTILS&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And that should do the trick.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category><category term="Android"></category><category term="Featured"></category></entry><entry><title>NITDroid kernel 2.6.38 - 3rd pass</title><link href="https://seasonofcode.com/posts/nitdroid-kernel-2638-3rd-pass.html" rel="alternate"></link><updated>2011-10-21T13:41:43-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-10-21:posts/nitdroid-kernel-2638-3rd-pass.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Thanks to the amazing comment by bhaskar on my previous post, I am glad to announce that the LM8323 keyboard is now functional in the 2.6.38 kernel after applying the threaded IRQ patch by Felipe and the level-triggered IRQ patch by Leigh found on &lt;a href="http://comments.gmane.org/gmane.linux.ports.arm.omap/58910"&gt;this thread on the LM8323&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I collected all the patches I used against the Android-OMAP 2.6.38 kernel at &lt;a href="https://gitorious.org/nitdroid/kernel_patches"&gt;this new Git repository for NITDroid kernel patches&lt;/a&gt; for better organization. I figured maintaining and working with patches was better than the entire kernel tree, and it also makes the changes easier for someone else to incorporate into their own kernel.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;A recent problem I have had with this particular kernel is that it is not able to boot Maemo anymore, but fails with weird errors about watchdog processes. This is not a huge problem since I am much more interested in getting Android to work, but it does complicate my testing process as I am now no longer able to test the kernel with a known working user software stack. So before continuing with the kernel, I am going to resume working on the userland again, and see what I can get done there. In particular, I am going to try switching gears to Gingerbread, and see if I can get its userland to boot instead. From what I have been able to read the differences between the Froyo and Gingerbread userlands should not be so large as to cause serious porting issues. But we will see in the following weeks whether that is true.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>NITDroid kernel 2.6.38 - 2nd pass</title><link href="https://seasonofcode.com/posts/nitdroid-kernel-2638-2nd-pass.html" rel="alternate"></link><updated>2011-10-20T23:52:52-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-10-20:posts/nitdroid-kernel-2638-2nd-pass.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I have made some progress with the 2.6.38 kernel on the Nokia N810. It now boots fine to the Android GUI:&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;div class="title"&gt;Froyo home screen on the Nokia N810, running kernel 2.6.38&lt;/div&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="/assets/files/nitdroid/nitdroid_20111021_1.jpg"&gt;
&lt;img src="/assets/files/nitdroid/nitdroid_20111021_1_small.jpg" alt="Froyo home screen on the Nokia N810, running kernel 2.6.38" width="150" height="267" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;div class="title"&gt;File Expert app on the Nokia N810&lt;/div&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="/assets/files/nitdroid/nitdroid_20111021_2.jpg"&gt;
&lt;img src="/assets/files/nitdroid/nitdroid_20111021_2_small.jpg" alt="File Expert app on the Nokia N810" width="150" height="267" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;But unfortunately it&amp;#8217;s still too early to celebrate. There is a very bizarre bug in my kernel: upon boot-up, the keyboard works fine, but after an indeterminate number of key presses, the keyboard stops working. Other input sources, such as the touchscreen, are not affected, while hardware buttons like the back, home and menu keys, which are attached to the same keyboard device (LM8323), stop functioning as well. I inserted debug statements into the keyboard driver and booted to the console to watch kernel messages as I pressed keys. I was very surprised to discover that after the first few key presses, not even the IRQ handler registered by the keyboard driver is invoked anymore. I do not see at all how that is even possible; I will need to investigate further next time.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Incidentally, I also came across &lt;a href="http://blogs.arm.com/software-enablement/498-from-zero-to-boot-porting-android-to-your-arm-platform/"&gt;this wonderful article on Android porting&lt;/a&gt; from an engineer at ARM. It is the most detailed and well-written text on the subject that I have ever read. My approach does differ from the one described in the article though.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>How Rooting Works -- A Technical Explanation of the Android Rooting Process</title><link href="https://seasonofcode.com/posts/how-rooting-works-a-technical-explanation-of-the-android-rooting-process.html" rel="alternate"></link><updated>2011-10-19T21:55:36-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-10-19:posts/how-rooting-works-a-technical-explanation-of-the-android-rooting-process.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;&lt;img src="/assets/files/rooting_android.png"
align="right"
style="max-width: 200px; width: 25%; margin: 1.5em 0 1.5em 1.5em;"&gt;
I have always been curious how rooting actually worked behind the scenes. After
recently acquiring a new Eee Pad Slider, a Honeycomb tablet that so far no one
has been able to root, the frustration of being locked out of this amazing piece
of hardware with so much potential led me to finally sit down and figure out
what exactly rooting means, what it entails from a technical perspective, and
how hackers out in the wild are approaching the rooting of a new device.
Although all this information is out there, I have not been able to find a good
article that had both the level of technical detail that I wanted and an
appropriate introduction to the big picture, and so I decided to write my own.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is NOT a noob-friendly guide to rooting a particular Android device.
Rather, it is a general explanation of how stock Android ROMs try to prevent
unprivileged access, how hackers attack this problem and how rooting software
leverage various exploits to defeat these security mechanisms.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_i_the_goal"&gt;I. The Goal&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let us first take a step back and consider &lt;em&gt;exactly&lt;/em&gt; what we mean by rooting.
Forget flashing custom ROMs, enabling WiFi tethering or installing
Superuser.apk; fundamentally, rooting is about obtaining root access to the
underlying Linux system beneath Android and thus gaining absolute control over
the software that is running on the device. Things that require root access on a
typical Linux system&amp;#8201;&amp;#8212;&amp;#8201;mounting and unmounting file systems, starting your
favorite SSH or HTTP or DHCP or DNS or proxy servers, killing system processes,
chroot-ing, etc.,&amp;#8201;&amp;#8212;&amp;#8201;require root access on Android as well. Being able to run
arbitrary commands as the root user allows you to do absolutely &lt;em&gt;anything&lt;/em&gt; on a
Linux / Android system, and this is real goal of rooting.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Stock OEM Android builds typically do not allow users to execute arbitrary code
as root. This essentially means that you as a user are granted only limited
control over your own device; you can make your device do task &lt;em&gt;X&lt;/em&gt; only if the
manufacturer explicitly decided to allow it and shipped a program to do it.  You
will not be able to use third-party apps to accomplish a task that your
manufacturer does not wish you to do. WiFi tethering is a good example of this.
Cell phone carriers obviously do not want you to tether your phone without
paying them additional charges. Therefore, many phones come pre-packaged with
their own proprietary WiFi tethering apps that demand extraneous fees. But
without root access, you will not be able to install a free alternative like
&lt;a href="http://code.google.com/p/android-wifi-tether/"&gt; Wireless Tether For Root
Users&lt;/a&gt;. Why this is accepted practice in the industry is a mystery to me.  The
only difference between cell phones, tablets and computers is their form factor;
but while a PC vendor would fail spectacularly if they tried to prevent users
from running arbitrary programs on their machines, cell phone vendors are
clearly not judged along the same lines. But such arguments would belong to
another article.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_ii_the_enemy_protection_mechanisms_on_a_stock_oem_android_rom"&gt;II. The Enemy: Protection Mechanisms On A Stock OEM Android ROM&lt;/h3&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_1_bootloader_and_recovery"&gt;1. Bootloader and Recovery&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The bootloader, the first piece of code executed when your device is powered on,
is responsible for loading the Android OS and the recovery system and flashing a
new ROM. People refer to some bootloaders as "unlocked" if a user can flash and
boot arbitrary ROMs without hacking; unfortunately, many Android devices have
locked bootloaders that you would have to hack around in order to make them do
anything other than boot the stock ROM. A Samsung smartphone I had used some
months ago had an unlocked bootloader; I could press a certain combination of
hardware keys on the phone, connect it to my computer, and flash any custom ROM
onto it using Samsung&amp;#8217;s utilities without having to circumvent any protection
mechanisms. The same is not true for my Motorola Droid 2 Global; the bootloader,
as far as I know, cannot be hacked. The Eee Pad Slider, on the other hand, is an
interesting beast; as with other nVidia Tegra 2 based devices, its bootloader is
controllable through the &lt;code&gt;nvflash&lt;/code&gt; utility, but only if you know the &lt;em&gt;secure
boot key&lt;/em&gt; (SBK) of the device.  (The SBK is a private AES key used to encrypt
the commands sent to the bootloader; the bootloader will only accept the command
if it has been encrypted by the particular key of the device.) Currently, as the
SBK of the Eee Pad Slider is not publicly known, the bootloader remains
inaccessible.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;System recovery is the second piece of low-level code on board any Android
device. It is separate from the Android userland and is typically located on its
own partition; it is usually booted by the bootloader when you press a certain
combination of hardware keys. It is important to understand that it is a totally
independent program; Linux and the Android userland is not loaded when you boot
into recovery, and any high-level concept such as root does not exist here. It
is simple program that really is a very primitive OS, and it has absolute
control over the system and will do anything you want as long as the code to do
it is built in. Stock recovery varies with the manufacturer, but often includes
functionalities like reformatting the &lt;code&gt;/data&lt;/code&gt; partition (factory reset) and
flashing an update ROM (&lt;code&gt;update.zip&lt;/code&gt;, located at the root of the external
microSD card) signed by the manufacturer.  Note I said &lt;em&gt;signed by the
manufacturer&lt;/em&gt;; typically it is not possible to flash custom update files unless
you obtain the private key of the manufacturer and sign your custom update with
it, which is both impossible for most and illegal under certain jurisdictions.
However, since recovery is stored in a partition just like &lt;code&gt;/system&lt;/code&gt;, &lt;code&gt;/data&lt;/code&gt;
and &lt;code&gt;/cache&lt;/code&gt; (more about that later), you can replace it with a custom recovery
if you have root access in Linux / Android.  Most people do just that upon
rooting their device; &lt;a href="http://www.clockworkmod.com/"&gt;ClockworkMod Recovery&lt;/a&gt;
is a popular third-party recovery image, and allows you to flash arbitrary ROMs,
backup and restore partitions, and lots of other magic.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_2_adb"&gt;2. ADB&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;ADB (see
&lt;a href="http://developer.android.com/guide/developing/tools/adb.html"&gt;the official documentation for ADB&lt;/a&gt;)
allows a PC or a Mac to connect to an Android device and perform certain
operations. One such operation is to launch a simple shell on the device, using
the command &lt;code&gt;adb shell&lt;/code&gt;. The real question is what user do the commands executed
by that shell process run as. It turns out that it depends on the value of an
Android system property, named &lt;code&gt;ro.secure&lt;/code&gt;. (You can view the value of this
property by typing &lt;code&gt;getprop ro.secure&lt;/code&gt; either through an ADB shell or on a
terminal emulator on the device.) If &lt;code&gt;ro.secure=0&lt;/code&gt;, an ADB shell will run
commands as the root user on the device. But if &lt;code&gt;ro.secure=1&lt;/code&gt;, an ADB shell will
run commands as an unprivileged user on the device. Guess what &lt;code&gt;ro.secure&lt;/code&gt; is
set to on almost every stock OEM Android build. But can we change the value of
&lt;code&gt;ro.secure&lt;/code&gt; on a system? The answer is no, as implied by the &lt;code&gt;ro&lt;/code&gt; in the name of
the property. The value of this property is set at boot time from the
&lt;code&gt;default.prop&lt;/code&gt; file in the root directory. The contents of the root directory
are essentially &lt;em&gt;copied&lt;/em&gt; from a partition in the internal storage on boot, but
you cannot write to the partition if you are not already root. In other words,
this property denies root access via ADB, and the only way you could change it
is by gaining root access in the first place. Thus, it is secure.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_3_android_ui"&gt;3. Android UI&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;On an Android system, all Android applications that you can see or interact with
directly are running as _un_privileged users in sandboxes. Logically, a program
running as an unprivileged user cannot start another program that is run as the
privileged user; otherwise any program can simply start another copy of itself
in privileged mode and gain privileged access to everything. On the other hand,
a program running as root can start another program as root or as an
unprivileged user. On Linux, privilege escalation is usually accomplished via
the &lt;code&gt;su&lt;/code&gt; and &lt;code&gt;sudo&lt;/code&gt; programs; they are often the only programs in the system
that are able to execute the system call &lt;code&gt;setuid(0)&lt;/code&gt; that changes the current
program from running as an unprivileged user to running as root.  Apps that
label themselves as requiring root are in reality just executing other programs
(often just native binaries packaged with the app) through &lt;code&gt;su&lt;/code&gt;. Unsurprisingly,
stock OEM ROMs never come with these &lt;code&gt;su&lt;/code&gt;. You cannot just download it or copy
it over either; it needs to have its SUID bit set, which indicates to the system
that the programs this allowed to escalate its runtime privileges to root. But
of course, if you are not root, you cannot set the SUID bit on a program. To
summarize, what this means is that any program that you can interact with on
Android (and hence running in unprivileged mode) is unable to either 1) gain
privileged access and execute in privileged mode, or 2) start another program
that executes in privileged mode.  If this holds, the Android system by itself
is pretty much immune to privilege escalation attempts. We will see the loophole
exploited by on-device rooting applications in the next section.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_iii_fighting_the_system"&gt;III. Fighting the System&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So how the hell do you root an Android? Well, from the security mechanisms
described above, we can figure out how to attack each component in turn.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If your device happens to have an unlocked bootloader, you&amp;#8217;re pretty much done.
An example is the Samsung phone that I had had. Since the bootloader allowed the
flashing of arbitrary ROMs, somebody essentially pulled the stock ROM from the
phone (using &lt;code&gt;dd&lt;/code&gt;), added &lt;code&gt;su&lt;/code&gt;, and repackaged it into a modified ROM. All I as
a user needed to do was to power off the phone, press a certain combination of
hardware keys to start the phone in flashing mode, and use Samsung&amp;#8217;s utilities
to flash the modified ROM onto the phone.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Believe it or not, certain manufacturers don&amp;#8217;t actually set &lt;code&gt;ro.secure&lt;/code&gt; to 1. If
that is the case, rooting is even easier; just plug the phone into your computer
and run ADB, and you now have a shell that can execute any program as root. You
can then mount &lt;code&gt;/system&lt;/code&gt; as read-write, install &lt;code&gt;su&lt;/code&gt; and all your dreams have
come true.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;But many other Android devices have locked bootloaders and &lt;code&gt;ro.secure&lt;/code&gt; set. As
explained above, they should not be root-able because you can only interact with
unprivileged programs on the system and they cannot help you execute any
privileged code. So what&amp;#8217;s the solution?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We know that a number of important programs, including low-level system
services, must run as root even on Android in order to access hardware
resources. Typing &lt;code&gt;ps&lt;/code&gt; on an Android shell (either via ADB or a terminal
emulator on the device) will give you an idea. These programs are started by the
&lt;code&gt;init&lt;/code&gt; process, the first process started by the kernel (I often feel that the
kernel and the &lt;code&gt;init&lt;/code&gt; process are kind of analogous to Adam and Eve&amp;#8201;&amp;#8212;&amp;#8201;the
kernel spawns &lt;code&gt;init&lt;/code&gt; in a particular fashion, and &lt;code&gt;init&lt;/code&gt; then goes on and spawns
all other processes) which has to run as root because it needs to start other
privileged system processes.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now here&amp;#8217;s the key insight: if you can hack / trick one of these system
processes running in privileged mode to execute your arbitrary code, you have
just gained privileged access to the system. This how all one-click-root methods
work, including z4root, gingerbreak, and so on. If you are truly curious, I
highly recommend
&lt;a href="http://jon.oberheide.org/files/bsides11-dontrootrobots.pdf"&gt;this excellent
presentation on the various exploits used by current rooting tools&lt;/a&gt;, but the
details are not as relevant here as the simple idea behind them. That idea is
that there are vulnerabilities in the system processes running as root in the
background that, if exploited, will allow us to execute arbitrary code as root.
Well, that "arbitrary code" is most certainly a piece of code that mounts
&lt;code&gt;/system&lt;/code&gt; in read-write mode and installs a copy of &lt;code&gt;su&lt;/code&gt; permanently on the
system, so that from then on we don&amp;#8217;t need to jump through the hoops to run the
programs we really wanted to run in the first place.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Since Android is open source as is Linux, what people have done is to scrutinize
and reason about the source code of the various system services until they find
a security hole they can leverage. This becomes increasingly hard as Google and
the maintainers of the various pieces of code fix those particular
vulnerabilities when they are discovered and published, which means that the
exploits will eventually become obsolete with newer devices. But the good news
is that manufacturers are not stupid enough to push OTA updates to fix a
vulnerability just to prevent rooting as it is very expensive for them; in
addition, devices in the market are always lagging behind the newest software
releases. Thus, it takes quite some time before these rooting tools are rendered
useless by new patches, and by then hopefully other exploits would have been
discovered.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_iv_see_it_in_action"&gt;IV. See It In Action!&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;To see all of this in action, you are invited to check out my follow-up article:
&lt;a href="/posts/android-rooting-a-developers-guide.html"&gt;Android Rooting: A
Developer&amp;#8217;s Guide&lt;/a&gt;, which explains how I applied this stuff to figure out how to
root an actual device.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Android"></category><category term="Featured"></category></entry><entry><title>ConnectBot on the Asus Eee Pad Slider (SL101)</title><link href="https://seasonofcode.com/posts/connectbot-on-the-asus-eee-pad-slider-sl101.html" rel="alternate"></link><updated>2011-10-18T03:45:15-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-10-18:posts/connectbot-on-the-asus-eee-pad-slider-sl101.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I recently acquired an &lt;a href="http://www.asus.com/Eee/Eee_Pad/Eee_Pad_Slider_SL101"&gt;Eee Pad Slider&lt;/a&gt;, a truly groundbreaking Android tablet running Honeycomb 3.2. Its unique sliding keyboard allows it to transcend the conventional definition of tablets as content consumption devices while preserving to perfection the intimacy of touch interface interaction. To be honest, however, up until last week I had always seen tablets as these flashy toys whose only purpose in life was to satisfy the vanity of a few mindless and unfortunately privileged gadget fanboys. But I fell in love with the Eee Pad Slider at first sight. This was a device that perfectly bridged that gap between my laptop and my smartphone; this was a device that was as immediately accessible, friendly, and visually appealing as my smartphone for casual use, but as pragmatic and dependable as my Thinkpad T400 when I need to get down and serious and reply to that one email or fix that one bug in my code. It&amp;#8217;s simply the most versatile mobile device between a phone and a full blown PC.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Before I am dismissed as a crazed and dangerous fanatic, however, I should admit that I fully understand the fact that the Slider is not the best tablet for everyone. The Slider is probably twice as thick as the iPad or the Samsung Galaxy Tab and about the same price as either one of the two. Its keys are much less comfortable than those on your typical ultraportable laptop. It is also brown, a color I would not place very high on my list of good colors for electronic devices. It is probably not the best consumer lifestyle gadget you can find on the market, nor the most suitable for mobile office computing. But it is a very innovative and intelligent cross of the two worlds, and that happened to be exactly that one device I could not find in the hugely diverse and volatile market of mobile devices of today.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Back, then, to the real deal. I am a computer geek and I cannot live very well without SSH. On Android the SSH client that I (and it looks like everyone else) have been using is ConnectBot. So among the first apps I installed on my brand new Eee Pad Slider was ConnectBot; &lt;em&gt;finally&lt;/em&gt; I thought, there was a mobile keyboard that had real control, shift, and alt keys that I could use. I was very surprised, therefore, when I realized that none of them worked. Given that the Slider has only been released for a month, forum threads and other helpful resources are nonexistent. I dug up &lt;a href="http://code.google.com/p/connectbot/wiki/KeyboardShortcuts"&gt; the discussion on this document&lt;/a&gt; and found &lt;a href="https://github.com/lorantkurthy/connectbot"&gt;Lorant Kurthy&amp;#8217;s fork of ConnectBot on GitHub&lt;/a&gt; that fixed the same issues for the Eee Pad Transformer. I cloned his repository and, with a one-line change in the source code, enabled his fix for the Slider as well. So there we go - here is &lt;a href="/assets/files/ConnectBot-release.apk"&gt;my version of ConnectBot with fixes for the Eee Pad Transformer and Eee Pad Slider hardware keyboards&lt;/a&gt;. As far as I can tell it works fine; in fact, I am typing this post on the Eee Pad Slider using Vim in an SSH session to my laptop via my version of ConnectBot. All the credit goes to Lorant Kurthy though.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Misc"></category></entry><entry><title>NITDroid kernel 2.6.38 - 1st pass</title><link href="https://seasonofcode.com/posts/nitdroid-kernel-2638-1st-pass.html" rel="alternate"></link><updated>2011-09-20T02:44:27-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-09-20:posts/nitdroid-kernel-2638-1st-pass.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;It&amp;#8217;s been a while since I last updated this blog - the summer has been unsurprisingly busy, and as school has started again my hiatus is now officially over. But first, a HUGE thanks to all who inquired about and commented on the NITDroid project in the meantime, as even though I haven&amp;#8217;t been able to get back to you individually your support has meant a lot to me.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The first challenge I decided to tackle was improving the kernel I used. The kernel I had gotten working was based on Android OMAP 2.6.32 and contained many patches and copied files from various sources that I did not understand and could not hope to port to a newer kernel if needed. Looking through the diff files revealed many unnecessary or irrelevant changes that made them essentially useless beyond Android OMAP 2.6.32, and given the availability of Gingerbread, I figured that it would be beneficial in the long run if I could 1) minimize the modifications to the kernel required, and 2) port these changes to a newer version of the kernel.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I started working, therefore, with Android OMAP 2.6.38 (since &lt;a href="http://git.kernel.org"&gt;kernel.org&lt;/a&gt; is down &lt;a href="http://linearfix.wordpress.com/2011/09/12/linux-com-and-linuxfoundation-org-down-after-security-breach/"&gt;due to a security breach&lt;/a&gt;, I had to use a mirror at &lt;a href="http://git.omapzoom.org/?p=kernel/omap.git;a=summary"&gt;git.omapzoom.org&lt;/a&gt;). I spent two days porting each necessary change manually, but to no avail. I was able to fix a problem introduced in 2.6.38 where the LCD was being reset by inserting &lt;code&gt;for (;;) {}&lt;/code&gt; to determine the source of the problem; only later did I discover &lt;a href="http://www.mail-archive.com/linux-omap@vger.kernel.org/msg45684.html"&gt;this email by Michael Buesch&lt;/a&gt; which proposed a much simpler solution. But even then I did not get far; I was still stuck with the Nokia logo screen and could go no further. I had forgotten how painful debugging kernel builds were: there are no error messages or debugging output, and the only thing observable would be a frozen Nokia logo.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Then, at wit&amp;#8217;s end a couple of hours ago, I searched for the author of said email on Google and found &lt;a href="http://bu3sch.de/cms/hacking/n810-openwrt.html"&gt;Michael Buesch&amp;#8217;s page about his and others' work on OpenWRT on the N810&lt;/a&gt;. I followed the instructions and was able to build a working kernel for the N810 with some minor fixes. The truly marvellous thing about this work, however, is that the exact patches that are used against a vanilla kernel are provided; they can be viewed &lt;a href="https://dev.openwrt.org/browser/trunk/target/linux/omap24xx/patches-2.6.38"&gt;in the OpenWRT SVN repo&lt;/a&gt; for instance. I went ahead and applied all their patches to a vanilla Android OMAP 2.6.38 kernel, but the resulting kernel still refused to boot. I ended up comparing each affected file painstakingly to its counterpart in the OpenWRT tree and was finally able to find the culprit: &lt;code&gt;arch/arm/mach-omap2/clock2420_data.c&lt;/code&gt;; the problem was so dumb that I cannot believe it has been checked in at all. Here&amp;#8217;s the diff:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/arch/arm/mach-omap2/clock2420_data.c b/arch/arm/mach-omap2/clock2420_data.c&lt;/span&gt;
&lt;span class="gh"&gt;index 3c1712b..0a992bc 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/arch/arm/mach-omap2/clock2420_data.c&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/arch/arm/mach-omap2/clock2420_data.c&lt;/span&gt;
&lt;span class="gu"&gt;@@ -1786,10 +1786,10 @@ static struct omap_clk omap2420_clks[] = {&lt;/span&gt;
        CLK(NULL,       &amp;quot;gfx_2d_fck&amp;quot;,   &amp;amp;gfx_2d_fck,    CK_242X),
        CLK(NULL,       &amp;quot;gfx_ick&amp;quot;,      &amp;amp;gfx_ick,       CK_242X),
        /* DSS domain clocks */
&lt;span class="gd"&gt;-       CLK(&amp;quot;omap_dss&amp;quot;, &amp;quot;ick&amp;quot;,          &amp;amp;dss_ick,       CK_242X),&lt;/span&gt;
&lt;span class="gd"&gt;-       CLK(&amp;quot;omap_dss&amp;quot;, &amp;quot;fck&amp;quot;,          &amp;amp;dss1_fck,      CK_242X),&lt;/span&gt;
&lt;span class="gd"&gt;-       CLK(&amp;quot;omap_dss&amp;quot;, &amp;quot;sys_clk&amp;quot;,      &amp;amp;dss2_fck,      CK_242X),&lt;/span&gt;
&lt;span class="gd"&gt;-       CLK(&amp;quot;omap_dss&amp;quot;, &amp;quot;tv_clk&amp;quot;,       &amp;amp;dss_54m_fck,   CK_242X),&lt;/span&gt;
&lt;span class="gi"&gt;+       CLK(&amp;quot;omapdss&amp;quot;,  &amp;quot;ick&amp;quot;,          &amp;amp;dss_ick,       CK_242X),&lt;/span&gt;
&lt;span class="gi"&gt;+       CLK(&amp;quot;omapdss&amp;quot;,  &amp;quot;dss1_fck&amp;quot;,     &amp;amp;dss1_fck,      CK_242X),&lt;/span&gt;
&lt;span class="gi"&gt;+       CLK(&amp;quot;omapdss&amp;quot;,  &amp;quot;dss2_fck&amp;quot;,     &amp;amp;dss2_fck,      CK_242X),&lt;/span&gt;
&lt;span class="gi"&gt;+       CLK(&amp;quot;omapdss&amp;quot;,  &amp;quot;tv_fck&amp;quot;,       &amp;amp;dss_54m_fck,   CK_242X),&lt;/span&gt;
        /* L3 domain clocks */
        CLK(NULL,       &amp;quot;core_l3_ck&amp;quot;,   &amp;amp;core_l3_ck,    CK_242X),
        CLK(NULL,       &amp;quot;ssi_fck&amp;quot;,      &amp;amp;ssi_ssr_sst_fck, CK_242X),
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;With all of these changes, and essentially the same &lt;code&gt;n810_defconfig&lt;/code&gt; from before, the produced kernel boots up to Android, but dies when it tries to initialize the GUI. I have not found a solution to that yet, but at least it boots to console and prints out error messages. I will need to investigate the issue further next time.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;From now on, I think I will no longer reinvent the wheel and rely on OpenWRT patches for the N810 as much as possible. Thanks, Michael Buesch and everyone at OpenWRT!&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>QEMU ARM boot tags</title><link href="https://seasonofcode.com/posts/qemu-arm-boot-tags.html" rel="alternate"></link><updated>2011-05-18T16:22:35-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-05-18:posts/qemu-arm-boot-tags.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I had to fight against a "feature" in QEMU today as I was screwing around. Normally when QEMU ARM boots a Linux kernel it sets up a tag list with all sorts of good information like available memory regions as explained &lt;a href="http://www.arm.linux.org.uk/developer/booting.php"&gt;here&lt;/a&gt;. This is the Linux&amp;#8217;s standard for ARM and any ARM bootloader that loads Linux must do this. However, when I was booting my custom kernel with &lt;code&gt;qemu-system-arm&lt;/code&gt; I discovered that R1 and R2 were empty upon boot using the switch &lt;code&gt;-monitor stdio&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;QEMU 0.13.0 monitor - type 'help' for more information
(qemu) info registers
R00=00000000 R01=00000000 R02=00000000 R03=00000000
R04=00000000 R05=00000000 R06=00000000 R07=00000000
R08=00000000 R09=00000000 R10=00000000 R11=00000000
R12=00000000 R13=00000000 R14=00000000 R15=00000020
PSR=400001d3 -Z-- A svc32&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This meant of course that the kernel refused to load at all. In addition, nowhere in memory could the tag list be found, as I saw with a quick assembly search through memory space.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So I downloaded the QEMU source code and found the relevant code in &lt;code&gt;hw/arm_boot.c&lt;/code&gt;. The code there is pretty straightforward, and it turns out that QEMU ARM will only install a tag list if it determines kernel to be Linux. This is fine in itself, but the way it figures out if a given kernel is Linux is really stupid - as a comment in the file reads:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Assume that raw images are linux kernels, and ELF images are not.  */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is really silly as one just &lt;code&gt;objcopy -O binary&lt;/code&gt; any kernel into a raw image anyway. So I just set the initial assignment to &lt;code&gt;is_linux = 1;&lt;/code&gt; in &lt;code&gt;arm_load_kernel(&amp;#8230;)&lt;/code&gt;, compiled the ARM version, and copied it into my &lt;code&gt;/usr/bin&lt;/code&gt;. Sigh.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Misc"></category></entry><entry><title>NITDroid userland update IV</title><link href="https://seasonofcode.com/posts/nitdroid-userland-update-iv.html" rel="alternate"></link><updated>2011-05-14T22:14:26-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-05-14:posts/nitdroid-userland-update-iv.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I was able to get hardware keys to work last night. After a deep dive into the Android event handling system (see &lt;a href="?p=162"&gt;my previous post&lt;/a&gt;), I inserted log outputs in strategic positions and determined that the hardware keys were indeed sending events through the keyboard controller like the keys on the hardware keyboard. This made my life immensely easier; all I had to do was create a custom keyboard layout and set the corresponding key codes to HOME, BACK and so on.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The scan codes I found for the hardware keys through my experiments and the corresponding functions I assigned them under Android are summarized in the following table:&lt;/p&gt;&lt;/div&gt;
&lt;div class="tableblock"&gt;
&lt;table rules="all"
width="100%"
frame="border"
cellspacing="0" cellpadding="4"&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left" valign="top"&gt; Key                &lt;/th&gt;
&lt;th align="left" valign="top"&gt; Code   &lt;/th&gt;
&lt;th align="left" valign="top"&gt; Mapped to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Switch application&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;63&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Home&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Back&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Back&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Full screen&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;64&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Menu&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Minus sign&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;66&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Vol down&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Plus sign&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;65&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;vol up&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Power&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;116&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Power&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Menu&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;62&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Menu&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So I created a new board and a new product in the &lt;code&gt;build/&lt;/code&gt; directory and defined the affected keys as follows in a new keyboard layout file, following the above results:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;key 1     BACK              WAKE_DROPPED
key 62    MENU              WAKE_DROPPED
key 63    HOME              WAKE
key 64    MENU              WAKE_DROPPED
key 65    VOLUME_UP
key 66    VOLUME_DOWN
key 116   POWER             WAKE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I also had to investigate how Android determined which keyboard layout file to look for. My search turned up this code in &lt;code&gt;EventHub::openDevice(&amp;#8230;)&lt;/code&gt; in &lt;code&gt;frameworks/base/libs/ui/EventHub.cpp&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;EventHub&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;open_device&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;deviceName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ioctl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EVIOCGNAME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//fprintf(stderr, &amp;quot;could not get device name for %s, %sn&amp;quot;, deviceName, strerror(errno));&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;CLASS_KEYBOARD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;tmpfn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;keylayoutFilename&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// a more descriptive name&lt;/span&gt;
        &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// replace all the spaces with underscores&lt;/span&gt;
        &lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpfn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strchr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpfn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strchr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpfn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// find the .kl file we need for this device&lt;/span&gt;
        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ANDROID_ROOT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;snprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keylayoutFilename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keylayoutFilename&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="s"&gt;&amp;quot;%s/usr/keylayout/%s.kl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmpfn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;defaultKeymap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keylayoutFilename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R_OK&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;snprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keylayoutFilename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keylayoutFilename&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                     &lt;span class="s"&gt;&amp;quot;%s/usr/keylayout/%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;qwerty.kl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;defaultKeymap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;layoutMap&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keylayoutFilename&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In other words, Android gets the device name from the device itself using &lt;a href="http://linux.die.net/man/2/ioctl"&gt;&lt;code&gt;ioctl(2)&lt;/code&gt;&lt;/a&gt;, replaces all spaces in it by underscores, and tries to load the keyboard layout file &lt;code&gt;/system/usr/keylayout/device_name.kl&lt;/code&gt;. Originally in my kernel the N8x0 board initialization routines were overriding the device name to be "Internal Keyboard"; I felt that was a bit awkward and instead let the LM8323 driver itself assign the name to the default "LM8323 keypad". Therefore, my keyboard layout has to be named &lt;code&gt;LM8323_keypad.kl&lt;/code&gt;. The Android build process automatically (well, I had to specify it in &lt;code&gt;BoardConfig.mk&lt;/code&gt;) copies the keyboard layout file over to the correct location.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now when I tried building using my newly created board and product definitions, the build process was failing with the following error:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;target thumb C++: libcameraservice &amp;lt;= frameworks/base/camera/libcameraservice/CameraService.cpp
make: *** No rule to make target `out/target/product/n8x0/obj/lib/libcamera.so', needed by `out/target/product/n8x0/obj/SHARED_LIBRARIES/libcameraservice_intermediates/LINKED/libcameraservice.so'.  Stop.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It took me quite a while to figure out what was going on. Apparently, Android expects every new board to provide a camera / audio implementation; otherwise, one has to enable the stub camera implementation with the following line in &lt;code&gt;BoardConfig.mk&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;USE_CAMERA_STUB&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I found this after a long search in &lt;a href="http://www.mail-archive.com/android-porting@googlegroups.com/msg05382.html"&gt;this thread&lt;/a&gt;. The annoying thing is that while the generic board explicitly uses the stub audio implementation, it does not say anything about the stub camera implementation; why then does it compile thus without a problem whereas my custom board doesn&amp;#8217;t?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Finally, after a silly incident where the build system failed to copy over my modified keyboard layout file, I was able to use the hardware keys without further problems.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As a safeguard, I set up some projects on &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt; to track my work on NITDroid. Since they are also public they&amp;#8217;re also effectively hosting my work. The projects are:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://github.com/jichuan89/NITDroid-Kernel"&gt;The NITDroid kernel&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://github.com/jichuan89/NITDroid-UL-build"&gt;The &lt;code&gt;build/&lt;/code&gt; directory in the Android source tree&lt;/a&gt;, with my custom additions including the keyboard layout
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="https://github.com/jichuan89/NITDroid-UL-frameworks-base"&gt;The &lt;code&gt;frameworks/base/&lt;/code&gt; directory in the Android source tree&lt;/a&gt;, with several mods discussed in previous posts such as &lt;a href="?p=142"&gt;disabling the battery service&lt;/a&gt; and &lt;a href="?p=153"&gt;disabling screen power state reporting&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Moving forward, I will next try to work out power. A stable power management implementation is the basis for a stable system; without it the system is essentially a house of cards. But that will have to wait until next week.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>Internal input event handling in the Linux kernel and the Android userspace</title><link href="https://seasonofcode.com/posts/internal-input-event-handling-in-the-linux-kernel-and-the-android-userspace.html" rel="alternate"></link><updated>2011-05-14T20:53:39-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-05-14:posts/internal-input-event-handling-in-the-linux-kernel-and-the-android-userspace.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;While figuring out hardware buttons for my NITDroid project, I had the opportunity of exploring the way Linux and Android handle input events internally before passing them through to the user application. This post traces the propagation of an input event from the Linux kernel through the Android userspace as far as I understand it. Although the principles are likely the same for essentially any input device, I will be drawing on my investigations of the drivers for the LM8323 hardware keyboard (&lt;code&gt;drivers/input/keyboard/lm8323.c&lt;/code&gt;) and the TSC2005 touchscreen (&lt;code&gt;drivers/input/touchscreen/tsc2005.c&lt;/code&gt;) which are both found inside the Nokia N810.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_i_inside_the_linux_kernel"&gt;I. Inside the Linux kernel&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Firstly, Linux exposes externally a uniform input event interface for each device as &lt;code&gt;/dev/input/eventX&lt;/code&gt; where &lt;code&gt;X&lt;/code&gt; is an integer. This means these "devices" can be polled in the same way and the events they produce are in the same uniform format. To accomplish this, Linux has a standard set of routines that every device driver uses to register / unregister the hardware it manages and publish input events it receives.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When the driver module of an input device is first loaded into the kernel, its initialization routine usually sets up some sort of probing to detect the presence of the types of hardware it is supposed to manage. This probing is of course device-specific; however, if it is successful, the module will eventually invoke the function &lt;code&gt;input_register_device(&amp;#8230;)&lt;/code&gt; in &lt;code&gt;include/linux/input.h&lt;/code&gt; which sets up a file representing the physical device as &lt;code&gt;/dev/input/eventX&lt;/code&gt; where &lt;code&gt;X&lt;/code&gt; is some integer. The module will also register a function to handle IRQs originating from the hardware it manages via &lt;code&gt;request_irq(&amp;#8230;)&lt;/code&gt; (&lt;code&gt;include/linux/interrupt.h&lt;/code&gt;) so that the module will be notified when the user interacts with the physical device it manages.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When the user physically interacts with the hardware (for instance by pushing / releasing a key or exerting / lifting pressure on the touchscreen), an IRQ is fired and Linux invokes the IRQ handler registered by the corresponding device driver. However, IRQ handlers by custom must return quickly as they essentially block the entire system when executing and thus cannot perform any lengthy processing; typically, therefore, an IRQ handler would merely 1) save the data carried by the IRQ, 2) ask the kernel to schedule a method that would process the event later on when we have exited IRQ mode, and 3) tell the kernel we have handled the IRQ and exit. This could be very straightforward, as the IRQ handler in the driver for the LM8323 keyboard inside the N810:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * We cannot use I2C in interrupt context, so we just schedule work.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;irqreturn_t&lt;/span&gt; &lt;span class="nf"&gt;lm8323_irq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;irq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;lm8323_chip&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;schedule_work&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;IRQ_HANDLED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It could also be more complex as the one in the driver of the TSC2005 touchscreen controller (&lt;code&gt;tsc2005_ts_irq_handler(&amp;#8230;)&lt;/code&gt;) as it integrates into the SPI framework (which I have never looked into&amp;#8230;).&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Some time later, the kernel executes the scheduled method to process the recently saved event. Invariably, this method would report the event in a standard format by calling one or more of the &lt;code&gt;input_*&lt;/code&gt; functions in &lt;code&gt;include/linux/input.h&lt;/code&gt;; these include &lt;code&gt;input_event(&amp;#8230;)&lt;/code&gt; (general purpose), &lt;code&gt;input_report_key(&amp;#8230;)&lt;/code&gt; (for key down and key up events), &lt;code&gt;input_report_abs(&amp;#8230;)&lt;/code&gt; (for position events e.g. from a touchscreen) among others. Note that the &lt;code&gt;input_report_*(&amp;#8230;)&lt;/code&gt; functions are really just convenience functions that call &lt;code&gt;input_event(&amp;#8230;)&lt;/code&gt; internally, as defined in &lt;code&gt;include/linux/input.h&lt;/code&gt;. It is likely that a lot of processing happens before the event is published via these methods; the LM8323 driver for instance does an internal key code mapping step and the TSC2005 driver goes through this crazy arithmetic involving Ohms (to calculate a pressure index from resistance data?). Furthermore, one physical IRQ could correspond to multiple published input events, and vice versa. Finally, when all event publishing is finished, the event processing method calls &lt;code&gt;input_sync(&amp;#8230;)&lt;/code&gt; to flush the event out. The event is now ready to be accessed by the userspace at &lt;code&gt;/dev/input/eventX&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_ii_inside_the_android_userspace"&gt;II. Inside the Android userspace&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When the Android GUI starts up, an instance of the class &lt;code&gt;WindowManagerService&lt;/code&gt; (&lt;code&gt;frameworks/base/services/java/com/android/server/WindowManagerservice.java&lt;/code&gt;) is created. This class, when constructed, initializes the member field&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;KeyQ&lt;/span&gt; &lt;span class="n"&gt;mQueue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;where &lt;code&gt;KeyQ&lt;/code&gt;, defined as a private class inside the same file, extends Android&amp;#8217;s basic input handling class, the abstract class &lt;code&gt;KeyInputQueue&lt;/code&gt; (&lt;code&gt;frameworks/base/services/java/com/android/server/KeyInputQueue.java&lt;/code&gt; and &lt;code&gt;frameworks/base/services/jni/com_android_server_KeyInputQueue.cpp&lt;/code&gt;). As &lt;code&gt;mQueue&lt;/code&gt; is instantiated, it of course calls the constructor of &lt;code&gt;KeyInputQueue&lt;/code&gt;; the latter, inconspicuously, starts an anonymous thread it owns that is at the heart of the event handling system in Android:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;mThread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;InputDeviceReader&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;RawInputEvent&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;readEvent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// block, doesn&amp;#39;t release the monitor&lt;/span&gt;

                &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;...&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EV_DEVICE_ADDED&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="o"&gt;...&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EV_DEVICE_REMOVED&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="o"&gt;...&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;di&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getInputDevice&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deviceId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="o"&gt;...&lt;/span&gt;
                    &lt;span class="c1"&gt;// first crack at it&lt;/span&gt;
                    &lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preprocessEvent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;di&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;...&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mFirst&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="o"&gt;...&lt;/span&gt;
                    &lt;span class="c1"&gt;// Is it a key event?&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EV_KEY&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                            &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CLASS_KEYBOARD&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                            &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scancode&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BTN_FIRST&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
                                    &lt;span class="n"&gt;scancode&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BTN_LAST&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                            &lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                            &lt;span class="n"&gt;di&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mKeyDownTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                            &lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="o"&gt;}&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;keycode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rotateKeyCodeLocked&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keycode&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;addLocked&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;di&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curTimeNano&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CLASS_KEYBOARD&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;newKeyEvent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;di&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;di&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mKeyDownTime&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curTime&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                        &lt;span class="n"&gt;keycode&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scancode&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                        &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;WindowManagerPolicy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FLAG_WOKE_HERE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                                         &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;KeyEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FLAG_WOKE_HERE&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EV_KEY&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="o"&gt;...&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EV_ABS&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                            &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CLASS_TOUCHSCREEN_MT&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// Process position events from multitouch protocol.&lt;/span&gt;
                        &lt;span class="o"&gt;...&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EV_ABS&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                            &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CLASS_TOUCHSCREEN&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// Process position events from single touch protocol.&lt;/span&gt;
                        &lt;span class="o"&gt;...&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EV_REL&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                            &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CLASS_TRACKBALL&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// Process movement events from trackball (mouse) protocol.&lt;/span&gt;
                        &lt;span class="o"&gt;...&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
                    &lt;span class="o"&gt;...&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RuntimeException&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Slog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;InputReaderThread uncaught exception&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I have removed most of this ~350 lined function that is irrelevant to our discussion and reformatted the code for easier reading. The key idea is that this independent thread will&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
Read an event
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Call the &lt;code&gt;preprocess(&amp;#8230;)&lt;/code&gt; method of its derived class, offering the latter a chance to prevent the event from being propagated further
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;3.Add it to the event queue owned by the class&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This &lt;code&gt;InputDeviceReader&lt;/code&gt; thread started by &lt;code&gt;WindowManagerService&lt;/code&gt; (indirectly via &lt;code&gt;KeyInputQueue&amp;#8217;s constructor&lt;/code&gt;) is thus THE event loop of the Android UI.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;But we are still missing the link from the kernel to this &lt;code&gt;InputDeviceReader&lt;/code&gt;. What exactly is this magical &lt;code&gt;readEvent(&amp;#8230;)&lt;/code&gt;? It turns out that this is actually a native method implemented in the C++ half of &lt;code&gt;KeyInputQueue&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Mutex&lt;/span&gt; &lt;span class="n"&gt;gLock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;EventHub&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gHub&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;jboolean&lt;/span&gt;
&lt;span class="nf"&gt;android_server_KeyInputQueue_readEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JNIEnv&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jobject&lt;/span&gt; &lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                          &lt;span class="n"&gt;jobject&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;gLock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;EventHub&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gHub&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hub&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;hub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;EventHub&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;gHub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hub&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;gLock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hub&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;deviceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;scancode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;keycode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Ah, so &lt;code&gt;readEvent&lt;/code&gt; is really just a proxy for &lt;code&gt;EventHub::getEvent(&amp;#8230;)&lt;/code&gt;. If we proceed to look up &lt;code&gt;EventHub&lt;/code&gt; in &lt;code&gt;frameworks/base/libs/ui/EventHub.cpp&lt;/code&gt;, we find&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;EventHub&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;scan_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opendir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;open_device&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;devname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;closedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;device_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/dev/input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;EventHub&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;openPlatformInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scan_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device_path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;EventHub&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;outDeviceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;outType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;outScancode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;outKeycode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;outFlags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;outValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;nsecs_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;outWhen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;mOpened&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;openPlatformInput&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nl"&gt;NO_ERROR&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UNKNOWN_ERROR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;mOpened&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// First, report any devices that had last been added/removed.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mClosingDevices&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;outType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEVICE_REMOVED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mOpeningDevices&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;outType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEVICE_ADDED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;pollres&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mFDs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mFDCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;

        &lt;span class="c1"&gt;// mFDs[0] is used for inotify, so process regular events starting at mFDs[1]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;mFDCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mFDs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;revents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mFDs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;revents&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;POLLIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mFDs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;iev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iev&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iev&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="p"&gt;...&lt;/span&gt;
                        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;outType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;outScancode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;EV_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mDevices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;layoutMap&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outKeycode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outFlags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                            &lt;span class="p"&gt;...&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;outKeycode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;...&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// Error handling&lt;/span&gt;
                        &lt;span class="p"&gt;...&lt;/span&gt;
                        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Again, most of the details have been stripped out from the above code, but we now see how &lt;code&gt;readEvent()&lt;/code&gt; in &lt;code&gt;KeyInputQueue&lt;/code&gt; is getting these events from Linux: on first call, &lt;code&gt;EventHub::getEvent&lt;/code&gt; scans the directory &lt;code&gt;/dev/input&lt;/code&gt; for input devices, opens them and saves their file descriptors in an array called &lt;code&gt;mFDs&lt;/code&gt;. Then whenever it is called again, it tries to read from each of these input devices by simply calling the &lt;a href="http://linux.die.net/man/2/read"&gt;&lt;code&gt;read(2)&lt;/code&gt;&lt;/a&gt; Linux system call.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;OK, now we know how an event propagates through &lt;code&gt;EventHub::getEvent(&amp;#8230;)&lt;/code&gt; to &lt;code&gt;KeyInputQueue::readEvent(&amp;#8230;)&lt;/code&gt; then to &lt;code&gt;InputDeviceReader.run(&amp;#8230;)&lt;/code&gt; where it could get queued inside &lt;code&gt;WindowManagerService.mQueue&lt;/code&gt; (which, as a reminder, extends the otherwise abstract &lt;code&gt;KeyInputQueue&lt;/code&gt;). But what happens then? How does that event get to the client application?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Well, it turns out that &lt;code&gt;WindowManagerService&lt;/code&gt; has yet another private member class that handles just that:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InputDispatcherThread&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Slog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Exception in input dispatcher&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setThreadPriority&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;THREAD_PRIORITY_URGENT_DISPLAY&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
            &lt;span class="c1"&gt;// Retrieve next event, waiting only as long as the next&lt;/span&gt;
            &lt;span class="c1"&gt;// repeat timeout.  If the configuration has changed, then&lt;/span&gt;
            &lt;span class="c1"&gt;// don&amp;#39;t wait at all -- we&amp;#39;ll report the change as soon as&lt;/span&gt;
            &lt;span class="c1"&gt;// we have processed all events.&lt;/span&gt;
            &lt;span class="n"&gt;QueuedEvent&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getEvent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)((!&lt;/span&gt;&lt;span class="n"&gt;configChanged&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;curTime&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nextKeyTime&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nextKeyTime&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;curTime&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;curTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SystemClock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;uptimeMillis&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;eventType&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;classType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CLASS_TOUCHSCREEN&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;eventType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eventType&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;MotionEvent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;classType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CLASS_KEYBOARD&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
                                &lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;classType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CLASS_TRACKBALL&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;eventType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LocalPowerManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BUTTON_EVENT&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;eventType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LocalPowerManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;OTHER_EVENT&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
                    &lt;span class="o"&gt;...&lt;/span&gt;
                    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;classType&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CLASS_KEYBOARD&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                            &lt;span class="n"&gt;KeyEvent&lt;/span&gt; &lt;span class="n"&gt;ke&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KeyEvent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ke&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isDown&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                                &lt;span class="n"&gt;lastKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ke&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                                &lt;span class="n"&gt;downTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                                &lt;span class="n"&gt;keyRepeatCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                                &lt;span class="n"&gt;lastKeyTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                                &lt;span class="n"&gt;nextKeyTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lastKeyTime&lt;/span&gt;
                                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ViewConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLongPressTimeout&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                                &lt;span class="n"&gt;lastKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                                &lt;span class="n"&gt;downTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                                &lt;span class="c1"&gt;// Arbitrary long timeout.&lt;/span&gt;
                                &lt;span class="n"&gt;lastKeyTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                                &lt;span class="n"&gt;nextKeyTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curTime&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;LONG_WAIT&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                            &lt;span class="o"&gt;}&lt;/span&gt;
                            &lt;span class="n"&gt;dispatchKey&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;KeyEvent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                            &lt;span class="n"&gt;mQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recycleEvent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CLASS_TOUCHSCREEN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                            &lt;span class="n"&gt;dispatchPointer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MotionEvent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CLASS_TRACKBALL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                            &lt;span class="n"&gt;dispatchTrackball&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MotionEvent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;RawInputEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CLASS_CONFIGURATION_CHANGED&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                            &lt;span class="n"&gt;configChanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                            &lt;span class="n"&gt;mQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recycleEvent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configChanged&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="o"&gt;...&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastKey&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="o"&gt;...&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="o"&gt;...&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Slog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;quot;Input thread received uncaught exception: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As we can see, this thread started by &lt;code&gt;WindowManagerService&lt;/code&gt; is very simple; all it does is&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
Grabs events queued into &lt;code&gt;WindowManagerService.mQueue&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Calls &lt;code&gt;WindowManagerService.dispatchKey(&amp;#8230;)&lt;/code&gt; when appropriate.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If we next inspect &lt;code&gt;WindowManagerService.dispatchKey(&amp;#8230;)&lt;/code&gt;, we would see that it checks the currently focused window, and calls &lt;code&gt;android.view.IWindow.dispatchKey(&amp;#8230;)&lt;/code&gt; on that window. The event is now in the user space.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I put together some nice diagrams that illustrate these interactions. The conceptual model:&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;div align="center"&gt;
&lt;strong&gt;Event propagation flow on Android - simplified version&lt;/strong&gt;
&lt;img
src="https://docs.google.com/drawings/d/1qgD3O5ZZk1cC5tq6kLd_jKEtXx4P1Ty4wsSAHRKfhiU/pub?w=962&amp;h=422"
style="width: 100%; max-width: 962px;"
alt="Event propagation flow on Android - simplified version"&gt;
&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The full model:
&lt;div align="center"&gt;
&lt;strong&gt;Event propagation flow on Android&lt;/strong&gt;
&lt;img
src="https://docs.google.com/drawings/d/1VNaRYLdN5fOEz32XMzIR-ygphE-VD16CZltgV3aXavs/pub?w=750&amp;h=902"
style="width: 100%; max-width: 750px;"
alt="Event propagation flow on Android"&gt;
&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The yellow boxes are Java implementations, and the blue boxes native or other.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Android"></category><category term="Featured"></category></entry><entry><title>Prevent Android app from restarting on rotate / hardware keyboard state change</title><link href="https://seasonofcode.com/posts/prevent-android-app-from-restarting-on-rotate-hardware-keyboard-state-change.html" rel="alternate"></link><updated>2011-05-13T03:19:41-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-05-13:posts/prevent-android-app-from-restarting-on-rotate-hardware-keyboard-state-change.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I came across a puzzling phenomenon while working on an Android
application today.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_problem"&gt;Problem&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;When I rotate the device (change orientation) or pop out the hardware keyboard,
my &lt;code&gt;Activity&lt;/code&gt; gets paused (&lt;code&gt;onPause()&lt;/code&gt;), stopped (&lt;code&gt;onStop()&lt;/code&gt;), destroyed
(&lt;code&gt;onDestroy()&lt;/code&gt;), then recreated (&lt;code&gt;onCreate()&lt;/code&gt;), started (&lt;code&gt;onStart()&lt;/code&gt;), and
resumed (&lt;code&gt;onResume()&lt;/code&gt;). It was as if the user had quit the application and
killed it and launched it again.  It was crashing my application as nowhere in
the documentation had I ever read that rotating the deviced would cause such a
strange chain of events to happen.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Although my app had implemented its &lt;code&gt;onSurfaceChanged()&lt;/code&gt; method which, according
to the documentation, should be called when the device is rotated among other
things, it wasn&amp;#8217;t happening according to my logs.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_solution"&gt;Solution&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It turns out that the &lt;code&gt;&amp;lt;activity&amp;gt;&lt;/code&gt; tags in the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; have a
&lt;code&gt;configChanges&lt;/code&gt; attribute that specifies which of a number of events the
application is set up to handle itself. Any of the events, if not explicitly
listed in an &lt;code&gt;&amp;lt;activity&amp;gt;&lt;/code&gt; tag in &lt;code&gt;AndroidManifest.xml&lt;/code&gt;, would cause Android to
destroy and then restart the &lt;code&gt;Activity&lt;/code&gt; anew. (See
&lt;a href="http://developer.android.com/guide/topics/manifest/activity-element.html#config"&gt;official
documentation&lt;/a&gt;.)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;These include notably the orientation change (rotation) and the hardware
keyboard state. To handle these, the &lt;code&gt;&amp;lt;activity&amp;gt;&lt;/code&gt; tag in your
&lt;code&gt;AndroidManifest.xml&lt;/code&gt; must contain at least the following:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt;
    &lt;span class="err"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;android:configChanges=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;keyboard|keyboardHidden|orientation|screenSize&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Note that &lt;code&gt;screenSize&lt;/code&gt; was added in API level 13 (Honeycomb 3.2).&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I guess in a way this makes sense; if an application did not include adequate
event handlers, all of these events could potentially cause the application to
crash if left running on its own. Therefore, Android just kills it and restarts
it so that it would presumably correctly initialize itself in the new
environment when it starts up again. But this attribute really ought to be
heavily publicized in any introductory text as it is likely to cause noobs like
me quite some bewilderment.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Android"></category></entry><entry><title>Shortening paths in the Bash prompt with PROMPT_DIRTRIM</title><link href="https://seasonofcode.com/posts/shortening-paths-in-the-bash-prompt-with-prompt_dirtrim.html" rel="alternate"></link><updated>2011-05-10T03:53:53-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-05-10:posts/shortening-paths-in-the-bash-prompt-with-prompt_dirtrim.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Bash 4 introduced a new environment variable called &lt;code&gt;PROMPT_DIRTRIM&lt;/code&gt; that allows
the shortening of paths displayed in its prompts (via &lt;code&gt;w&lt;/code&gt; in &lt;code&gt;PS1&lt;/code&gt;. I added&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;PROMPT_DIRTRIM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;to my &lt;code&gt;~/.bashrc&lt;/code&gt; and whereas Bash used to display this prompt:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;[user@host /media/D/Projects/nitdroid/ul/out/target/product/generic/system/framework]$&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It now displays&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;[user@host .../generic/system/framework]$&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;which is a huge improvement especially when working with deep directory
structures.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Linux"></category><category term="Featured"></category></entry><entry><title>NITDroid userland update III</title><link href="https://seasonofcode.com/posts/nitdroid-userland-update-iii.html" rel="alternate"></link><updated>2011-05-09T04:14:09-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-05-09:posts/nitdroid-userland-update-iii.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I figured out the touchscreen today. I started off with
&lt;a href="http://groups.google.com/group/android-internals/msg/7c6ff76e0381e95a"&gt;this
thread&lt;/a&gt; from almost exactly 3 years ago. It turns out that most of the suggested
kernel patch is unnecessary; for some unknown reason, the patch tries to merge
the keyboard input device and the touchscreen input device into one single
device in &lt;code&gt;/dev/input/&lt;/code&gt;. Based on this understanding of the patch, I
hypothesized that the reason Android was ignoring my touchscreen events while
perfectly responding to my keyboard events was that it expected only one
composite input device from the kernel, and was only polling on the keyboard
device instead of the touchscreen device. So I commented out the calls to
&lt;code&gt;input_register_device(&amp;#8230;)&lt;/code&gt; in both &lt;code&gt;drivers/input/keyboard/lm8323.c&lt;/code&gt; and
&lt;code&gt;drivers/cbus/retu-pwrbutton.c&lt;/code&gt; and tried again; still no good.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I knew the touchscreen driver was definitely sending events to
&lt;code&gt;/dev/input/event0&lt;/code&gt; because I had inserted &lt;code&gt;printk&lt;/code&gt; calls in the driver and
could see the appropriate events being generated. The problem thus lay with the
Android userland. Based on
&lt;a href="http://groups.google.com/group/android-porting/browse_thread/thread/67f903dae875d3b4/b6d1ec3e845a5021"&gt;this thread&lt;/a&gt;,
I next sprinkled &lt;code&gt;frameworks/base/services/java/KeyInputQueue.java&lt;/code&gt; and
&lt;code&gt;frameworks/base/services/WindowManagerService.java&lt;/code&gt; with &lt;code&gt;Slog&lt;/code&gt; calls. After a
number of painfully slow [ change source code &amp;#8594; recompile &amp;#8594; copy to microSD
card &amp;#8594; unmount microSD card &amp;#8594; remove microSD card from SD card adapter &amp;#8594;
insert microSD card into miniSD card adapter &amp;#8594; insert microSD card into the
N810 &amp;#8594; boot up the N810 &amp;#8594; write on the touchscreen &amp;#8594; open up back cover &amp;#8594;
take out battery &amp;#8594; reattach battery &amp;#8594; reattach back cover &amp;#8594; remove microSD
card from miniSD card adapter &amp;#8594; insert microSD card into SD card adapter &amp;#8594;
insert SD card into computer &amp;#8594; mount microSD card &amp;#8594; repair file system on
microSD card &amp;#8594; checkout log ] cycles, it turns out that the input event handler
thread (&lt;code&gt;KeyInputQueue.mThread&lt;/code&gt;) was getting all the events and was passing them
to &lt;code&gt;WindowManagerService.preprocessEvent()&lt;/code&gt;, which, unfortunately, told it to
throw them away because our good friend the &lt;code&gt;PowerManagerService&lt;/code&gt; believes &lt;em&gt;the
screen was off&lt;/em&gt;. So for now I made &lt;code&gt;PowerManagerService.isScreenOn()&lt;/code&gt; in
&lt;code&gt;frameworks/base/services/PowerManagerService.java&lt;/code&gt; to just return true, and the
touchscreen started working.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So the conclusion is that of the changes in the patch suggested in the
&lt;a href="http://groups.google.com/group/android-internals/msg/7c6ff76e0381e95a"&gt;above thread&lt;/a&gt;,
only those recalculating the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values in the function
&lt;code&gt;tsc2005_ts_update_pen_state(&amp;#8230;)&lt;/code&gt; and the lines setting &lt;code&gt;x_max&lt;/code&gt; and &lt;code&gt;y_max&lt;/code&gt; to
800 and 480 respectively in &lt;code&gt;tsc2005_ts_init(&amp;#8230;)&lt;/code&gt; are necessary. Both changes
are in &lt;code&gt;drivers/input/touchscreen/tsc2005.c&lt;/code&gt;. All the other suggested changes
are irrelevant and should be disregarded. In the Android userland code,
&lt;code&gt;PowerManagerService&lt;/code&gt; needs to be figured out.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And here&amp;#8217;s a short video I put on YouTube showing my Froyo build booting up and
responding to the touchscreen:&lt;/p&gt;&lt;/div&gt;
&lt;div align="center"&gt;
  &lt;iframe width="480" height="390"
          src="http://www.youtube.com/embed/1NDW4IrBwmI"
          frameborder="0"
          allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>NITDroid userland update II - FIRST BOOTABLE FROYO IMAGE!!!!</title><link href="https://seasonofcode.com/posts/nitdroid-userland-update-ii-first-bootable-froyo-image.html" rel="alternate"></link><updated>2011-05-08T04:35:59-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-05-08:posts/nitdroid-userland-update-ii-first-bootable-froyo-image.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I was able to make huge progress with NITDroid today. After installing a Debian
chroot as my new development environment (schroot and debootstrap from Arch
repos; see &lt;a href="https://help.ubuntu.com/community/BasicChroot"&gt;here&lt;/a&gt;) and
grabbing the newest version of Froyo, version 2.2.2_r1, I started again where I
left off three months ago - with a bootable kernel and a userland that boots to
a blank black screen after the startup animation. I was convinced the problem
lay with the framebuffer driver and I spent many hours learning about
framebuffer drivers and investigating the omap_fb driver. I sprinkled the driver
with &lt;code&gt;printk&lt;/code&gt; statements, but could find nothing wrong at all. I had previous
suspected that the driver was unable to allocate a virtual buffer twice the size
of the actual resolution, but this was not the case.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Then I had the (long overdue) idea of adding a service to &lt;code&gt;init.rc&lt;/code&gt; that saved
Android logs to a file on the SD card:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;service logcat /system/bin/logcat -f /data/all.log
    oneshot&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And indeed, the video driver was fine (of course, after the patch found on
&lt;a href="http://elinux.org/Android_on_OMAP#Page_flipping_frame_buffer"&gt;this great page&lt;/a&gt;
on eLinux.org). The &lt;em&gt;real&lt;/em&gt; problem, however, was this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;E/BatteryService(  754): Could not open /sys/class/power_supply&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And, accordingly, somewhere later:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;I/SystemServer(  754): Battery Service
W/dalvikvm(  754): No implementation found for native Lcom/android/server/BatteryService;.native_update ()V
W/dalvikvm(  754): threadid=7: thread exiting with uncaught exception (group=0x400207f0)
E/AndroidRuntime(  754): *** FATAL EXCEPTION IN SYSTEM PROCESS: android.server.ServerThread
E/AndroidRuntime(  754): java.lang.UnsatisfiedLinkError: native_update
E/AndroidRuntime(  754):        at com.android.server.BatteryService.native_update(Native Method)
E/AndroidRuntime(  754):        at com.android.server.BatteryService.update(BatteryService.java:208)
E/AndroidRuntime(  754):        at com.android.server.BatteryService.&amp;lt;init&amp;gt;(BatteryService.java:134)
E/AndroidRuntime(  754):        at com.android.server.ServerThread.run(SystemServer.java:146)
E/AndroidRuntime(  754): Error reporting crash
E/AndroidRuntime(  754): java.lang.NullPointerException
E/AndroidRuntime(  754):        at android.os.DropBoxManager.isTagEnabled(DropBoxManager.java:262)
E/AndroidRuntime(  754):        at com.android.server.am.ActivityManagerService.addErrorToDropBox(ActivityManagerService.java:9190)
E/AndroidRuntime(  754):        at com.android.server.am.ActivityManagerService.handleApplicationCrash(ActivityManagerService.java:9101)
E/AndroidRuntime(  754):        at com.android.internal.os.RuntimeInit$UncaughtHandler.uncaughtException(RuntimeInit.java:76)
E/AndroidRuntime(  754):        at java.lang.ThreadGroup.uncaughtException(ThreadGroup.java:887)
E/AndroidRuntime(  754):        at java.lang.ThreadGroup.uncaughtException(ThreadGroup.java:884)
I/Process (  754): Sending signal. PID: 754 SIG: 9
I/ServiceManager(  670): service 'SurfaceFlinger' died
I/ServiceManager(  670): service 'usagestats' died
I/ServiceManager(  670): service 'entropy' died
I/ServiceManager(  670): service 'batteryinfo' died
I/ServiceManager(  670): service 'power' died
I/ServiceManager(  670): service 'package' died
I/ServiceManager(  670): service 'activity' died
I/ServiceManager(  670): service 'meminfo' died
I/ServiceManager(  670): service 'cpuinfo' died
I/ServiceManager(  670): service 'permission' died
I/ServiceManager(  670): service 'account' died
I/ServiceManager(  670): service 'content' died
I/ServiceManager(  670): service 'telephony.registry' died
E/installd(  678): eof
E/installd(  678): failed to read size
I/installd(  678): closing connection
I/Zygote  (  749): Exit zygote because system server (754) has terminated
I/ServiceManager(  670): service 'media.audio_flinger' died
I/ServiceManager(  670): service 'media.player' died
I/ServiceManager(  670): service 'media.camera' died
I/ServiceManager(  670): service 'media.audio_policy' died&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This sequence was repeated ad infinitum, as my &lt;code&gt;init.rc&lt;/code&gt; read:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;service servicemanager /system/bin/servicemanager
    user system
    critical
    onrestart restart zygote
    onrestart restart media&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It turns out that this is a common problem that has happened to many people
porting Android to a new platform, as explained on
&lt;a href="http://groups.google.com/group/android-porting/browse_thread/thread/521b64a279388cee/ddc2a537ada2c5b9"&gt;this thread&lt;/a&gt;,
&lt;a href="http://groups.google.com/group/android-porting/browse_thread/thread/abc0633915c8b047#"&gt;this thread&lt;/a&gt;, and
&lt;a href="http://dev.omapzoom.org/?p=aboateng/omap3-linux-cam.git;a=commitdiff;h=eaff38c66985603eb4b53ceb25f6e837f0937efb"&gt;this thread&lt;/a&gt;.
The culprit is the C++ native implementation of the class &lt;code&gt;BatteryService&lt;/code&gt;,
found in &lt;code&gt;frameworks/base/services/jni/com_android_server_BatteryService.cpp&lt;/code&gt;.
In &lt;code&gt;register_android_server_BatteryService(JNIEnv* env)&lt;/code&gt; (line 229), we find the
following code:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kt"&gt;DIR&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opendir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;POWER_SUPPLY_PATH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;LOGE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not open %sn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;POWER_SUPPLY_PATH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;where &lt;code&gt;POWER_SUPPLY_PATH&lt;/code&gt; is &lt;code&gt;#define&lt;/code&gt;'d as &lt;code&gt;/sys/class/power_supply&lt;/code&gt; on line
42. This corresponds, of course, to our first error message above. The totally
stupid thing is the fact that this occurs in
&lt;code&gt;register_android_server_BatteryService(JNIEnv *env)&lt;/code&gt;, which is supposed to
register a native C++ method &lt;code&gt;native_update()&lt;/code&gt; defined in this file with the
Java VM as part of the Java class &lt;code&gt;com.android.server.BatteryService&lt;/code&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;android_server_BatteryService_update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JNIEnv&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jobject&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;JNINativeMethod&lt;/span&gt; &lt;span class="n"&gt;sMethods&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* name, signature, funcPtr */&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;native_update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;()V&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;android_server_BatteryService_update&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In &lt;code&gt;framework/base/services/java/com/android/server/BatteryService.java&lt;/code&gt;, we have:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BatteryService&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Binder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;native&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;native_update&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;native_update&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
         &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In other words, what is going on is this. The service manager thread starts the
battery service; the JVM then loads the corresponding native C++ code. But since
my hacked kernel doesn&amp;#8217;t currently support battery / power supply information
(and therefore does not create the directory &lt;code&gt;/sys/class/power_supply&lt;/code&gt; at all),
the native code refuses to load, which causes the JVM to panic. Unfortunately
this leads to the service manager being restarted itself; the same then happens
again and again.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;There are several natural solutions: 1) add proper power supply drivers for the
N810 to the kernel, 2) add a dummy power supply 3) change the Java
BatteryService class so that it does not call the native update method but uses
dummy values, and 4) make the C++ code not check the actual battery status, but
return empty values. Solution #1 is the way to go in the long run, of course;
but right now I just want to get something rolling. This
&lt;a href="http://hi.baidu.com/aokikyon/blog/item/35ea0c12f8e7475bf919b8c1.html"&gt;Chinese blog&lt;/a&gt;
implemented solution #2. I chose solution 3, however, following
&lt;a href="http://blog.163.com/fhtx_2008/blog/static/7285544201012641765/"&gt;this other Chinese blog&lt;/a&gt;.
My updated &lt;code&gt;BatteryService.java&lt;/code&gt; reads:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// NITDROID: Native update disabled.&lt;/span&gt;
&lt;span class="c1"&gt;// private native void native_update();&lt;/span&gt;

&lt;span class="c1"&gt;// NITDROID: Dummy battery&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;mBatteryLevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BATTERY_SCALE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;CRITICAL_BATTERY_LEVEL&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;mBatteryLevelCritical&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mBatteryLevel&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;CRITICAL_BATTERY_LEVEL&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;mPlugType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BatteryManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BATTERY_PLUGGED_AC&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;mDischargeStartTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;mBatteryStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BatteryManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BATTERY_STATUS_FULL&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;mBatteryHealth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BatteryManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BATTERY_HEALTH_GOOD&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;mBatteryPresent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;mBatteryVoltage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;mBatteryTemperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;mBatteryTechnology&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NITDroid&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;sendIntent&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Make, copy to SD card, load kernel, run. And guess what&amp;#8230;I want to cry right
now. This is what I live for. If there is a heaven, I am there now. FIRST
BOOTABLE FROYO IMAGE ON THE N810!!!&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;div class="title"&gt;First bootable Froyo image (Android version 2.2.2_r1) on the N810:&lt;/div&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="/assets/files/nitdroid/P1030162.JPG"&gt;
&lt;img src="/assets/files/nitdroid/P1030162_small.JPG" alt="Froyo Home screen on the Nokia N810" width="256" height="192" /&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;span class="image"&gt;
&lt;a class="image" href="/assets/files/nitdroid/P1030163.JPG"&gt;
&lt;img src="/assets/files/nitdroid/P1030163_small.JPG" alt="Android browser on the Nokia N810" width="256" height="192" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Unfortunately, I am still far from done. Things that are missing, in order of priority:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
For some strange reason, although the touchscreen driver in the kernel
definitely works (as I have booted the same kernel with the stock Maemo
userspace and it worked there), the touchscreen does not work at all. This is of
course most urgent.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Sound does not work; the sound driver for the N810 in my current kernel does
not even compile and I had to disable it.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Power and battery drivers.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Some sort of key remapping mechanism as the N810 has different hardware keys.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
WiFi.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;But for now, blissful sleep. So I guess I didn&amp;#8217;t end up turning in that essay that was due Friday of last week after all&amp;#8230;but that moment of just pure orgasmic euphoria was worth it all. Good night.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>Man page browser for Android</title><link href="https://seasonofcode.com/posts/man-page-browser-for-android.html" rel="alternate"></link><updated>2011-05-05T14:57:00-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-05-05:posts/man-page-browser-for-android.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Now is totally the wrong time for this, but I started thinking about a new project - creating a man page browser for Android that I could use as a quick reference for Linux commands, C functions, etc.. Currently I&amp;#8217;m thinking of making it keep a database of man pages offline, although online storage is also possible (I would implement some sort of XML-RPC in PHP on my server; but then my server is slow&amp;#8230;). Man pages would be stored in a SQLite database on the SD card, and indexed by page name and section. The content of the page would be stored in HTML and displayed using a &lt;a href="http://developer.android.com/reference/android/webkit/WebView.html"&gt;WebView&lt;/a&gt; widget with a &lt;a href="http://developer.android.com/reference/android/webkit/WebViewClient.html"&gt;WebViewClient&lt;/a&gt; that intercepts links to other man pages.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I decided the easiest way to create this man pages database was to grab it online. I hacked together a Python script that crawled the directory at &lt;a href="http://linux.die.net/man/"&gt;linux.die.net/man&lt;/a&gt;; it worked fine until for some reason after grabbing several hundred pages my computer would no longer connect to the server. I suppose they must have implemented some DOS-prevention mechanism, as I tried the running the crawler from another computer and the same happened. This was a problem, and instead I decided to write another script that crawled &lt;a href="http://www.linuxmanpages.com/"&gt;www.linuxmanpages.com&lt;/a&gt; instead. This time I was able to compile a full SQLite database weighing in at 100MB; with XZ compression this was reduced to 11MB and is an acceptable size. My app, then, would download this XZ file to the SD card on first run and extract it there.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In order to intercept links to other man pages, I have to make sure that such links are in a consistent format. I chose the format &lt;code&gt;/man/section/page&lt;/code&gt; and had to reformat links in the linuxmanpages.com crawler.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I did some queries on my laptop and SQLite seems to manage them in a quite amazing speed, including some full text searches. The main screen on my app, then, will consist of a search box on top and a list of results below that gets updated as the user types; only the first several results are listed for speed and the rest will appear when the user starts scrolling the list. A separate full text search will be available separately.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is still just an alpha-stage idea, but I think this will be fun :) Anyway some links:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/assets/files/die_net.py"&gt;linux.die.net/man crawler&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/assets/files/linuxmanpages_com.py"&gt;linuxmanpages.com crawler&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="/assets/files/linuxmanpages_com.db.xz"&gt;linuxmanpages.com database generated by the crawler, compressed using xz.&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Note that the crawlers need Python 3 to run.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Misc"></category></entry><entry><title>Ugh...</title><link href="https://seasonofcode.com/posts/ugh.html" rel="alternate"></link><updated>2011-05-04T03:50:15-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-05-04:posts/ugh.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Haven&amp;#8217;t been able to work on NITDroid in a while&amp;#8230;anyway I came across a couple of interesting links and I&amp;#8217;ll look more into them when I get to it.&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://www.kandroid.org/android_pdk/display_drivers.html"&gt;Android Porting Guide - Display Drivers&lt;/a&gt; is a cool page that discusses implementing a framebuffer device driver for Android.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://git.kernel.org/?p=linux/kernel/git/stable/linux-2.6.32.y.git;a=blob;f=Documentation/fb/framebuffer.txt"&gt;The Frame Buffer Device&lt;/a&gt; in the Linux kernel documentation. This really isn&amp;#8217;t a link, but it gives a good overview of what a framebuffer device driver looks like in Linux.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://linuxconsole.sourceforge.net/fbdev/HOWTO/index.html"&gt;Linux Framebuffer Driver Writing HOWTO&lt;/a&gt; was a wow-moment for me. Will have to follow this closer. I only hope it&amp;#8217;s not too outdated as it was last updated in 2001.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;That&amp;#8217;s it for now. This summer is going to be fun.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>EGL Context Preservation on Android</title><link href="https://seasonofcode.com/posts/egl-context-preservation-on-android.html" rel="alternate"></link><updated>2011-03-15T15:08:50-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-03-15:posts/egl-context-preservation-on-android.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;This is really a little note for myself but I came across the issue of the
preservation of the OpenGL context (or rather, the EGL context as we&amp;#8217;re dealing
with OpenGL ES) of an application. On desktop systems, G3D assumes its GL
context is always preserved, either by the GPU or by the system. On Android,
however, it turns out that there are two possible scenarios that will cause a
running application to lose its EGL context. The first is when the user leaves
the application, e.g., by pressing the Home button or in the case of an incoming
call. There is in fact a function called setPreserveEGLContextOnPause(boolean)
in GLSurfaceView, which does exactly what the name suggests; however, in the
words of the API documentation, "whether the EGL context is actually preserved
or not depends upon whether the Android device that the program is running on
can support an arbitrary number of EGL contexts or not. Devices that can only
support a limited number of EGL contexts must release the EGL context in order
to allow multiple applications to share the GPU." There is also a
getPreserveEGLContextOnPause() function, but the documentation does not specify
whether this will return the actual preservation policy of the machine or only
whatever value we have set earlier via setPreserveEGLContextOnPause(boolean). I
looked up the source file in the Android source tree but these two functions are
newly added in Android 3.0 (whose code, being in beta, is apparently not
released to the public) and do not show up in the published code base.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The second way we could lose the EGL context is when the user locks the screen
and the device goes to sleep. Again quoting the API documentation, "[t]he EGL
context will typically be lost when the Android device awakes after going to
sleep&amp;#8230;Note that when the EGL context is lost, all OpenGL resources associated
with that context will be automatically deleted." There does not appear to exist
a way to prevent this.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Whenever we will have lost a context and need to render again, the
onSurfaceCreated function in our renderer class is called with a newly created
context; this is where a Java app would send all its resources to the GPU. In
the case of the G3D library, I think the best we can do is to require our client
application to always provide some sort of callback on Android that we will
invoke to resend resources to the GPU, for instance in their GApp subclass.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Android"></category></entry><entry><title>MSYS and SSH server under Windows 7</title><link href="https://seasonofcode.com/posts/msys-and-ssh-server-under-windows-7.html" rel="alternate"></link><updated>2011-03-14T03:29:05-07:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-03-14:posts/msys-and-ssh-server-under-windows-7.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;By order of The Professor, thou shalt install Windows 7 on thy lab machine. Alright, I can live with Windows, but I want my UNIX environment and I want SSH. I installed MinGW, MSYS, and got a basic UNIX environment working within a few minutes. It took me the better half of my weekend, however, to get an SSH server running that would allow me to use the Bash shell that comes with MSYS. I first tried &lt;a href="http://www.freesshd.com/"&gt;freeSSHd&lt;/a&gt;, but its terminal driver is crappy and I can&amp;#8217;t even start Bash. &lt;a href="http://mobassh.mobatek.net/"&gt;MobaSSH&lt;/a&gt; comes with a copy of Cygwin, but my professor appears to have a grudge against Cygwin which is why I&amp;#8217;m installing MinGW in the first place. I then tried &lt;a href="http://www.kpym.com/"&gt;Kpym&lt;/a&gt;; the personal version is so crippled I uninstalled it within five minutes. I tried &lt;a href="http://sshwindows.sourceforge.net/"&gt;OpenSSH for Windows&lt;/a&gt;, but it does not appear to work on Windows 7 at all. Finally, I discovered &lt;a href="http://www.bitvise.com/winsshd"&gt;WinSSHD&lt;/a&gt;. Setting the shell was a weird process; you had to go to Advanced Settings &amp;#8594; Access Control &amp;#8594; Windows Groups and change the default shell associated with "everyone" (I mean, what does this have to do with access control?) but when I changed the default shell to &lt;code&gt;C:MinGWmsys1.0bash.exe -il&lt;/code&gt;, magic happened. However, vim was refusing to launch, and the vi binary that came with MSYS complained about the terminal type being unrecognizable. I screwed around a little bit and discovered that the solution was to open up the environment settings window from Control Panel and change the environment variable &lt;code&gt;CYGWIN&lt;/code&gt; from &lt;code&gt;tty&lt;/code&gt; to &lt;code&gt;notty&lt;/code&gt;. The installer of WinSSHD adds this environment variable to Windows 7, but it appears to be entirely unnecessary and in my case counterproductive. Who cares though; the SSH server is running beautifully, and I can login directly to the MSYS Bash. Yay!!&lt;/p&gt;&lt;/div&gt;
</summary><category term="Misc"></category><category term="Featured"></category></entry><entry><title>NITDroid userland update</title><link href="https://seasonofcode.com/posts/nitdroid-userland-update.html" rel="alternate"></link><updated>2011-02-19T04:37:25-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-19:posts/nitdroid-userland-update.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Although I haven&amp;#8217;t been able to make much progress, I thought I&amp;#8217;d post an update
on NITDroid for documentation purposes. I&amp;#8217;ve been working on the Android
userland and it hasn&amp;#8217;t been easy so far.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I started off by following &lt;a href="http://elinux.org/Android_on_OMAP"&gt;this page&lt;/a&gt; on
eLinux.org again; the idea was to extract userland files from the system images
provided by the SDK for emulation on QEMU. I tried this method with Gingerbread
images; however, it did not take me long to notice that these images are missing
important components - for example, the DBUS daemon, &lt;code&gt;/system/bin/dbus-daemon&lt;/code&gt;
and its associated library and config file are not present, despite being named
as startup services in &lt;code&gt;init.rc&lt;/code&gt;. A little research showed me that the so-called
"SDK builds" have indeed different configurations than normal builds.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The natural conclusion is that I should manually build the images from source,
as explained &lt;a href="http://source.android.com/source/download.html"&gt;here&lt;/a&gt; on the
Android open source project page. It was not as straightforward as the page
claimed, however:&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
I check out the code using &lt;code&gt;repo init -u git://whatever.git -b gingerbread&lt;/code&gt;,
and try to build. I am told that anything from Froyo up required a 64-bit host
system. I check out Froyo by &lt;code&gt;repo init -b froyo&lt;/code&gt;, and am told that branch did
not exist. Fine; how abaout &lt;code&gt;repo init -b froyo-plus-aosp&lt;/code&gt;? No, STILL requires a
64-bit system.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
I spend an hour installing a full 64-bit Arch system on a CF card, forgetting to add &lt;code&gt;usb&lt;/code&gt; to &lt;code&gt;mkinitcpio.conf&lt;/code&gt;, and re-installing. I now boot into the new 64-bit system, and try building again. Now I am told my host system can&amp;#8217;t build 32-bit binaries. Seriously, &lt;em&gt;WTF&lt;/em&gt;?? Why on earth would the Android source make you build 32-bit binaries on a 64-bit system??
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Alright, I&amp;#8217;ll install &lt;code&gt;gcc-multilib&lt;/code&gt; and friends from the multilib repository
(see
&lt;a href="https://wiki.archlinux.org/index.php/Arch64_FAQ#Multilib_Repository_-_Multilib_Project"&gt;this page&lt;/a&gt;
on the Arch wiki). Build.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The build process halts because I&amp;#8217;m missing some tools. &lt;code&gt;yaourt -S gperf zip
unzip&lt;/code&gt;. My bad.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
I get &lt;em&gt;compile errors&lt;/em&gt;. A completely useless component called MonkeyRunner
requires &lt;code&gt;javax.annotation.Nullable&lt;/code&gt; which allows you to use &lt;code&gt;@Nullable&lt;/code&gt; and
&lt;code&gt;@NotNull&lt;/code&gt; in your Java code. How useful. &lt;code&gt;find sdk/monkeyrunner/src -type f
-exec sed -i &lt;em&gt;s/@Nullable//g&lt;/em&gt; &lt;em&gt;{}&lt;/em&gt; &lt;em&gt;;&lt;/em&gt;&lt;/code&gt; etc.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
More dependency errors, and no one else has ever run into this while building
Froyo. This sucks. I&amp;#8217;ve already spent 12 hours on this. Giving up.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I suddenly decided to test out the now abandoned N8x0 version of the NITDroid
project, which is based on Android 1.6 (Donut). I downloaded the rootfs,
extracted it to the SD card, and booted it up with my kernel. I could actually
boot to a UI telling me I&amp;#8217;m running out of battery (I was) before it would
freeze and then die. Still, this shows me my display driver is working, although
of course it might not with Android 2.0+ (see
&lt;a href="http://elinux.org/Android_on_OMAP#Blank_screen"&gt;here&lt;/a&gt;). But that is
encouraging. I try my previous rootfs extracted from SDK images; I still get
only a blank screen after Zygote starts, probably due to the page flipping issue
and probably meaning the fix on that page does not actually work.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Then, as stuck as I was, I found
&lt;a href="http://groups.google.com/group/android-x86/browse_thread/thread/00aeaafa85eaaa31/f7ef2af3b7862048"&gt;this page&lt;/a&gt;
which showed me that it is possible to build Froyo on a 32-bit system if
checked it out as &lt;code&gt;repo init -b android-&amp;lt;version&amp;gt;&lt;/code&gt;. Then I found
&lt;a href="http://groups.google.com/group/android-porting/browse_thread/thread/e939f7e86a555892"&gt;this
page&lt;/a&gt; which discusses the possibility of modifying the source code of the
userland so that it does not require page flipping / double buffering; and
lastly but most interestingly, &lt;a href="http://www.yuan.se/?p=7"&gt;this page&lt;/a&gt; discusses
actually implementing double buffering in a kernel framebuffer driver.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So I naturally checked out Froyo using &lt;code&gt;repo init -b android-2.2.1_r2&lt;/code&gt; and when
instructed by the build script installed &lt;code&gt;jdk5&lt;/code&gt; from the AUR (I had to patch the
PKGBUILD according to the comments and create a symlink from &lt;code&gt;/opt/java5&lt;/code&gt; to
&lt;code&gt;/opt/java&lt;/code&gt;). Froyo is happily compiling (for now), and I should go to
bed&amp;#8230;I&amp;#8217;ve done basically nothing else all day and it is 5am.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;UPDATE (02/19/2011): Froyo compiled without a problem using JDK5; looks like the compile errors I got before were due to differences between JDK5 and JDK6. I could never have figured that out if the build script hadn&amp;#8217;t told me. But the built userland still freezes when launching Zygote; it seems framebuffer is the problem. I found &lt;a href="https://sites.google.com/site/nitdroid/n900-port"&gt;this page&lt;/a&gt; that gives a patch that supposedly allowed the N900 to boot into GUI despite its lack of page flipping support. I will investigate further later.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>MMC support in NITDroid kernel</title><link href="https://seasonofcode.com/posts/mmc-support-in-nitdroid-kernel.html" rel="alternate"></link><updated>2011-02-16T21:29:54-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-16:posts/mmc-support-in-nitdroid-kernel.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;The kernel now supports both the internal and the external MMC. For some bizarre reason, all I had to do to get the external MMC to work was turn on &lt;code&gt;CONFIG_MENELAUS&lt;/code&gt; and &lt;code&gt;CONFIG_MMC_OMAP&lt;/code&gt;; the kernel was not crashing anymore unlike in the &lt;a href="?p=79"&gt;this previous post&lt;/a&gt; when I built the first bootable kernel. I guess my new approach of restarting from scratch and changing as little as possible paid off.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I wasted hours getting the internal MMC to work, however. It turns out that the issue was not with the MMC driver in &lt;code&gt;drivers/mmc/host/omap.c&lt;/code&gt; but with the Menelaus driver in &lt;code&gt;drivers/mfd/menelaus.c&lt;/code&gt;; in fact, there was a f-ing &lt;em&gt;typo&lt;/em&gt; in that file, as explained in &lt;a href="http://lkml.org/lkml/2010/8/8/98"&gt;this email&lt;/a&gt;. The fix isn&amp;#8217;t in either the vanilla linux-omap 2.6.32 or the Android OMAP 2.6.32 tree, though, and it looks like the people over at Meego still haven&amp;#8217;t figured it out (see &lt;a href="http://forum.meego.com/showthread.php?p=3525"&gt;this thread&lt;/a&gt;). Seriously, all the smart people at Intel, Nokia, AMD and Novel&amp;#8230;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Anyhow, &lt;a href="/assets/files/nitdroid/bootable-mmc-20110216.diff"&gt;here&lt;/a&gt; is the comprehensive diff file from commit 69a7364c16c5aeb246dbb4c4e7696e39841492f5 in the Android OMAP archive/android-omap-2.6.32 branch, and &lt;a href="/assets/files/nitdroid/zImage-20110216"&gt;here&lt;/a&gt; is the compiled zImage. Of course, sound and WiFi are still not working, among other things I suppose. On the other hand, looking forward, I think I&amp;#8217;ll stop working on the kernel for now (believe me, I&amp;#8217;m &lt;em&gt;sick&lt;/em&gt; of diff&amp;#8217;s and grep&amp;#8217;s across five different kernel trees&amp;#8230;) and instead start working on the userland. Or homework.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;UPDATE (02/16/2011): Screw homework. Just updated the linked files with Android support (according to &lt;a href="http://elinux.org/Android_on_OMAP"&gt;this page&lt;/a&gt;); this includes double buffering support in &lt;code&gt;omapfb_main.c&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>Cleaner bootable NITDroid kernel</title><link href="https://seasonofcode.com/posts/cleaner-bootable-nitdroid-kernel.html" rel="alternate"></link><updated>2011-02-16T18:14:24-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-16:posts/cleaner-bootable-nitdroid-kernel.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Alright, based on my previous research, I&amp;#8217;ve managed to build a cleaner bootable kernel on top of the Android OMAP kernel 2.6.32, revision 69a7364c16c5aeb246dbb4c4e7696e39841492f5. The diff file is found &lt;a href="/assets/files/nitdroid/bootable-20110216.diff"&gt;here&lt;/a&gt;. The changes I made are:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;arch/arm/configs/n810_defconfig&lt;/code&gt;: The (current) temporary default configuration for the N810.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;arch/arm/mach-omap2/{Kconfig,Makefile}&lt;/code&gt;: Added switchs and targets providing LCD and USB support on the N8X0.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;arch/arm/mach-omap2/board-n8x0{,lcd,usb,mmc}.c&lt;/code&gt;: Added functional support for the N8X0 board and the corresponding hardware components of the N8X0.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;arch/arm/plat-omap/include/plat/io.h&lt;/code&gt; and &lt;code&gt;arch/arm/mach-omap2/io.c&lt;/code&gt;: Backported an API change that the &lt;code&gt;board-n8x0*&lt;/code&gt; files depend on and is apparently in upstream linux-omap 2.6.32.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;arch/arm/mach-omap2/mailbox.c&lt;/code&gt;: Fixed compilation warning.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;arch/arm/plat-omap/include/plat/serial.h&lt;/code&gt; and &lt;code&gt;arch/arm/mach-omap2/serial.c&lt;/code&gt;: I don&amp;#8217;t really understand what&amp;#8217;s going on here, but it compiles. This is a direct copy from Luke-Jr&amp;#8217;s 2.6.33.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;arch/arm/plat-omap/{Kconfig,Makefile}&lt;/code&gt;: Added switchs and targets for bootloader information passing and the reading of boot reasons and component versions. The kernel will not boot without all three enabled.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;arch/arm/include/asm/setup.h&lt;/code&gt;: Added declarations needed for bootloader information passing.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;arch/arm/plat-omap/{bootreason.c,common.c,component-version.c}&lt;/code&gt;: Provide support for bootloader information passing and the reading of boot reasons and component versions.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;arch/arm/plat-omap/i2c.c&lt;/code&gt;: Fixed stupid compilation error.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;arch/arm/plat-omap/include/plat/cbus.h&lt;/code&gt;: Provides a data structure required by &lt;code&gt;board-n8x0*.c&lt;/code&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;drivers/input/touchscreen/{Kconfig,Makefile}&lt;/code&gt;: Added support for TSC2005, the touchscreen used in the N810.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;include/linux/spi/tsc2005.h&lt;/code&gt; and &lt;code&gt;drivers/input/touchscreen/tsc2005.c&lt;/code&gt;: Provide support for TSC2005.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;drivers/serial/Makefile&lt;/code&gt;,&lt;code&gt;drivers/serial/omap-serial.c&lt;/code&gt;,&lt;code&gt;arch/arm/plat-omap/include/plat/omap-serial.h&lt;/code&gt;: &lt;code&gt;omap-serial.{h,c}&lt;/code&gt; are unused and cause compilation errors; removed.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;drivers/usb/gadget/composite.c&lt;/code&gt;: Fixed stupid compilation error.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;drivers/video/omap/{dispc.c,omapfb.h,rfbi.c}&lt;/code&gt;: The changes to these three files are magical. I have no clue how they work, but without them framebuffer doesn&amp;#8217;t work and with them it does. It&amp;#8217;s like &lt;em&gt;magic&lt;/em&gt;. Copied from Luke-Jr&amp;#8217;s 2.6.33.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;drivers/watchdog/omap_wdt.c&lt;/code&gt;: I don&amp;#8217;t understand how this works either, but it won&amp;#8217;t normally compile. Direct copy from Luke-Jr&amp;#8217;s 2.6.33.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So what&amp;#8217;s next? Well, this is still a &lt;em&gt;really&lt;/em&gt; primitive kernel:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
No audio support
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
No MMC support (I had to disable the Menelaus driver; see &lt;a href="?p=79"&gt;previous post&lt;/a&gt;)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
No WiFi support
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I will now start working on these.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>First bootable kernel</title><link href="https://seasonofcode.com/posts/first-bootable-kernel.html" rel="alternate"></link><updated>2011-02-13T19:45:22-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-13:posts/first-bootable-kernel.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;div class="title"&gt;Maemo userspace running custom Android OMAP 2.6.32.9:&lt;/div&gt;&lt;p&gt;&lt;span class="image"&gt;
&lt;a class="image" href="/assets/files/nitdroid/P1030161.JPG"&gt;
&lt;img src="/assets/files/nitdroid/P1030161_small.JPG" alt="Maemo userspace running custom Android OMAP 2.6.32.9" width="256" height="192" /&gt;
&lt;/a&gt;
&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;FINALLY - a bootable kernel on top of Android OMAP!! I can&amp;#8217;t even express how relieved &amp;amp; proud I am for figuring this out after all this effort - and I barely slept in between&amp;#8230;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Anyway, I figured out two important issues in the past three hours. Firstly, boot messages. I finally got the kernel to display boot messages after copying over the directories &lt;code&gt;drivers/video/omap&lt;/code&gt; and &lt;code&gt;drivers/video/omap2&lt;/code&gt; from the Gentoo mod; I do not know which one and which file(s) within are actually responsible for this, but that&amp;#8217;s something I&amp;#8217;ll figure out another day.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Secondly, with boot messages enabled, I could see the kernel was crashing on something related to the Menelaus driver. I tried enabling &lt;code&gt;CONFIG_BOOT_PRINTK_DELAY&lt;/code&gt; in the kernel config so I could see the actual messages before the stack trace flooded the screen, but doing so made it unbootable again. I tried capturing the boot process with my digital camera, but even the latter could not capture the full messages on time. I then tried copying over &lt;code&gt;drivers/i2c&lt;/code&gt;, but there were too many compilations errors to fix and I ended up just disabling &lt;code&gt;CONFIG_MENELAUS&lt;/code&gt; and &lt;code&gt;CONFIG_MMC_OMAP&lt;/code&gt;. And that was the magical touch.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So it turns out the Menelaus driver was what was causing the kernel to crash; more specifically, it was the Menelaus initialization routine according to the portions of the kernel messages I could see. My current roadmap is thus&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
Starting again from scratch, produce the minimal patch that would allow Android OMAP 2.6.32 to boot. Currently I bluntly copied over basically the entire &lt;code&gt;arch/arm&lt;/code&gt; directory and that is undesirable for the simple reason that the resulting patch would contain differences between linux-omap 2.6.33 and linux-omap 2.6.32 and would not be applicable to future Android OMAP versions. I want a patch specific to the N810 so that I could apply it to any future Android OMAP version.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Fix Menelaus and enable MMC. This could prove problematic as the version of Menelaus in the Gentoo mod appears to rely on the new I2C API in 2.6.33, and the version of Menelaus in 2.6.32 that uses the older I2C API crashes the kernel as I just found out. If I backport the version of Menelaus in the Gentoo mod, I could end up producing 2.6.32-specific patches. But I&amp;#8217;ll figure that out.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>QEMU</title><link href="https://seasonofcode.com/posts/qemu.html" rel="alternate"></link><updated>2011-02-12T02:09:25-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-12:posts/qemu.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Still no luck with the kernel. I decided to try running things on QEMU, which supports emulating the N810, but the binary package in the Arch repositories has a bug (described on &lt;a href="http://patchwork.ozlabs.org/patch/61224/"&gt;this page&lt;/a&gt;)that needs to be patched. Therefore, a &lt;a href="https://aur.archlinux.org/packages.php?ID=46419"&gt;new package&lt;/a&gt; is now on AUR.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Instructions on emulating an N810 / N800 on QEMU can be found &lt;a href="http://www.rkeene.org/projects/info/wiki/106"&gt;here&lt;/a&gt; and &lt;a href="http://marcin.juszkiewicz.com.pl/2008/04/11/nokia-n800-emulation/"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;UPDATE (02/12/2011): Whatever I set the R&amp;amp;D flags to, the said method doesn&amp;#8217;t work. All I get is a blank screen. Abandoning.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category><category term="Misc"></category></entry><entry><title>A new approach</title><link href="https://seasonofcode.com/posts/a-new-approach.html" rel="alternate"></link><updated>2011-02-11T23:34:41-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-11:posts/a-new-approach.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Alright, after collecting my thoughts, I have decided to restart the kernel
porting process based on a new approach. I will start with the Android OMAP
kernel v2.6.32.9 and port the N810-specific parts of the Gentoo kernel mod
v2.6.33.2 over to it. This is because&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
I have tested the Gentoo kernel mod on my N810 and verified that it works.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The two kernels have similar versions, and there should not be significant
changes in kernel APIs that will require corresponding changes in the code to be
ported.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I first did a diff between the Gentoo mod and the linux-omap tree of
the same version and another diff between the Gentoo mod and the vanilla Linux
tree of the same version, realized that the former diff file was smaller, and
tried to patch the android-omap kernel with it. Unfortunately, there appear to
be many minor and irrelevant differences even in this diff file that caused
various compilation and configuration problems; sometimes the fuzzy approach
taken by patch caused even more problems. Therefore, I have decided that I will
manually patch the individual components required.  The checklist:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;arch/arm/mach-omap2&lt;/code&gt; and &lt;code&gt;arch/arm/plat-omap&lt;/code&gt;: I am considering, instead of patching individual files, simply copying these two directories over from the Gentoo mod.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;arch/arm/include/asm/setup.h&lt;/code&gt;: direct copy from the Gentoo mod.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;arch/arm/configs/n810_defconfig&lt;/code&gt;: very few minor changes required, otherwise a direct copy from the Gentoo mod.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;drivers/watchdog/omap_wdt.c&lt;/code&gt;: direct copy from the Gentoo mod.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
TSC2005 related files:
&lt;/p&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;include/linux/spi/tsc2005.h&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;drivers/input/touchscreen/tsc2005.c&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;drivers/input/touchscreen/{Makefile, Kconfig}&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>Frustration</title><link href="https://seasonofcode.com/posts/frustration.html" rel="alternate"></link><updated>2011-02-11T18:53:40-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-11:posts/frustration.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Still having no luck getting my custom kernels to boot. I&amp;#8217;ve tried dozens of different kernel configuration flags, I&amp;#8217;ve screwed around with different souce trees, and regardless of what I did, every kernel I&amp;#8217;ve built gets stuck at the splash screen where it says NOKIA and then powers off. I found a 2.6.33 kernel a wizard Luke-Jr made for Gentoo &lt;a href="http://forums.internettablettalk.com/showthread.php?p=704672"&gt;here&lt;/a&gt;, and it&amp;#8217;s the only kernel besides the stock Maemo 2.6.21 that actually boots. The really frustrating thing is that my kernels don&amp;#8217;t generate any output, and it is therefore impossible to figure out what&amp;#8217;s wrong. Luke-Jr&amp;#8217;s 2.6.33 does produce output to the screen, however; I&amp;#8217;ve tried everything from various framebuffer configuration options in the kernel to the &lt;code&gt;loglevel&lt;/code&gt; command line argument, but nothing works. I even copied the same config into a patched linux-omap tree and it &lt;em&gt;still&lt;/em&gt; doesn&amp;#8217;t work. Looks like there&amp;#8217;s something missing / wrong in the code itself; but I copied over the same &lt;code&gt;board-n8x0.c&lt;/code&gt; &amp;amp; friends from the Gentoo kernel&amp;#8230;arrrr&amp;#8230;&amp;#8230;&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>Merging N810 device drivers</title><link href="https://seasonofcode.com/posts/merging-n810-device-drivers.html" rel="alternate"></link><updated>2011-02-10T14:52:52-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-10:posts/merging-n810-device-drivers.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I&amp;#8217;ve begun work on incorporating N810 device drivers into the Android OMAP kernel. I am basically following the list of individual components of the N810 on &lt;a href="http://elinux.org/N800"&gt;this page&lt;/a&gt; from the eLinux wiki. It took quite a while (~3h) just to make everything compile. Some random notes follow.&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;lm8323&lt;/strong&gt;, keyboard driver for the N810: The driver for the lm8323 is included in the stock Android OMAP tree under &lt;code&gt;drivers/input/keyboard&lt;/code&gt; as &lt;code&gt;CONFIG_KEYBOARD_LM8323&lt;/code&gt; (&lt;code&gt;Device Drivers &amp;#8594; Input device support &amp;#8594; Generic input layer &amp;#8594; Keyboards&lt;/code&gt;). It requires &lt;code&gt;CONFIG_I2C&lt;/code&gt; (&lt;code&gt;Device Drivers &amp;#8594; I2C support&lt;/code&gt;) and &lt;code&gt;CONFIG_LEDS_CLASS&lt;/code&gt; (&lt;code&gt;Device Drivers &amp;#8594; LED Support &amp;#8594; LEDS Class Support&lt;/code&gt;).
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;tsc2005&lt;/strong&gt;, touchscreen driver for the N810: I backported the TSC2005 driver from linux-omap 2.6.37. This was complicated by
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The GPIO API changed sometime in Nov 2008; I had to manually replace the following functions following compilation errors:
&lt;/p&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;omap_gpio_request(int) &amp;#8594; gpio_request(int, const char *)&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;omap_gpio_free(int) &amp;#8594; gpio_free(int)&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;omap_get_gpio_datain(int) &amp;#8594; gpio_get_value(int)&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;omap_set_gpio_dataout(int, int) &amp;#8594; gpio_set_value(int, int)&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;omap_set_gpio_direction(int, int) &amp;#8594; gpio_direction_input(int, int), gpio_direction_output(int, int)&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The TSC2005 driver relies on a series of macros, constants and functions in a &lt;code&gt;mux.h&lt;/code&gt;; I had to backport most of the functionality from &lt;code&gt;arch/arm/mach-omap2/mux2420.{h,c}&lt;/code&gt; in linux-omap 2.6.37. The porting wasn&amp;#8217;t smooth.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I have also have had to manually merge the N810-specific structures and routines
from &lt;code&gt;arch/arm/mach-omap2/board-n810.c&lt;/code&gt; in the Maemo source tree into
&lt;code&gt;arch/arm/mach-omap2/board-n8x0.c&lt;/code&gt; in the Android OMAP tree. This was
complicated by the fact that the latter contained code for both the N800 and the
N810 and there were conflicts; in the &lt;code&gt;n8x0_ts_set_config&lt;/code&gt; function, for
instance, there was no runtime detection of which touch screen, the TSC2301 in
the N800 or the TSC2005 in the N810, needs to be initialized; the code for the
former was compiled in, since tmr&amp;#8217;s patch was just for N800&amp;#8217;s.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The result:
&lt;a href="/assets/files/nitdroid/7bc11a1aaba032747343f821600215d4f6180010.diff"&gt;this&lt;/a&gt;
is the newest diff against the &lt;code&gt;archive/android-omap-2.6.32&lt;/code&gt; branch of the
Android OMAP tree (commit 69a7364c16c5aeb246dbb4c4e7696e39841492f5), featuring:&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
TSC2005
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Modified &lt;code&gt;board-n8x0.c&lt;/code&gt; with (rudimentary) N810 support
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Now actually compiles.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The &lt;a href="/assets/files/nitdroid/config-20110210"&gt;config&lt;/a&gt; file.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>Integrating tmr's N800 patch</title><link href="https://seasonofcode.com/posts/integrating-tmrs-n800-patch.html" rel="alternate"></link><updated>2011-02-10T04:44:45-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-10:posts/integrating-tmrs-n800-patch.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I integrated tmr&amp;#8217;s N800 patch (in &lt;a href="http://talk.maemo.org/showthread.php?t=49660"&gt;this thread&lt;/a&gt; I mentioned in the previous post) into the &lt;code&gt;archive/android-omap-2.6.32&lt;/code&gt; branch of the Android OMAP tree (commit 69a7364c16c5aeb246dbb4c4e7696e39841492f5). The output of just running &lt;code&gt;patch&lt;/code&gt; with tmr&amp;#8217;s patch is found &lt;a href="/assets/files/nitdroid/tmr_patch_log.txt"&gt;here&lt;/a&gt; and the output of &lt;code&gt;git diff&lt;/code&gt; is &lt;a href="/assets/files/nitdroid/tmr_patch_mod.diff"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I don&amp;#8217;t have a working &lt;code&gt;.config&lt;/code&gt; yet, and I haven&amp;#8217;t actually tried building the kernel. Will do that another time.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>Confusion</title><link href="https://seasonofcode.com/posts/confusion.html" rel="alternate"></link><updated>2011-02-10T00:56:32-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-10:posts/confusion.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I haven&amp;#8217;t made much progress with NITDroid these past two days. This comes from a rather confusing situation that I will now attempt to explain in an effort to clear my own mind.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Firstly, it appears that patching the linux-omap tree is unnecessary; the linux-omap tree appears to contain a default configuration for the N810 under &lt;code&gt;arch/arm/configs/&lt;/code&gt;, sometimes named &lt;code&gt;nokia_2420_defconfig&lt;/code&gt; (2.6.37). and sometimes &lt;code&gt;n8x0_defconfig&lt;/code&gt; (2.6.32). None of the kernels compiled from these configs actually work (as in they do not even boot the device), however, which is very confusing. According to &lt;a href="http://talk.maemo.org/showthread.php?t=36445"&gt;this page&lt;/a&gt;, the driver for the touchscreen on board the N810, TSC2005, was removed from linux-omap after 2.6.29 (which I have verified); it was, however, merged back into the tree by version 2.6.35 according to &lt;a href="http://elinux.org/N800"&gt;this page&lt;/a&gt;, which I have also verified.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Another unfortunate complication is that in the android-omap tree, only the 2.6.29 (Android 2.1 Eclair), 2.6.32 (Android 2.2 Froyo), and the current unstable 2.6.38 branches are available. It would seem that Google has yet to come up with the OMAP version of Android 2.3 Gingerbread, which means I will have to stick to porting Froyo (kernel version 2.6.32) instead.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Putting these two pieces of information together, the challenges are thus:&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
I have no working kernel / kernel configuration to start with. Neither the stock Maemo kernel based on linux-omap 2.6.21, nor the vanilla linux-omap kernels fully work.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
I will have to either backport the touchscreen driver from linux-omap 2.6.35 or forward port the touchscreen driver from linux-omap 2.6.29 to 2.6.32.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This is where I&amp;#8217;ve been stuck at since yesterday. However, I just discovered &lt;a href="http://talk.maemo.org/showthread.php?t=49660"&gt;this thread&lt;/a&gt; that gives a (supposedly) working patch against linux-omap 2.6.34-rc3 for the N800; the 2nd post gives a patch for the N810, but unfortunately against the vanilla Linux kernel 2.6.33-rc1. I will investigate them further tomorrow - or do (belated) homework, or sleep. One of these things.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>Compilation benchmark</title><link href="https://seasonofcode.com/posts/compilation-benchmark.html" rel="alternate"></link><updated>2011-02-09T13:30:37-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-09:posts/compilation-benchmark.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Yesterday I set up a small LAN in my room behind a Linksys router Julian kindly lent me. I did a simple benchmark just now to figure out how I should best be utilizing my resources, and the benchmark was building the same &lt;code&gt;cross-arm-linux-gnueabi-gcc-base&lt;/code&gt; package described in &lt;a href="?p=45"&gt;an earlier post&lt;/a&gt;. The results are:&lt;/p&gt;&lt;/div&gt;
&lt;div class="tableblock"&gt;
&lt;table rules="all"
width="100%"
frame="border"
cellspacing="0" cellpadding="4"&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left" valign="top"&gt; Host                           &lt;/th&gt;
&lt;th align="left" valign="top"&gt; CPU                              &lt;/th&gt;
&lt;th align="left" valign="top"&gt; RAM &lt;/th&gt;
&lt;th align="left" valign="top"&gt; Real Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Lenovo Thinkpad T400 (Longfox)&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Intel Core 2 Duo T9400 @ 2.53GHz&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;2GB&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;6m35s&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;IBM Thinkpad X40 (Profox)&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Intel Pentium M LV @ 1.2GHz&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;1GB&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;17m43s&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Dell GX270 (Busyfox)&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Intel Pentium 4 @ 3.0GHz&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;1GB&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;13m03s&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Lenovo Thinkpad X60 (Babyfox)&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;Intel Core Duo T2400 @ 1.83GHz&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;1GB&lt;/p&gt;&lt;/td&gt;
&lt;td align="left" valign="top"&gt;&lt;p class="table"&gt;10m55s&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Of course, the benchmark is fairly unscientific; this is one particular job and
I did not account for the fact that, for instance, Longfox, Profox and Babyfox
were all running a full DE simultaneously. Since I am interested in finding out
how these machines compare to each other when doing similar tasks to this build
process, however, I think this is good enough for me.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Interestingly, Busyfox&amp;#8217;s 3.0GHz P-4 was only ~1.5 times faster than Profox&amp;#8217;s
1.2GHz P-M; this ratio was also verified by the compilation of
&lt;code&gt;cross-arm-linux-gnueabi-binutils&lt;/code&gt; which took about 4m on Busyfox and about 6m
on Profox. It would seem that the P-M is indeed considerably "faster" per clock
cycle than the P-4; the exact ratio is (3.0/1.5)/1.2=1.67, or 67% "faster" per
clock cycle.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;On the other hand, on a closer inspection of Longfox, it appears that there is
no concurrency in the building process; the source files are compiled serially
and only one core appears to be used at any given time. This would mean that if
both cores were fully leveraged the T9400 @ 2.53GHz should theoretically be
~3.96 times faster than the P-4 at 3.0GHz; this means (3.0*3.96)/2.53=4.70 or
470% percent "faster" per clock cycle, which marks a huge improvement.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Currently, since the speed difference between Profox and Busyfox is really
negligeable from my perspective, and since Profox sits nicely on my desk and
Busyfox is huge, loud, and screen-less anyway, I will keep Busyfox as a file
server, store the NITDroid development files on Busyfox and mount them over
NFSv4 on Profox. The reason for the latter is that the X40&amp;#8217;s use a bizarre hard
drive form factor that makes their drives really hard to replace, and the
particular one in Profox has been clicking ominously for a while. This was what
prompted me to buy Babyfox, an X60, as my main portable laptop a few months ago.
Anyway to minimize heat dissipation I keep the CPU on Busyfox throttled at the
minimum clock rate, a pathetic 375MHz (&lt;code&gt;sudo cpufreq-set -f 375MHz&lt;/code&gt;), because
the &lt;code&gt;ondemand&lt;/code&gt; cpufreq governor does not work on &lt;code&gt;p4-clockmod&lt;/code&gt;, which is the
cpufreq module for P-4&amp;#8217;s. Power control on the hard drive is set with &lt;code&gt;sudo
hdparm -B1 -S120 /dev/sda&lt;/code&gt;. I did test writes on Profox and it would seem that,
with 11MB/s write speeds regardless of throttling settings or hdparm settings,
network bandwith rather than CPU clock speed or hard drive power control appears
to be the bottleneck. For my particular application though, this is really good
enough.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Misc"></category></entry><entry><title>The Maemo kernel</title><link href="https://seasonofcode.com/posts/the-maemo-kernel.html" rel="alternate"></link><updated>2011-02-08T02:37:53-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-08:posts/the-maemo-kernel.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I poked around earlier this afternoon and thanks to the information
&lt;a href="http://forums.internettablettalk.com/showthread.php?p=286993"&gt;here&lt;/a&gt; and
&lt;a href="http://maemo.org/maemo_release_documentation/maemo4.1.x/node12.html"&gt;here&lt;/a&gt;,
realized I should have run &lt;code&gt;make nokia_2420_defconfig&lt;/code&gt; rather than &lt;code&gt;make
n800_defconfig&lt;/code&gt;. Further, &lt;a href="http://wiki.maemo.org/Compiling_the_kernel"&gt;this
page&lt;/a&gt; pointed out that we don&amp;#8217;t need to actually flash the new kernel onto the
device; rather we can simply boot the device from it using&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;flasher-3.5 -l -b -k ...../zImage
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The unfortunate thing, however, is that when booting the device off the kernel I
built in this manner sound would not work and more importantly the device would
freeze and then reboot about 30 seconds after the home screen loads. I do not
know if this reflects a problem in the configuration of the kernel or an
incompatibility between my kernel and the stock Maemo userspace. I suspected it
was the latter; more specifically, I suspected that since I am only flashing the
kernel, the modules included in the userspace image obviously could not
function. I therefore tried compiling a bunch of things into the kernel itself
instead of as modules, but to no avail. Further investigation pending.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>New website!!</title><link href="https://seasonofcode.com/posts/new-website.html" rel="alternate"></link><updated>2011-02-08T02:28:02-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-08:posts/new-website.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;This afternoon I decided to buy a domain and a year of shared hosting services from &lt;a href="http://www.startlogic.com"&gt;StartLogic&lt;/a&gt;. I&amp;#8217;ve been working on the site since it was activated several hours ago; I added the &lt;a href="http://wordpress.org/extend/plugins/sociable-30"&gt;Sociable&lt;/a&gt; plugin and the &lt;a href="http://mobilepress.co.za/"&gt;MobilePress&lt;/a&gt; plugin to the WordPress install and the site is looking great. I modified several aspects of the desktop and mobile themes; I will setup a backup scheme soon. The registration of the domain cjix.info and a year of hosting cost altogether roughly $60. I&amp;#8217;m pretty excited about the site though.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Misc"></category></entry><entry><title>Building a cross-compiler toolchain for the N810 and initial kernel compilation</title><link href="https://seasonofcode.com/posts/building-a-cross-compiler-toolchain-for-the-n810-and-initial-kernel-compilation.html" rel="alternate"></link><updated>2011-02-07T04:38:38-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-07:posts/building-a-cross-compiler-toolchain-for-the-n810-and-initial-kernel-compilation.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;It turns out that setting up a cross-compiler toolchain is not as easy as it seemed - it took me over 6 hours to figure out. Anyway this all started because none of the the cross-compiler toolchains available in the Arch repos (&lt;code&gt;cross-arm-elf-&lt;strong&gt;&lt;/code&gt; in community, &lt;code&gt;cross-arm-none-eabi-&lt;/strong&gt;&lt;/code&gt; and &lt;code&gt;arm-2010-arm-none-eabi&lt;/code&gt; in the AUR) could compile the Maemo kernel, which I was testing the toolchains on. So I had to build my own.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In general, building a cross-compiler toolchain involves the following steps:&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
Build binutils with the configure argument &lt;code&gt;--target=TARGET&lt;/code&gt;. This is because GCC depends on binutils to generate and link binary code.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Build GCC, pass 1. Only a small GCC with minimal functionality is built here (again with &lt;code&gt;--target=TARGET&lt;/code&gt;), as we do not yet have glibc compiled for the target platform and the more advanced features of GCC require glibc. After this step, it is now possible to build actual binaries and libraries for the target platform.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Build glibc with the configure argument &lt;code&gt;--host=TARGET&lt;/code&gt; using the freshly built 1st-pass GCC.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Build GCC, pass 2. This GCC will be linked against the newly built glibc.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In this case, however, I only need the toolchain to build the Linux kernel, which does not depend on glibc but rather has its own version of the C library (klibc). Therefore, I only need to do steps #1 and #2 above.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Binutils was fairly straight-forward. I basically stole the PKGBUILD from the &lt;code&gt;cross-arm-elf-binutils&lt;/code&gt; package in the community repository of Arch and changed the compile target from &lt;code&gt;arm-elf&lt;/code&gt; to &lt;code&gt;arm-linux-gnueabi&lt;/code&gt; which Maemo apparently calls itself. The PKGBUILD is as follows:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Maintainer: Chuan Ji&lt;/span&gt;

&lt;span class="nv"&gt;_target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;arm-linux-gnueabi
&lt;span class="nv"&gt;pkgname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cross-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_target&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-binutils
&lt;span class="nv"&gt;pkgver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2.21
&lt;span class="nv"&gt;pkgrel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nv"&gt;pkgdesc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;A set of programs to assemble and manipulate binary and object files&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;i686 x86_64&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;license&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;GPL&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;!libtool&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://sources.redhat.com/binutils&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;depends&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;glibc&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bzip2&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;ftp://ftp.gnu.org/gnu/binutils/binutils-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pkgver&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.tar.bz2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;md5sums&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c84c5acc9d266f1a7044b51c85a823f5&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

build&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$srcdir&lt;/span&gt;/binutils-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pkgver&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$NOEXTRACT&lt;/span&gt; -eq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; ./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr
        --program-prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_target&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-
        --enable-shared
        --disable-multilib
        --with-lib-path&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib/binutils/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_target&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        --with-local-prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_target&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        --disable-nls
        --target&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_target&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        --host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$CHOST&lt;/span&gt;
        --build&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$CHOST&lt;/span&gt;

  make configure-host
  make &lt;span class="nv"&gt;tooldir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr
  make &lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr &lt;span class="nv"&gt;tooldir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr install

  rm -f &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/man/man1/&lt;span class="o"&gt;{&lt;/span&gt;dlltool,nlmconv,windres&lt;span class="o"&gt;}&lt;/span&gt;*

  rm -f &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/bin/ar
  rm -f &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/bin/as
  rm -f &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/bin/ld
  rm -f &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/bin/nm
  rm -f &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/bin/objdump
  rm -f &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/bin/ranlib
  rm -f &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/bin/strip
  rm -f &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/bin/objcopy
  rm -f &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/lib/libiberty.a
  rm -rf &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/share
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The GCC PKGBUILD took &lt;em&gt;forever&lt;/em&gt; to figure out. At first it would complain about not being able to find headers; I had to add &lt;code&gt;--with-newlib&lt;/code&gt; to stop that. Then it started complaining about not being able to find &lt;code&gt;pthread.h&lt;/code&gt; which is part of glibc; the switch &lt;code&gt;--disable-threads&lt;/code&gt; took care of that. The hardest error, however, was when compiling libgcc would abort with the error&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;&lt;code&gt;......ld: crt1.o: No such file: No such file or directory&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;But &lt;code&gt;crt1.o&lt;/code&gt; is a part of glibc, and I logically should be able to build GCC such that it does not depend on glibc. After trying and failing for hours, I finally realized the culprit was the switch &lt;code&gt;--enable-shared&lt;/code&gt;; changing that to &lt;code&gt;--disable-shared&lt;/code&gt; finally fixed the build. The resulting PKGBUILD is as follows:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Maintainer: Chuan Ji&lt;/span&gt;

&lt;span class="nv"&gt;_target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;arm-linux-gnueabi&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;pkgname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cross-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_target&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-gcc-base
&lt;span class="nv"&gt;pkgver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4.5.2
&lt;span class="nv"&gt;pkgrel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nv"&gt;pkgdesc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The GNU Compiler Collection&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;i686 x86_64&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;license&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GPL&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;LGPL&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://gcc.gnu.org&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;depends&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cross-&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_target&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-binutils&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;libmpc&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;libelf&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cloog-ppl&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;!libtool !emptydirs zipman docs !strip&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;ftp://gcc.gnu.org/pub/gcc/releases/gcc-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pkgver&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/gcc-core-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pkgver&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.tar.bz2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;md5sums&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;aa9e36bec080452372bfba793428ee82&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

build&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$srcdir&lt;/span&gt;/gcc-&lt;span class="nv"&gt;$pkgver&lt;/span&gt;

  &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-O2 -pipe&amp;quot;&lt;/span&gt;
  &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;CXXFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-O2 -pipe&amp;quot;&lt;/span&gt;

  &lt;span class="o"&gt;[[&lt;/span&gt; -d gcc-build &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; mkdir gcc-build
  &lt;span class="nb"&gt;cd &lt;/span&gt;gcc-build

  ../configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr
        --program-prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_target&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-
        --target&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_target&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        --host&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$CHOST&lt;/span&gt;
        --build&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$CHOST&lt;/span&gt;
        --disable-shared --disable-nls
        --disable-threads
        --enable-languages&lt;span class="o"&gt;=&lt;/span&gt;c --enable-multilib
        --with-local-prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_target&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        --with-as&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_target&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-as --with-ld&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_target&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-ld
        --enable-softfloat
        --with-float&lt;span class="o"&gt;=&lt;/span&gt;soft
        --with-newlib
        --enable-interwork
        --enable-addons

  make all-gcc all-target-libgcc
  make &lt;span class="nv"&gt;DESTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$pkgdir&lt;/span&gt; install-gcc install-target-libgcc

  rm -f &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/share/man/man7/fsf-funding.7*
  rm -f &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/share/man/man7/gfdl.7*
  rm -f &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/share/man/man7/gpl.7*
  rm -rf &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/share/info

  cp -r &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/libexec/* &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/lib/
  rm -rf &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/libexec

  &lt;span class="c"&gt;# strip it manually&lt;/span&gt;
  &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/bin/* 2&amp;gt;/dev/null &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;  &lt;/span&gt;find &lt;span class="nv"&gt;$pkgdir&lt;/span&gt;/usr/lib -type f -exec /usr/bin/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_target&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-strip &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; 2&amp;gt;/dev/null &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I submitted both packages to the AUR; the binutils package is found &lt;a href="https://aur.archlinux.org/packages.php?ID=46227"&gt;here&lt;/a&gt;, and the GCC package is found &lt;a href="https://aur.archlinux.org/packages.php?ID=46226"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;With the built packages, I was able to compile the Maemo kernel after a small change to &lt;code&gt;scripts/mod/sumversion.c&lt;/code&gt;. This fix was because the compilation would fail with the message &lt;code&gt;PATH_MAX&lt;/code&gt; undefined; inserting a simple &lt;code&gt;#include &amp;lt;limits.h&amp;gt;&lt;/code&gt; solved the problem. Strangely enough, the kernel configuration generated by &lt;code&gt;make n800_defconfig&lt;/code&gt; in the kernel tree does not even compile. I had to manually modify the &lt;code&gt;.config&lt;/code&gt; file.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Unfortunately, after flashing the generated kernel, the device now gets stuck on the hands screen on bootup. Will investigate further some other time. It&amp;#8217;s too late and I&amp;#8217;ve got class tomorrow&amp;#8230;&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>NITDroid links</title><link href="https://seasonofcode.com/posts/nitdroid-links.html" rel="alternate"></link><updated>2011-02-06T23:03:06-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-06:posts/nitdroid-links.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Alright, while my X40 is happily building the cross-compiling toolchain for ARM (&lt;code&gt;yaourt -S --noconfirm cross-arm-none-eabi-gcc&lt;/code&gt;), I&amp;#8217;m going to post here links to pages and resources that have so far guided me in this attempt.&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://www.linuxfordevices.com/c/a/Linux-For-Devices-Articles/Porting-Android-to-a-new-device/"&gt;Porting Android to a new device&lt;/a&gt;, a wonderful walk-through for porting Android 1.0 to the N810.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://natisbad.org/N810/index.html"&gt;Debian and recent linux kernel on N810&lt;/a&gt; documents an effort to port Debian to the N810. Its kernel compilation section has been very helpful.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://stlc45xx.garage.maemo.org/"&gt;stlc45xx&lt;/a&gt;, an open source WLAN driver Nokia N800 and N810 devices.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://omappedia.org/wiki/Linux_OMAP_Kernel_Project"&gt;Linux OMAP Kernel Project&lt;/a&gt; talks about the linux-omap tree and the Android OMAP tree.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://elinux.org/Android_on_OMAP"&gt;Android on OMAP&lt;/a&gt; gives a good overview on porting Android to the OMAP platform.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://wiki.nitdroid.com/index.php?title=Main_Page"&gt;NITDroid&lt;/a&gt;, a previous attempt at the same project. They have kernel and userspace images for Android 1.6; however, development seems to have been abandoned.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>Locating Nokia's changes to the kernel</title><link href="https://seasonofcode.com/posts/locating-nokias-changes-to-the-kernel.html" rel="alternate"></link><updated>2011-02-06T20:23:39-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-06:posts/locating-nokias-changes-to-the-kernel.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;The first step is of course to locate changes made by Nokia to the kernel. We first download and extract the source code of Maemo&amp;#8217;s kernel:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;wget http://repository.maemo.org/pool/diablo/free/k/kernel-source-diablo/kernel-source-diablo_2.6.21.orig.tar.gz
mkdir maemo_src
tar xvz --strip-components&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; -C maemo_src -f kernel-source-diablo_2.6.21.orig.tar.gz
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now we have to retrieve, extract and apply the newest patch to this kernel:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;wget http://repository.maemo.org/pool/diablo/free/k/kernel-source-diablo/kernel-source-diablo_2.6.21-200842maemo1.diff.gz
gunzip kernel-source-diablo_2.6.21-200842maemo1.diff.gz
patch -N -d maemo_src -p2 &amp;lt; kernel-source-diablo_2.6.21-200842maemo1.diff
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The source tree is now located under &lt;code&gt;maemo_src&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now we have to retrieve the vanilla linux-omap kernel against which Nokia made its changes:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;git clone git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap-2.6.git
&lt;span class="nb"&gt;cd &lt;/span&gt;linux-omap-2.6
git reset --hard v2.6.21-omap1
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This checks out the 2.6.21-rc7-omap1 version of linux-omap tree under &lt;code&gt;linux-omap-2.6&lt;/code&gt;. I am checking out this particular version of the tree after several trials; this branch appeared to create the smallest diff file.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now we create the diff file:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;diff -ruN linux-omap-2.6 maemo_src &amp;gt; linux-omap_vs_maemo.diff
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;For me, the &lt;a href="/assets/files/nitdroid/linux-omap_vs_maemo.diff"&gt;diff file created&lt;/a&gt; is about 2.8M. From a cursory examination, a large portion of the diff file is functionally irrelevant. I will now proceed to trim it down.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Incidentally, the Android source tree checked out via Repo as documented on a previous post will not do, as we need to incorporate Nokia&amp;#8217;s changes into the Android OMAP tree as opposed to the stock Android tree. To check out the Android OMAP tree, I did:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;git clone git://android.git.kernel.org/kernel/omap.git android-omap
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;which creates a copy of the Android OMAP tree in &lt;code&gt;android-omap&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>Roadmap</title><link href="https://seasonofcode.com/posts/roadmap.html" rel="alternate"></link><updated>2011-02-06T17:15:09-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-06:posts/roadmap.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;Just found &lt;a href="http://www.linuxfordevices.com/c/a/Linux-For-Devices-Articles/Porting-Android-to-a-new-device/"&gt;a wonderful article&lt;/a&gt; by Peter McDermott fron Nth Code (located in, funnily enough, Beijing) that talks about porting Android to the N810. Based on this article and some other research, I have developed the following roadmap:&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;strong&gt;1. Porting the kernel&lt;/strong&gt;
There are three sets of changes to the vanilla Linux kernel that we need to merge in order to create a kernel that would allow Android to run on the N810.&lt;/p&gt;&lt;/div&gt;
&lt;div class="ulist"&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://omappedia.org/wiki/Linux_OMAP_Kernel_Project"&gt;linux-omap&lt;/a&gt; patches. The N810 runs on a 400MHz TI OMAP 2420; we will therefore need the specific changes that would allow Linux to run on the OMAP2 platform. These changes are incorporated into the &lt;a href="http://omappedia.org/wiki/Linux_OMAP_Kernel_Project"&gt;linux-omap&lt;/a&gt; kernel.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Android 2.3 (Gingerbread) patches to kernel version 2.6.35.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href="http://repository.maemo.org/pool/diablo/free/k/kernel-source-diablo/"&gt;N810 patches&lt;/a&gt; to kernel version 2.6.21 that include, most importantly, device drivers.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The strategy presented in the aforementioned article is merging the latter two into the linux-omap kernel. However, the Android project has since developed &lt;a href="http://android.git.kernel.org/?p=kernel/omap.git"&gt;an OMAP kernel&lt;/a&gt; of its own, which means all we need to do is &lt;strong&gt;port the N810 patches into the Android OMAP kernel&lt;/strong&gt;. In the development process, I will keep the Maemo 4.1 (Diablo) userspace image on the device in order to test kernel functionality.
As a side note, while the port in the aforementioned article did not support WiFi due to the closed-source nature of Nokia&amp;#8217;s drivers, an &lt;a href="http://stlc45xx.garage.maemo.org/"&gt;open-source alternative&lt;/a&gt; to the latter has been developed and will be integrated into my kernel.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;strong&gt;2. Porting the Android userspace&lt;/strong&gt;
This should be relatively easy once the kernel is functional. Haven&amp;#8217;t given much thought to it yet.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry><entry><title>Vimpress</title><link href="https://seasonofcode.com/posts/vimpress.html" rel="alternate"></link><updated>2011-02-05T16:48:20-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-05:posts/vimpress.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I just set up Vim to handle this blog as I got tired of typing &amp;lt;code&amp;gt;'s. For some bizarre reason the &lt;code&gt;vimpress&lt;/code&gt; in AUR does not even work; I had to manually &lt;a href="http://www.vim.org/scripts/script.php?script_id=1953"&gt;download&lt;/a&gt; and extract it in &lt;code&gt;~/.vim&lt;/code&gt;. Note that the blogging password is stored in the &lt;code&gt;blog.vim&lt;/code&gt; file itself; I obviously had to &lt;code&gt;chmod 600&lt;/code&gt; it. For some reason Vim won&amp;#8217;t differentiate between &amp;lt;C-c&amp;gt; and &amp;lt;C-S-c&amp;gt;; I +imap+ed &amp;lt;code&amp;gt; to &amp;lt;C-c&amp;gt; and &amp;lt;/code&amp;gt; to &amp;lt;C-v&amp;gt; instead.&lt;/p&gt;&lt;/div&gt;
</summary><category term="Misc"></category></entry><entry><title>NITDroid development environment setup</title><link href="https://seasonofcode.com/posts/nitdroid-development-environment-setup.html" rel="alternate"></link><updated>2011-02-05T06:22:58-08:00</updated><author><name>Chuan Ji</name></author><id>tag:seasonofcode.com,2011-02-05:posts/nitdroid-development-environment-setup.html</id><summary type="html">&lt;div class="paragraph"&gt;&lt;p&gt;I&amp;#8217;ve just set up my old X40 as the dedicated development machine for NITDroid,
my attempt at an N810 port of Android. Apart from the usual Arch base install,
setting up an environment that can compile Android requires the following.&lt;/p&gt;&lt;/div&gt;
&lt;div class="olist arabic"&gt;&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;
Sun JDK v6, which under Arch is a simple matter of &lt;code&gt;yaourt -S jdk&lt;/code&gt;)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Python 2.4. This is required for the Repo tool below which crashes when run on Arch&amp;#8217;s default Python 2.7. I placed the source in &lt;code&gt;/opt/nitdroid/python2.4/src&lt;/code&gt;, and ran configure with
&lt;code&gt;./configure --prefix=/opt/nitdroid/python2.4 --enable-shared --with-threads --enable-ipv6 --enable-unicode=ucs4 --with-system-expat --with-system-ffi&lt;/code&gt;
which I stole from Arch&amp;#8217;s PKGBUILD for Python 2.7. After the traditional &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;make install&lt;/code&gt;, I add &lt;code&gt;/opt/nitdroid/python2.4/bin&lt;/code&gt; to the beginning of &lt;code&gt;PATH&lt;/code&gt; and I create the file &lt;code&gt;/etc/ld.so.conf.d/python2.4.conf&lt;/code&gt; with the line "&lt;code&gt;/opt/nitdroid/python2.4/bin&lt;/code&gt;" and run &lt;code&gt;ldconfig&lt;/code&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Repo. Repo, quite amazingly, is in AUR, so a simple &lt;code&gt;yaourt -S repo&lt;/code&gt; sufficed.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The Android source code. According to Google&amp;#8217;s &lt;a href="http://source.android.com/source/download.html"&gt;instructions&lt;/a&gt;, I did &lt;code&gt;repo init -u git://android.git.kernel.org/platform/manifest.git -b gingerbread&lt;/code&gt; followed by &lt;code&gt;repo sync&lt;/code&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
</summary><category term="Projects"></category></entry></feed>