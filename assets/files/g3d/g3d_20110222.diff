Index: G3D9/G3D.lib/source/System.cpp
===================================================================
--- G3D9/G3D.lib/source/System.cpp	(revision 525)
+++ G3D9/G3D.lib/source/System.cpp	(working copy)
@@ -49,7 +49,7 @@
 #   include <sys/timeb.h>
 #   include "G3D/RegistryUtil.h"
 
-#elif defined(G3D_LINUX) 
+#elif defined(G3D_LINUX) || defined(G3D_ANDROID)
 
 #   include <stdlib.h>
 #   include <stdio.h>
@@ -80,8 +80,10 @@
     #include <CoreServices/CoreServices.h>
 #endif
 
+#ifndef G3D_ANDROID
 // SIMM include
 #include <xmmintrin.h>
+#endif
 
 
 namespace G3D {
@@ -1727,7 +1729,7 @@
     dreg = d;
 }
 
-#elif defined(G3D_OSX) && ! defined(G3D_OSX_INTEL)
+#elif (defined(G3D_OSX) && ! defined(G3D_OSX_INTEL)) || defined(G3D_ANDROID)
 
 // non-intel OS X; no CPUID
 void System::cpuid(CPUIDFunction func, uint32& eax, uint32& ebx, uint32& ecx, uint32& edx) {
Index: G3D9/G3D.lib/source/Matrix.cpp
===================================================================
--- G3D9/G3D.lib/source/Matrix.cpp	(revision 525)
+++ G3D9/G3D.lib/source/Matrix.cpp	(working copy)
@@ -117,28 +117,28 @@
 }
 
 
-Matrix& Matrix::operator-=(const Matrix& _B) {
-    const Impl& B = *_B.impl;
+Matrix& Matrix::operator-=(const Matrix& B_) {
+    const Impl& B = *B_.impl;
     INPLACE(sub)
     return *this;
 }
 
 
-Matrix& Matrix::operator+=(const Matrix& _B) {
-    const Impl& B = *_B.impl;
+Matrix& Matrix::operator+=(const Matrix& B_) {
+    const Impl& B = *B_.impl;
     INPLACE(add)
     return *this;
 }
 
 
-void Matrix::arrayMulInPlace(const Matrix& _B) {
-    const Impl& B = *_B.impl;
+void Matrix::arrayMulInPlace(const Matrix& B_) {
+    const Impl& B = *B_.impl;
     INPLACE(arrayMul)
 }
 
 
-void Matrix::arrayDivInPlace(const Matrix& _B) {
-    const Impl& B = *_B.impl;
+void Matrix::arrayDivInPlace(const Matrix& B_) {
+    const Impl& B = *B_.impl;
     INPLACE(arrayDiv)
 }
 
Index: G3D9/G3D.lib/source/BinaryOutput.cpp
===================================================================
--- G3D9/G3D.lib/source/BinaryOutput.cpp	(revision 525)
+++ G3D9/G3D.lib/source/BinaryOutput.cpp	(working copy)
@@ -18,7 +18,7 @@
 #include "G3D/Log.h"
 #include <cstring>
 
-#ifdef G3D_LINUX
+#if defined(G3D_LINUX) || defined(G3D_ANDROID)
 #    include <errno.h>
 #endif
 
Index: G3D9/G3D.lib/source/NetAddress.cpp
===================================================================
--- G3D9/G3D.lib/source/NetAddress.cpp	(revision 525)
+++ G3D9/G3D.lib/source/NetAddress.cpp	(working copy)
@@ -14,7 +14,7 @@
 #include "G3D/System.h"
 #include "G3D/NetworkDevice.h"
 
-#if defined(G3D_LINUX) || defined(G3D_OSX)
+#if defined(G3D_LINUX) || defined(G3D_OSX) || defined(G3D_ANDROID)
     #include <unistd.h>
     #include <errno.h>
     #include <sys/socket.h>
Index: G3D9/G3D.lib/include/G3D/debugAssert.h
===================================================================
--- G3D9/G3D.lib/include/G3D/debugAssert.h	(revision 525)
+++ G3D9/G3D.lib/include/G3D/debugAssert.h	(working copy)
@@ -36,6 +36,13 @@
 #   pragma warning (disable : 4127)
 #endif
 
+// TODO: Remove this once iCompile has Android support.
+#ifdef G3D_ANDROID
+#   undef G3D_LINUX
+#   undef G3D_WIN32
+#   undef G3D_OSX
+#endif
+
 #ifdef G3D_LINUX
     // Needed so we can define a global display
     // pointer for debugAssert.
Index: G3D9/G3D.lib/include/G3D/System.h
===================================================================
--- G3D9/G3D.lib/include/G3D/System.h	(revision 525)
+++ G3D9/G3D.lib/include/G3D/System.h	(working copy)
@@ -23,6 +23,8 @@
 #ifdef G3D_OSX
 #define Zone OSX_Zone
 #   include <CoreServices/CoreServices.h>
+#elif defined(G3D_ANDROID)
+#   include <sys/times.h>
 #endif
 
 namespace G3D {
@@ -462,6 +464,15 @@
         return ((uint64)timehi << 32) + (uint64)timelo;
     }
 
+#elif defined(G3D_ANDROID)
+
+    inline uint64 System::getCycleCount() {
+        // The ARM architecture does not specify a clock cycle register; we are
+        // stuck with the POSIX times() function in sys/times.h. Providing NULL
+        // as the argument to times() is a Linux extension.
+        return (uint64)times(NULL);
+    }
+
 #elif defined(G3D_LINUX)
 
     inline uint64 System::getCycleCount() {
Index: G3D9/G3D.lib/include/G3D/AtomicInt32.h
===================================================================
--- G3D9/G3D.lib/include/G3D/AtomicInt32.h	(revision 525)
+++ G3D9/G3D.lib/include/G3D/AtomicInt32.h	(working copy)
@@ -22,7 +22,10 @@
  An integer that may safely be used on different threads without
  external locking.
 
- On Win32, Linux, FreeBSD, and Mac OS X this is implemented without locks.  
+ On Win32, Linux, FreeBSD, and Mac OS X this is implemented without locks.
+ On Android (assuming ARM), there are no native atomic instructions and the
+ GCC builtins invoked here rely on the Linux kernel's support for software
+ atomic operations.
 
  <B>BETA API</B>  This is unsupported and may change
  */
@@ -74,6 +77,10 @@
 
             return InterlockedExchangeAdd(&m_value, x);
 
+#       elif defined(G3D_ANDROID)
+
+            return __sync_fetch_and_add(&m_value, x);
+
 #       elif defined(G3D_LINUX) || defined(G3D_FREEBSD)
 
             int32 old;
@@ -101,7 +108,7 @@
 #       if defined(G3D_WIN32)
             // Note: returns the newly incremented value
             InterlockedIncrement(&m_value);
-#       elif defined(G3D_LINUX) || defined(G3D_FREEBSD)
+#       elif defined(G3D_LINUX) || defined(G3D_FREEBSD) || defined(G3D_ANDROID)
             add(1);
 #       elif defined(G3D_OSX)
             // Note: returns the newly incremented value
@@ -114,6 +121,11 @@
 #       if defined(G3D_WIN32)
             // Note: returns the newly decremented value
             return InterlockedDecrement(&m_value);
+
+#       elif defined(G3D_ANDROID)
+
+            return __sync_sub_and_fetch(&m_value, 1);
+
 #       elif defined(G3D_LINUX)  || defined(G3D_FREEBSD)
             unsigned char nz;
 
@@ -142,6 +154,8 @@
     int32 compareAndSet(const int32 comperand, const int32 exchange) {
 #       if defined(G3D_WIN32)
             return InterlockedCompareExchange(&m_value, exchange, comperand);
+#       elif defined(G3D_ANDROID)
+            return __sync_val_compare_and_swap(&m_value, comperand, exchange);
 #       elif defined(G3D_LINUX) || defined(G3D_FREEBSD) || defined(G3D_OSX)
             // Based on Apache Portable Runtime
             // http://koders.com/c/fid3B6631EE94542CDBAA03E822CA780CBA1B024822.aspx
Index: G3D9/G3D.lib/ice.txt
===================================================================
--- G3D9/G3D.lib/ice.txt	(revision 525)
+++ G3D9/G3D.lib/ice.txt	(working copy)
@@ -90,11 +90,11 @@
 ################################################################
 [GLOBAL]
 
-compiler: %(defaultcompiler)s
+compiler: $(NDK_ROOT)/toolchains/arm-linux-androideabi-4.4.3/prebuilt/linux-x86/bin/arm-linux-androideabi-g++
 
-include: %(defaultinclude)s
+include: $(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/include:$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/libs/armeabi/include:$(NDK_ROOT)/platforms/android-5/arch-arm/usr/include
 
-library: %(defaultlibrary)s
+library: $(NDK_ROOT)/platforms/android-5/arch-arm/usr/lib:$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/libs/armeabi
 
 exclude: %(defaultexclude)s
 
@@ -108,19 +108,19 @@
 # If a directory containing an iCompile ice.txt file is specified, 
 # that project will be built first and then added to the include 
 # and library paths and linked against.
-uses:
+uses: m:c:stdc++:supc++
 
 ################################################################
 [DEBUG]
 
-compileoptions:
+compileoptions: -fpic -ffunction-sections -funwind-tables -fstack-protector -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ -Wno-psabi -march=armv5te -mtune=xscale -msoft-float -mthumb -Os -fomit-frame-pointer -fno-strict-aliasing -finline-limit=64 -DANDROID -Wa,--noexecstack -fexceptions -frtti -g -DG3D_ANDROID
 
-linkoptions:
+linkoptions: -shared --sysroot=$(NDK_ROOT)/platforms/android-5/arch-arm -Wl,--no-undefined -Wl,-z,noexecstack
 
 ################################################################
 [RELEASE]
 
-compileoptions:
+compileoptions: -fpic -ffunction-sections -funwind-tables -fstack-protector -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ -Wno-psabi -march=armv5te -mtune=xscale -msoft-float -mthumb -Os -fomit-frame-pointer -fno-strict-aliasing -finline-limit=64 -DANDROID -Wa,--noexecstack -fexceptions -frtti -O2 -DG3D_ANDROID
 
-linkoptions:
+linkoptions: -shared --sysroot=$(NDK_ROOT)/platforms/android-5/arch-arm -Wl,--no-undefined -Wl,-z,noexecstack
 
Index: G3D9/png.lib/ice.txt
===================================================================
--- G3D9/png.lib/ice.txt	(revision 525)
+++ G3D9/png.lib/ice.txt	(working copy)
@@ -90,11 +90,11 @@
 ################################################################
 [GLOBAL]
 
-compiler: %(defaultcompiler)s
+compiler: $(NDK_ROOT)/toolchains/arm-linux-androideabi-4.4.3/prebuilt/linux-x86/bin/arm-linux-androideabi-g++
 
-include: %(defaultinclude)s
+include: $(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/include:$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/libs/armeabi/include:$(NDK_ROOT)/platforms/android-5/arch-arm/usr/include
 
-library: %(defaultlibrary)s
+library: $(NDK_ROOT)/platforms/android-5/arch-arm/usr/lib:$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/libs/armeabi
 
 exclude: %(defaultexclude)s
 
@@ -108,19 +108,19 @@
 # If a directory containing an iCompile ice.txt file is specified, 
 # that project will be built first and then added to the include 
 # and library paths and linked against.
-uses:
+uses: m:c:stdc++:supc++
 
 ################################################################
 [DEBUG]
 
-compileoptions:
+compileoptions: -fpic -ffunction-sections -funwind-tables -fstack-protector -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ -Wno-psabi -march=armv5te -mtune=xscale -msoft-float -mthumb -Os -fomit-frame-pointer -fno-strict-aliasing -finline-limit=64 -DANDROID -Wa,--noexecstack -fexceptions -frtti -g
 
-linkoptions:
+linkoptions: -shared --sysroot=$(NDK_ROOT)/platforms/android-5/arch-arm -Wl,--no-undefined -Wl,-z,noexecstack
 
 ################################################################
 [RELEASE]
 
-compileoptions:
+compileoptions: -fpic -ffunction-sections -funwind-tables -fstack-protector -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ -Wno-psabi -march=armv5te -mtune=xscale -msoft-float -mthumb -Os -fomit-frame-pointer -fno-strict-aliasing -finline-limit=64 -DANDROID -Wa,--noexecstack -fexceptions -frtti -O2
 
-linkoptions:
+linkoptions: -shared --sysroot=$(NDK_ROOT)/platforms/android-5/arch-arm -Wl,--no-undefined -Wl,-z,noexecstack
 
Index: G3D9/jpeg.lib/ice.txt
===================================================================
--- G3D9/jpeg.lib/ice.txt	(revision 525)
+++ G3D9/jpeg.lib/ice.txt	(working copy)
@@ -90,11 +90,11 @@
 ################################################################
 [GLOBAL]
 
-compiler: %(defaultcompiler)s
+compiler: $(NDK_ROOT)/toolchains/arm-linux-androideabi-4.4.3/prebuilt/linux-x86/bin/arm-linux-androideabi-g++
 
-include: %(defaultinclude)s
+include: $(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/include:$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/libs/armeabi/include:$(NDK_ROOT)/platforms/android-5/arch-arm/usr/include
 
-library: %(defaultlibrary)s
+library: $(NDK_ROOT)/platforms/android-5/arch-arm/usr/lib:$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/libs/armeabi
 
 exclude: %(defaultexclude)s
 
@@ -108,19 +108,19 @@
 # If a directory containing an iCompile ice.txt file is specified, 
 # that project will be built first and then added to the include 
 # and library paths and linked against.
-uses:
+uses: m:c:stdc++:supc++
 
 ################################################################
 [DEBUG]
 
-compileoptions: -w
+compileoptions: -fpic -ffunction-sections -funwind-tables -fstack-protector -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ -Wno-psabi -march=armv5te -mtune=xscale -msoft-float -mthumb -Os -fomit-frame-pointer -fno-strict-aliasing -finline-limit=64 -DANDROID -Wa,--noexecstack -fexceptions -frtti -g
 
-linkoptions:
+linkoptions: -shared --sysroot=$(NDK_ROOT)/platforms/android-5/arch-arm -Wl,--no-undefined -Wl,-z,noexecstack
 
 ################################################################
 [RELEASE]
 
-compileoptions: -w
+compileoptions: -fpic -ffunction-sections -funwind-tables -fstack-protector -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ -Wno-psabi -march=armv5te -mtune=xscale -msoft-float -mthumb -Os -fomit-frame-pointer -fno-strict-aliasing -finline-limit=64 -DANDROID -Wa,--noexecstack -fexceptions -frtti -O2
 
-linkoptions:
+linkoptions: -shared --sysroot=$(NDK_ROOT)/platforms/android-5/arch-arm -Wl,--no-undefined -Wl,-z,noexecstack
 
Index: G3D9/GLG3D.lib/include/GLG3D/glheaders.h
===================================================================
--- G3D9/GLG3D.lib/include/GLG3D/glheaders.h	(revision 525)
+++ G3D9/GLG3D.lib/include/GLG3D/glheaders.h	(working copy)
@@ -21,6 +21,7 @@
 
 #ifdef G3D_WIN32
 #   include "GLG3D/GL/wglew.h"
+#elif defined(G3D_ANDROID)
 #elif defined(G3D_OSX) || defined(G3D_FREEBSD) || defined(G3D_LINUX)
 #   include "GLG3D/GL/glxew.h"
 #endif
Index: G3D9/GLG3D.lib/include/GLG3D/GL/glew.h
===================================================================
--- G3D9/GLG3D.lib/include/GLG3D/GL/glew.h	(revision 525)
+++ G3D9/GLG3D.lib/include/GLG3D/GL/glew.h	(working copy)
@@ -1141,6 +1141,8 @@
 /* this is where we can safely include GLU */
 #if defined(__APPLE__) && defined(__MACH__)
 #include <OpenGL/glu.h>
+#elif defined(G3D_ANDROID)
+#include <GLES2/gl2.h>
 #else
 #include <GL/glu.h>
 #endif
@@ -1607,8 +1609,10 @@
 #define GL_DYNAMIC_COPY 0x88EA
 #define GL_SAMPLES_PASSED 0x8914
 
+#ifndef G3D_ANDROID
 typedef ptrdiff_t GLsizeiptr;
 typedef ptrdiff_t GLintptr;
+#endif
 
 typedef void (GLAPIENTRY * PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);
 typedef void (GLAPIENTRY * PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);
Index: G3D9/zip.lib/ice.txt
===================================================================
--- G3D9/zip.lib/ice.txt	(revision 525)
+++ G3D9/zip.lib/ice.txt	(working copy)
@@ -5,15 +5,96 @@
 #
 ################################################################
 
+# If you have special needs, you can edit per-project ice.txt
+# files and your global ~/.icompile file to customize the
+# way your projects build.  However, the default values are
+# probably sufficient and you don't *have* to edit these.
+#
+# To return to default settings, just delete ice.txt and
+# ~/.icompile and iCompile will generate new ones when run.
+#
+#
+# In general you can set values without any quotes, e.g.:
+#
+#  compileoptions = -O3 -g --verbose $(CXXFLAGS) %(defaultcompileoptions)s
+#
+# Adds the '-O3' '-g' and '--verbose' options to the defaults as
+# well as the value of environment variable CXXFLAGS.
+# 
+# These files have the following sections and variables.
+# Values in ice.txt override those specified in .icompile.
+#
+# GLOBAL Section
+#  compiler           Path to compiler.
+#  include            Semi-colon or colon (on Linux) separated
+#                     include paths.
+#
+#  library            Same, for library paths.
+#
+#  defaultinclude     The initial include path.
+#
+#  defaultlibrary     The initial library path.
+#
+#  defaultcompiler    The initial compiler.
+#
+#  defaultexclude     Regular expression for directories to exclude
+#                     when searching for C++ files.  Environment
+#                     variables are NOT expanded for this expression.
+#                     e.g. exclude: <EXCLUDE>|^win32$
+# 
+#  builddir           Build directory, relative to ice.txt
+#
+#  tempdir            Temp directory, relative to ice.txt
+#
+#  beep               If True, beep after compilation
+#
+# DEBUG and RELEASE Sections
+#
+#  compileoptions                     
+#  linkoptions        Options *in addition* to the ones iCompile
+#                     generates for the compiler and linker, separated
+#                     by spaces as if they were on a command line.
+#
+#
+# The following special values are available:
+#
+#   $(envvar)        Value of shell variable named envvar.
+#                    Unset variables are the empty string.
+#   $(shell ...)     Runs the '...' and replaces the expression
+#                    as if it were the value of an envvar.
+#   %(localvar)s     Value of a variable set inside ice.txt
+#                    or .icompile (Yes, you need that 's'--
+#                    it is a Python thing.)
+#   <NEWESTGCC>      The newest version of gcc on your system.
+#   <EXCLUDE>        Default directories excluded from compilation.
+#
+# The special values may differ between the RELEASE and DEBUG
+# targets.  The default .icompile sets the 'default' variables
+# and the default ice.txt sets the real ones from those, so you
+# can chain settings.
+#
+#  Colors have the form:
+#
+#    [bold|underline|reverse|italic|blink|fastblink|hidden|strikethrough]
+#    [FG] [on BG]
+#
+#  where FG and BG are each one of
+#   {default, black, red, green, brown, blue, purple, cyan, white}
+#  Many styles (e.g. blink, italic) are not supported on most terminals.
+#
+#  Examples of legal colors: "bold", "bold red", "bold red on white", "green",
+#  "bold on black"
+#
 
+
 ################################################################
 [GLOBAL]
 
-compiler: %(defaultcompiler)s
+compiler: $(NDK_ROOT)/toolchains/arm-linux-androideabi-4.4.3/prebuilt/linux-x86/bin/arm-linux-androideabi-g++
 
-include: %(defaultinclude)s
+include: $(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/include:$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/libs/armeabi/include:$(NDK_ROOT)/platforms/android-5/arch-arm/usr/include
 
-library: %(defaultlibrary)s
+library: $(NDK_ROOT)/platforms/android-5/arch-arm/usr/lib:$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/libs/armeabi
 
 exclude: %(defaultexclude)s
 
@@ -27,19 +108,19 @@
 # If a directory containing an iCompile ice.txt file is specified, 
 # that project will be built first and then added to the include 
 # and library paths and linked against.
-uses:
+uses: m:c:stdc++:supc++
 
 ################################################################
 [DEBUG]
 
-compileoptions:
+compileoptions: -fpic -ffunction-sections -funwind-tables -fstack-protector -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ -Wno-psabi -march=armv5te -mtune=xscale -msoft-float -mthumb -Os -fomit-frame-pointer -fno-strict-aliasing -finline-limit=64 -DANDROID -Wa,--noexecstack -fexceptions -frtti -g
 
-linkoptions:
+linkoptions: -shared --sysroot=$(NDK_ROOT)/platforms/android-5/arch-arm -Wl,--no-undefined -Wl,-z,noexecstack
 
 ################################################################
 [RELEASE]
 
-compileoptions:
+compileoptions: -fpic -ffunction-sections -funwind-tables -fstack-protector -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ -Wno-psabi -march=armv5te -mtune=xscale -msoft-float -mthumb -Os -fomit-frame-pointer -fno-strict-aliasing -finline-limit=64 -DANDROID -Wa,--noexecstack -fexceptions -frtti -O2
 
-linkoptions:
+linkoptions: -shared --sysroot=$(NDK_ROOT)/platforms/android-5/arch-arm -Wl,--no-undefined -Wl,-z,noexecstack
 
Index: G3D9/bin/ice/variables.py
===================================================================
--- G3D9/bin/ice/variables.py	(revision 525)
+++ G3D9/bin/ice/variables.py	(working copy)
@@ -91,7 +91,7 @@
         #
         # -MG means "don't give errors for header files that don't exist"
         # -MM means "don't tell me about system header files"
-        dependencyFlag = ['-M', '-MG', '-msse2']
+        dependencyFlag = ['-M', '-MG']
         
         useCommandFile = os.uname()[0] == 'Darwin'
         if useCommandFile:
Index: G3D9/bin/ice/depend.py
===================================================================
--- G3D9/bin/ice/depend.py	(revision 525)
+++ G3D9/bin/ice/depend.py	(working copy)
@@ -167,7 +167,8 @@
     argsWithoutArchitecture = _removeArch(getCompilerOptions(state, []))
     argsWithoutArchitecture = ' '.join(argsWithoutArchitecture)
     
-    raw = shell(state.compiler + ' -M -msse2 -MG ' + argsWithoutArchitecture + ' ' + file, verbosity >= TRACE)
+    #raw = shell(state.compiler + ' -M -msse2 -MG ' + argsWithoutArchitecture + ' ' + file, verbosity >= TRACE)
+    raw = shell(state.compiler + ' -M -MG ' + argsWithoutArchitecture + ' ' + file, verbosity >= TRACE)
     
     if verbosity >= SUPERTRACE:
         print('Raw output of dependency determination:')
Index: G3D9/bin/icompile
===================================================================
--- G3D9/bin/icompile	(revision 525)
+++ G3D9/bin/icompile	(working copy)
@@ -794,7 +794,7 @@
 
         arch = []
         if not is64:
-            arch = ['-march=i686', '-mtune=nocona']
+            #arch = ['-march=i686', '-mtune=nocona']
             state.detectedArchitecture = 'x86';
             state.detectedTuning = 'nocona';
 
@@ -805,7 +805,7 @@
         else:
             state.detectedArchitecture = 'x86_64';
         
-        arch += ['-msse3']
+        #arch += ['-msse3']
         state.compilerOptions += arch
         state.linkerOptions   += arch
 
@@ -862,7 +862,7 @@
             state.detectedArchitecture = 'x86';
             state.detectedTuning = 'pentium4';
             
-        state.compilerOptions.append('-msse3')
+        #state.compilerOptions.append('-msse3')
         
         if gccVersion[0] >= 4:
             state.compilerOptions.append('-mfpmath=sse')
@@ -942,7 +942,7 @@
         note = ''
         if len(oldLog) > 1:
             # Read the note from the last row
-            lastLine = csv.reader([oldLog[-1]], skipinitialspace=True).next()
+            lastLine = next(csv.reader([lastLine], skipinitialspace=True))
             if len(lastLine) >= 10:
                 note = lastLine[9]
         info += ',"' + note + '"\n'
